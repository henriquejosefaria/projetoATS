-------------------------------------------------------------------------------
Test set: main.java.controller.Controller_ESTest
-------------------------------------------------------------------------------
Tests run: 38, Failures: 0, Errors: 38, Skipped: 0, Time elapsed: 0.557 sec <<< FAILURE!
test31(main.java.controller.Controller_ESTest)  Time elapsed: 0.014 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/controller/Controller.caseLogin()Ljava/lang/String; @3: ldc
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/controller/Controller' }
    stack: { }
  Bytecode:
    0000000: b800 3212 4c4c b800 322a b400 3f2b b600
    0000010: c04d b800 322a 2ab4 0041 2cb6 00c5 2cb6
    0000020: 00c8 b600 ceb5 00d0 b800 322a b400 3f2a
    0000030: b400 d0c1 00d2 b800 5612 d3b6 005b b800
    0000040: 3299 0014 b200 d7b8 0056 12d8 b600 5bb8
    0000050: 0032 a700 06b2 00db b600 df57 b800 3212
    0000060: 4c4c b800 32b8 0056 12e0 b600 5bb8 0032
    0000070: a700 1fb8 0032 4d12 e24c b800 32b8 0056
    0000080: 12e3 b600 5bb8 0032 a700 074d 12e5 4cb8
    0000090: 0032 2bb0                              
  Exception Handler Table:
    bci [6, 98] => handler: 115
    bci [6, 98] => handler: 139

	at main.java.controller.Controller_ESTest.test31(Controller_ESTest.java:492)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test10(main.java.controller.Controller_ESTest)  Time elapsed: 0.01 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test10(Controller_ESTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test32(main.java.controller.Controller_ESTest)  Time elapsed: 0.018 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test32(Controller_ESTest.java:508)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test11(main.java.controller.Controller_ESTest)  Time elapsed: 0.011 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/controller/Controller.caseLogin()Ljava/lang/String; @3: ldc
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/controller/Controller' }
    stack: { }
  Bytecode:
    0000000: b800 3212 4c4c b800 322a b400 3f2b b600
    0000010: c04d b800 322a 2ab4 0041 2cb6 00c5 2cb6
    0000020: 00c8 b600 ceb5 00d0 b800 322a b400 3f2a
    0000030: b400 d0c1 00d2 b800 5612 d3b6 005b b800
    0000040: 3299 0014 b200 d7b8 0056 12d8 b600 5bb8
    0000050: 0032 a700 06b2 00db b600 df57 b800 3212
    0000060: 4c4c b800 32b8 0056 12e0 b600 5bb8 0032
    0000070: a700 1fb8 0032 4d12 e24c b800 32b8 0056
    0000080: 12e3 b600 5bb8 0032 a700 074d 12e5 4cb8
    0000090: 0032 2bb0                              
  Exception Handler Table:
    bci [6, 98] => handler: 115
    bci [6, 98] => handler: 139

	at main.java.controller.Controller_ESTest.test11(Controller_ESTest.java:155)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test33(main.java.controller.Controller_ESTest)  Time elapsed: 0.01 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test33(Controller_ESTest.java:525)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test12(main.java.controller.Controller_ESTest)  Time elapsed: 0.01 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test12(Controller_ESTest.java:173)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test34(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/controller/Controller.caseLogin()Ljava/lang/String; @3: ldc
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/controller/Controller' }
    stack: { }
  Bytecode:
    0000000: b800 3212 4c4c b800 322a b400 3f2b b600
    0000010: c04d b800 322a 2ab4 0041 2cb6 00c5 2cb6
    0000020: 00c8 b600 ceb5 00d0 b800 322a b400 3f2a
    0000030: b400 d0c1 00d2 b800 5612 d3b6 005b b800
    0000040: 3299 0014 b200 d7b8 0056 12d8 b600 5bb8
    0000050: 0032 a700 06b2 00db b600 df57 b800 3212
    0000060: 4c4c b800 32b8 0056 12e0 b600 5bb8 0032
    0000070: a700 1fb8 0032 4d12 e24c b800 32b8 0056
    0000080: 12e3 b600 5bb8 0032 a700 074d 12e5 4cb8
    0000090: 0032 2bb0                              
  Exception Handler Table:
    bci [6, 98] => handler: 115
    bci [6, 98] => handler: 139

	at main.java.controller.Controller_ESTest.test34(Controller_ESTest.java:542)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test13(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test13(Controller_ESTest.java:192)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test35(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/controller/Controller.caseLogin()Ljava/lang/String; @3: ldc
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/controller/Controller' }
    stack: { }
  Bytecode:
    0000000: b800 3212 4c4c b800 322a b400 3f2b b600
    0000010: c04d b800 322a 2ab4 0041 2cb6 00c5 2cb6
    0000020: 00c8 b600 ceb5 00d0 b800 322a b400 3f2a
    0000030: b400 d0c1 00d2 b800 5612 d3b6 005b b800
    0000040: 3299 0014 b200 d7b8 0056 12d8 b600 5bb8
    0000050: 0032 a700 06b2 00db b600 df57 b800 3212
    0000060: 4c4c b800 32b8 0056 12e0 b600 5bb8 0032
    0000070: a700 1fb8 0032 4d12 e24c b800 32b8 0056
    0000080: 12e3 b600 5bb8 0032 a700 074d 12e5 4cb8
    0000090: 0032 2bb0                              
  Exception Handler Table:
    bci [6, 98] => handler: 115
    bci [6, 98] => handler: 139

	at main.java.controller.Controller_ESTest.test35(Controller_ESTest.java:558)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test14(main.java.controller.Controller_ESTest)  Time elapsed: 0.013 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/controller/Controller.caseLogin()Ljava/lang/String; @3: ldc
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/controller/Controller' }
    stack: { }
  Bytecode:
    0000000: b800 3212 4c4c b800 322a b400 3f2b b600
    0000010: c04d b800 322a 2ab4 0041 2cb6 00c5 2cb6
    0000020: 00c8 b600 ceb5 00d0 b800 322a b400 3f2a
    0000030: b400 d0c1 00d2 b800 5612 d3b6 005b b800
    0000040: 3299 0014 b200 d7b8 0056 12d8 b600 5bb8
    0000050: 0032 a700 06b2 00db b600 df57 b800 3212
    0000060: 4c4c b800 32b8 0056 12e0 b600 5bb8 0032
    0000070: a700 1fb8 0032 4d12 e24c b800 32b8 0056
    0000080: 12e3 b600 5bb8 0032 a700 074d 12e5 4cb8
    0000090: 0032 2bb0                              
  Exception Handler Table:
    bci [6, 98] => handler: 115
    bci [6, 98] => handler: 139

	at main.java.controller.Controller_ESTest.test14(Controller_ESTest.java:209)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test36(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/controller/Controller.caseLogin()Ljava/lang/String; @3: ldc
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/controller/Controller' }
    stack: { }
  Bytecode:
    0000000: b800 3212 4c4c b800 322a b400 3f2b b600
    0000010: c04d b800 322a 2ab4 0041 2cb6 00c5 2cb6
    0000020: 00c8 b600 ceb5 00d0 b800 322a b400 3f2a
    0000030: b400 d0c1 00d2 b800 5612 d3b6 005b b800
    0000040: 3299 0014 b200 d7b8 0056 12d8 b600 5bb8
    0000050: 0032 a700 06b2 00db b600 df57 b800 3212
    0000060: 4c4c b800 32b8 0056 12e0 b600 5bb8 0032
    0000070: a700 1fb8 0032 4d12 e24c b800 32b8 0056
    0000080: 12e3 b600 5bb8 0032 a700 074d 12e5 4cb8
    0000090: 0032 2bb0                              
  Exception Handler Table:
    bci [6, 98] => handler: 115
    bci [6, 98] => handler: 139

	at main.java.controller.Controller_ESTest.test36(Controller_ESTest.java:574)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test15(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test15(Controller_ESTest.java:225)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test37(main.java.controller.Controller_ESTest)  Time elapsed: 0.01 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/controller/Controller.caseLogin()Ljava/lang/String; @3: ldc
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/controller/Controller' }
    stack: { }
  Bytecode:
    0000000: b800 3212 4c4c b800 322a b400 3f2b b600
    0000010: c04d b800 322a 2ab4 0041 2cb6 00c5 2cb6
    0000020: 00c8 b600 ceb5 00d0 b800 322a b400 3f2a
    0000030: b400 d0c1 00d2 b800 5612 d3b6 005b b800
    0000040: 3299 0014 b200 d7b8 0056 12d8 b600 5bb8
    0000050: 0032 a700 06b2 00db b600 df57 b800 3212
    0000060: 4c4c b800 32b8 0056 12e0 b600 5bb8 0032
    0000070: a700 1fb8 0032 4d12 e24c b800 32b8 0056
    0000080: 12e3 b600 5bb8 0032 a700 074d 12e5 4cb8
    0000090: 0032 2bb0                              
  Exception Handler Table:
    bci [6, 98] => handler: 115
    bci [6, 98] => handler: 139

	at main.java.controller.Controller_ESTest.test37(Controller_ESTest.java:590)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test16(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test16(Controller_ESTest.java:242)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test17(main.java.controller.Controller_ESTest)  Time elapsed: 0.012 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/controller/Controller.caseLogin()Ljava/lang/String; @3: ldc
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/controller/Controller' }
    stack: { }
  Bytecode:
    0000000: b800 3212 4c4c b800 322a b400 3f2b b600
    0000010: c04d b800 322a 2ab4 0041 2cb6 00c5 2cb6
    0000020: 00c8 b600 ceb5 00d0 b800 322a b400 3f2a
    0000030: b400 d0c1 00d2 b800 5612 d3b6 005b b800
    0000040: 3299 0014 b200 d7b8 0056 12d8 b600 5bb8
    0000050: 0032 a700 06b2 00db b600 df57 b800 3212
    0000060: 4c4c b800 32b8 0056 12e0 b600 5bb8 0032
    0000070: a700 1fb8 0032 4d12 e24c b800 32b8 0056
    0000080: 12e3 b600 5bb8 0032 a700 074d 12e5 4cb8
    0000090: 0032 2bb0                              
  Exception Handler Table:
    bci [6, 98] => handler: 115
    bci [6, 98] => handler: 139

	at main.java.controller.Controller_ESTest.test17(Controller_ESTest.java:261)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test18(main.java.controller.Controller_ESTest)  Time elapsed: 0.025 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test18(Controller_ESTest.java:277)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test19(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/controller/Controller.caseLogin()Ljava/lang/String; @3: ldc
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/controller/Controller' }
    stack: { }
  Bytecode:
    0000000: b800 3212 4c4c b800 322a b400 3f2b b600
    0000010: c04d b800 322a 2ab4 0041 2cb6 00c5 2cb6
    0000020: 00c8 b600 ceb5 00d0 b800 322a b400 3f2a
    0000030: b400 d0c1 00d2 b800 5612 d3b6 005b b800
    0000040: 3299 0014 b200 d7b8 0056 12d8 b600 5bb8
    0000050: 0032 a700 06b2 00db b600 df57 b800 3212
    0000060: 4c4c b800 32b8 0056 12e0 b600 5bb8 0032
    0000070: a700 1fb8 0032 4d12 e24c b800 32b8 0056
    0000080: 12e3 b600 5bb8 0032 a700 074d 12e5 4cb8
    0000090: 0032 2bb0                              
  Exception Handler Table:
    bci [6, 98] => handler: 115
    bci [6, 98] => handler: 139

	at main.java.controller.Controller_ESTest.test19(Controller_ESTest.java:295)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test30(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test30(Controller_ESTest.java:475)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test20(main.java.controller.Controller_ESTest)  Time elapsed: 0.011 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/controller/Controller.caseLogin()Ljava/lang/String; @3: ldc
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/controller/Controller' }
    stack: { }
  Bytecode:
    0000000: b800 3212 4c4c b800 322a b400 3f2b b600
    0000010: c04d b800 322a 2ab4 0041 2cb6 00c5 2cb6
    0000020: 00c8 b600 ceb5 00d0 b800 322a b400 3f2a
    0000030: b400 d0c1 00d2 b800 5612 d3b6 005b b800
    0000040: 3299 0014 b200 d7b8 0056 12d8 b600 5bb8
    0000050: 0032 a700 06b2 00db b600 df57 b800 3212
    0000060: 4c4c b800 32b8 0056 12e0 b600 5bb8 0032
    0000070: a700 1fb8 0032 4d12 e24c b800 32b8 0056
    0000080: 12e3 b600 5bb8 0032 a700 074d 12e5 4cb8
    0000090: 0032 2bb0                              
  Exception Handler Table:
    bci [6, 98] => handler: 115
    bci [6, 98] => handler: 139

	at main.java.controller.Controller_ESTest.test20(Controller_ESTest.java:312)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test21(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test21(Controller_ESTest.java:329)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test00(main.java.controller.Controller_ESTest)  Time elapsed: 0.016 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test00(Controller_ESTest.java:24)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test22(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/controller/Controller.caseLogin()Ljava/lang/String; @3: ldc
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/controller/Controller' }
    stack: { }
  Bytecode:
    0000000: b800 3212 4c4c b800 322a b400 3f2b b600
    0000010: c04d b800 322a 2ab4 0041 2cb6 00c5 2cb6
    0000020: 00c8 b600 ceb5 00d0 b800 322a b400 3f2a
    0000030: b400 d0c1 00d2 b800 5612 d3b6 005b b800
    0000040: 3299 0014 b200 d7b8 0056 12d8 b600 5bb8
    0000050: 0032 a700 06b2 00db b600 df57 b800 3212
    0000060: 4c4c b800 32b8 0056 12e0 b600 5bb8 0032
    0000070: a700 1fb8 0032 4d12 e24c b800 32b8 0056
    0000080: 12e3 b600 5bb8 0032 a700 074d 12e5 4cb8
    0000090: 0032 2bb0                              
  Exception Handler Table:
    bci [6, 98] => handler: 115
    bci [6, 98] => handler: 139

	at main.java.controller.Controller_ESTest.test22(Controller_ESTest.java:346)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test01(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test01(Controller_ESTest.java:35)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test23(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test23(Controller_ESTest.java:363)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test02(main.java.controller.Controller_ESTest)  Time elapsed: 0.008 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/controller/Controller.caseLogin()Ljava/lang/String; @3: ldc
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/controller/Controller' }
    stack: { }
  Bytecode:
    0000000: b800 3212 4c4c b800 322a b400 3f2b b600
    0000010: c04d b800 322a 2ab4 0041 2cb6 00c5 2cb6
    0000020: 00c8 b600 ceb5 00d0 b800 322a b400 3f2a
    0000030: b400 d0c1 00d2 b800 5612 d3b6 005b b800
    0000040: 3299 0014 b200 d7b8 0056 12d8 b600 5bb8
    0000050: 0032 a700 06b2 00db b600 df57 b800 3212
    0000060: 4c4c b800 32b8 0056 12e0 b600 5bb8 0032
    0000070: a700 1fb8 0032 4d12 e24c b800 32b8 0056
    0000080: 12e3 b600 5bb8 0032 a700 074d 12e5 4cb8
    0000090: 0032 2bb0                              
  Exception Handler Table:
    bci [6, 98] => handler: 115
    bci [6, 98] => handler: 139

	at main.java.controller.Controller_ESTest.test02(Controller_ESTest.java:44)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test24(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test24(Controller_ESTest.java:382)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test03(main.java.controller.Controller_ESTest)  Time elapsed: 0.008 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test03(Controller_ESTest.java:52)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test25(main.java.controller.Controller_ESTest)  Time elapsed: 0.01 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test25(Controller_ESTest.java:400)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test04(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test04(Controller_ESTest.java:61)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test26(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test26(Controller_ESTest.java:407)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test05(main.java.controller.Controller_ESTest)  Time elapsed: 0.01 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test05(Controller_ESTest.java:71)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test27(main.java.controller.Controller_ESTest)  Time elapsed: 0.01 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test27(Controller_ESTest.java:424)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test06(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test06(Controller_ESTest.java:81)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test28(main.java.controller.Controller_ESTest)  Time elapsed: 0.011 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test28(Controller_ESTest.java:441)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test07(main.java.controller.Controller_ESTest)  Time elapsed: 0.008 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test07(Controller_ESTest.java:90)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test29(main.java.controller.Controller_ESTest)  Time elapsed: 0.008 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test29(Controller_ESTest.java:458)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test08(main.java.controller.Controller_ESTest)  Time elapsed: 0.01 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/controller/Controller.caseLogin()Ljava/lang/String; @3: ldc
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/controller/Controller' }
    stack: { }
  Bytecode:
    0000000: b800 3212 4c4c b800 322a b400 3f2b b600
    0000010: c04d b800 322a 2ab4 0041 2cb6 00c5 2cb6
    0000020: 00c8 b600 ceb5 00d0 b800 322a b400 3f2a
    0000030: b400 d0c1 00d2 b800 5612 d3b6 005b b800
    0000040: 3299 0014 b200 d7b8 0056 12d8 b600 5bb8
    0000050: 0032 a700 06b2 00db b600 df57 b800 3212
    0000060: 4c4c b800 32b8 0056 12e0 b600 5bb8 0032
    0000070: a700 1fb8 0032 4d12 e24c b800 32b8 0056
    0000080: 12e3 b600 5bb8 0032 a700 074d 12e5 4cb8
    0000090: 0032 2bb0                              
  Exception Handler Table:
    bci [6, 98] => handler: 115
    bci [6, 98] => handler: 139

	at main.java.controller.Controller_ESTest.test08(Controller_ESTest.java:98)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test09(main.java.controller.Controller_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/UMCarroJa.save(Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { 'main/java/model/UMCarroJa', 'java/lang/String' }
    stack: { }
  Bytecode:
    0000000: b800 30bb 01d4 592b b801 da99 0010 4d58
    0000010: bb01 dc59 2cb7 01de a700 06b7 01df 4eb8
    0000020: 0030 013a 04b8 0030 bb01 e159 2db7 01e4
    0000030: 3a04 b800 3019 042a b601 e7b8 0030 1904
    0000040: b601 eab8 0030 1904 b601 edb8 0030 b801
    0000050: 2413 01ee b601 29b8 0030 a700 3eb8 0030
    0000060: 3a05 b800 30b2 01f0 1301 f2b6 01f7 b800
    0000070: 3019 04b6 01ed b800 30b8 0124 1301 f8b6
    0000080: 0129 b800 30a7 0013 b800 303a 0619 04b6
    0000090: 01ed b800 3019 06bf b800 30b1          
  Exception Handler Table:
    bci [50, 67] => handler: 93
    bci [50, 67] => handler: 136
    bci [93, 110] => handler: 136
    bci [136, 141] => handler: 136

	at main.java.controller.Controller_ESTest.test09(Controller_ESTest.java:115)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

