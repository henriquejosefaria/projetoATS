/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 10 16:04:21 GMT 2019
 */

package main.java.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import javax.management.AttributeList;
import main.java.model.Car;
import main.java.model.CarModel;
import main.java.model.Client;
import main.java.model.Owner;
import main.java.model.Rental;
import main.java.utils.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Owner_ESTest extends Owner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Owner owner0 = new Owner("Fr^OX#~Q?&j", "Fr^OX#~Q?&j", "4?mF 2@[W*?hO_.", 0, "main.java.model.CarModel$CarType");
      owner0.rate(0);
      Owner owner1 = owner0.myclone();
      assertNotSame(owner0, owner1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Owner owner0 = new Owner((String) null, ">(a40XZ^;UyW:", ">(a40XZ^;UyW:", 2998, (String) null);
      owner0.rate((-1444));
      Owner owner1 = owner0.myclone();
      assertEquals((-1444), owner1.getRates());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "-1ht5 ", "*;`)byRWK2Y>6+z5", (-648), "*;`)byRWK2Y>6+z5");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-648), "-1ht5 ");
      Double double0 = new Double((-648));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, carModel0, 849.661502504186, (-648), (-924), point0);
      Client client0 = new Client(point0, "", (String) null, "-1ht5 ", "; ", (-648));
      Rental rental0 = new Rental(car0, client0, point0);
      owner0.addPendingRental(rental0);
      AttributeList attributeList0 = owner0.getPending();
      assertEquals(1, attributeList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "-1ht5 ", "*;`)byRWK2Y>6+z5", (-648), "*;`)byRWK2Y>6+z5");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-648), "-1ht5 ");
      Double double0 = new Double((-648));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, carModel0, 849.661502504186, (-648), (-924), point0);
      owner0.addCar(car0);
      List<Car> list0 = owner0.getCars();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Owner owner0 = new Owner("qD;5", "", "O carro necessita de ser abastecido\n", 9, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 4938.2006490937, "e1ol&dk|K$ItF7HNV");
      Double double0 = new Double(4938.2006490937);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("O carro necessita de ser abastecido\n", owner0, carModel0, 9, 9, 1709, point0);
      Client client0 = new Client(point0, "", "\u001B[31m", "\u001B[31m", "qD;5", 9);
      Rental rental0 = new Rental(car0, client0, point0);
      car0.pendingRental(rental0);
      Rental rental1 = new Rental(car0, (Client) null, point0);
      // Undeclared exception!
      try { 
        owner0.refuse(rental1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Owner owner0 = new Owner((String) null, ">(a40XZ^;UyW:", ">(a40XZ^;UyW:", 2998, (String) null);
      // Undeclared exception!
      try { 
        owner0.rate((Rental) null, 2998);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Owner", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Owner owner0 = new Owner("3of!)*BS9/ad*s", "3of!)*BS9/ad*s", "3of!)*BS9/ad*s", (-1522788922), "3of!)*BS9/ad*s");
      Owner owner1 = owner0.myclone();
      // Undeclared exception!
      try { 
        owner1.getPending();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.ArrayList cannot be cast to javax.management.AttributeList
         //
         verifyException("main.java.model.Owner", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Owner owner0 = new Owner("V+$swqL.WEu[vGS<", "V+$swqL.WEu[vGS<", "V+$swqL.WEu[vGS<", (-4705), "V+$swqL.WEu[vGS<");
      Owner owner1 = owner0.myclone();
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-4705), "V+$swqL.WEu[vGS<");
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner1, carModel0, (-4705), (-4705), (-4705), point0);
      owner0.addCar(car0);
      Car car1 = new Car("V+$swqL.WEu[vGS<", owner0, carModel0, (-4705), (-4705), (-4705), (Point) null);
      owner1.addCar(car1);
      // Undeclared exception!
      try { 
        owner0.equals(owner1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Owner owner0 = new Owner("main.java.model.Car", "main.java.model.Car", "", 633, "main.java.model.Car");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 633, "");
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("main.java.model.Car", owner0, carModel0, 0.0, 0.0, 0, point0);
      car0.pendingRental((Rental) null);
      Client client0 = new Client(point0, (String) null, "l", "|D@`z", "main.java.model.Car", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        owner0.accept(rental0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Owner", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Owner owner0 = new Owner("tpabcXg", "|;sJn]):R~%z", "|;sJn]):R~%z", (-399), "tpabcXg");
      List<Car> list0 = owner0.getCars();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Owner owner0 = new Owner("main.j\"va.mol.Ownr", "main.j\"va.mol.Ownr", "main.j\"va.mol.Ownr", (-4743), "main.j\"va.mol.Ownr");
      Owner owner1 = owner0.myclone();
      boolean boolean0 = owner0.equals(owner1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Owner owner0 = new Owner("V+$swqL.WEu[vGS<", "V+$swqL.WEu[vGS<", "V+$swqL.WEu[vGS<", 25, "V+$swqL.WEu[vGS<");
      Owner owner1 = owner0.myclone();
      assertTrue(owner1.equals((Object)owner0));
      
      owner0.addPendingRental((Rental) null);
      boolean boolean0 = owner0.equals(owner1);
      assertFalse(owner1.equals((Object)owner0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Owner owner0 = new Owner("EJhvamodel.|ney", "EJhvamodel.|ney", "EJhvamodel.|ney", 31, "EJhvamodel.|ney");
      boolean boolean0 = owner0.equals("EJhvamodel.|ney");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Owner owner0 = new Owner("Ms}n(M#wCawLvU;f<", "oJ&:*B,Bxi", "Ms}n(M#wCawLvU;f<", 0, "oJ&:*B,Bxi");
      boolean boolean0 = owner0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Owner owner0 = new Owner("V+$swqL.WEu[vGS<", "V+$swqL.WEu[vGS<", "V+$swqL.WEu[vGS<", (-4705), "V+$swqL.WEu[vGS<");
      boolean boolean0 = owner0.equals(owner0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Owner owner0 = new Owner("3of)BS9/adVos", "3of)BS9/adVos", "3of)BS9/adVos", (-1522788898), "3of)BS9/adVos");
      Owner owner1 = owner0.myclone();
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-1522788898), "3of)BS9/adVos");
      Double double0 = new Double((-1522788898));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("3of)BS9/adVos", owner1, carModel0, (-1522788898), (-1522788898), (-1522788898), point0);
      Client client0 = new Client(point0, "3of)BS9/adVos", "3of)BS9/adVos", "3of)BS9/adVos", "3of)BS9/adVos", (-1522788898));
      Rental rental0 = new Rental(car0, client0, point0);
      assertTrue(owner0.equals((Object)owner1));
      
      owner1.accept(rental0);
      boolean boolean0 = owner0.equals(owner1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Owner owner0 = new Owner("J,up0<C", "J,up0<C", "", 0, "brIz8'=");
      owner0.addCar((Car) null);
      Owner owner1 = new Owner("Zg!-", "Abynjw<Z3z>`ky-", "", (-364), "Zg!-");
      boolean boolean0 = owner0.equals(owner1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Owner owner0 = new Owner("3of)BS9/adVos", "3of)BS9/adVos", "3of)BS9/adVos", (-1522788898), "3of)BS9/adVos");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-1522788898), "3of)BS9/adVos");
      Double double0 = new Double((-1522788898));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("3of)BS9/adVos", owner0, carModel0, (-1522788898), (-1522788898), (-1522788898), point0);
      Client client0 = new Client(point0, "3of)BS9/adVos", "3of)BS9/adVos", "3of)BS9/adVos", "3of)BS9/adVos", (-1522788898));
      Rental rental0 = new Rental(car0, client0, point0);
      owner0.rate(rental0, (-1522788898));
      assertEquals((-1522788898), client0.getRates());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Owner owner0 = new Owner("tpabcXg", "|;sJn]):R~%z", "|;sJn]):R~%z", (-399), "tpabcXg");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-399), "%eUD//9c");
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("tpabcXg", owner0, carModel0, (-399), 3272.40273, (-399), point0);
      Client client0 = new Client(point0, "tpabcXg", "", "|;sJn]):R~%z", "%eUD//9c", (-1363));
      Rental rental0 = new Rental(car0, client0, point0);
      owner0.refuse(rental0);
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Owner owner0 = new Owner("tpabcXg", "|;sJn]):R~%z", "|;sJn]):R~%z", (-399), "tpabcXg");
      owner0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Owner owner0 = new Owner("V+$swqL.WEu[vGS<", "V+$swqL.WEu[vGS<", "V+$swqL.WEu[vGS<", 26, "V+$swqL.WEu[vGS<");
      AttributeList attributeList0 = owner0.getPending();
      assertEquals(0, attributeList0.size());
  }
}
