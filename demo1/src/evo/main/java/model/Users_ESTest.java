/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 21 22:41:28 GMT 2019
 */

package main.java.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import main.java.model.Client;
import main.java.model.Owner;
import main.java.model.User;
import main.java.model.Users;
import main.java.utils.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Users_ESTest extends Users_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Users users0 = new Users();
      Owner owner0 = new Owner("vDe<M}b", "vDe<M}b", "1*wHnCtiTD)7b7", 0, "vDe<M}b");
      owner0.rate(0);
      users0.addUser(owner0);
      User user0 = users0.getUser("vDe<M}b");
      assertNotSame(user0, owner0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Users users0 = new Users();
      Owner owner0 = new Owner("", "", "", (-5087), "");
      owner0.rate((-5087));
      users0.addUser(owner0);
      User user0 = users0.getUser("");
      assertNotSame(user0, owner0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Users users0 = new Users();
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "vDe<M}b", "vDe<M}b", "", 0);
      users0.addUser(client0);
      List<String> list0 = users0.getClientIDS();
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Users users0 = new Users();
      // Undeclared exception!
      try { 
        users0.addUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Users users0 = new Users();
      Users users1 = new Users();
      boolean boolean0 = users0.equals(users1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Users users0 = new Users();
      Object object0 = new Object();
      boolean boolean0 = users0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Users users0 = new Users();
      boolean boolean0 = users0.equals(users0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Users users0 = new Users();
      boolean boolean0 = users0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Users users0 = new Users();
      try { 
        users0.getUser("-;?H#c2vt(6j[ 7");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Users users0 = new Users();
      Owner owner0 = new Owner("UD", "UD", "UD", (-1835), "UD");
      users0.addUser(owner0);
      User user0 = users0.getUser("UD");
      assertEquals(100, user0.getRates());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Users users0 = new Users();
      Owner owner0 = new Owner("UD", "UD", "UD", (-1835), "UD");
      users0.addUser(owner0);
      try { 
        users0.addUser(owner0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Users users0 = new Users();
      users0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Users users0 = new Users();
      List<String> list0 = users0.getClientIDS();
      assertEquals(0, list0.size());
  }
}
