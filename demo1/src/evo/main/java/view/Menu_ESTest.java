/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 21 22:02:00 GMT 2019
 */

package main.java.view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Set;
import main.java.view.Menu;
import main.java.view.viewmodel.NewLogin;
import main.java.view.viewmodel.RateOwnerCar;
import main.java.view.viewmodel.RegisterUser;
import main.java.view.viewmodel.TimeInterval;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Menu_ESTest extends Menu_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("6");
      SystemInUtil.addInputLine("0");
      RegisterUser registerUser0 = menu0.newRegisterUserAux("", "", "{kAK?`zx2}5#`U", "0", (-1579));
      assertEquals("{kAK?`zx2}5#`U", registerUser0.getPasswd());
      assertEquals("", registerUser0.getName());
      assertEquals("0", registerUser0.getAddress());
      assertTrue(menu0.getRun());
      assertEquals("", registerUser0.getEmail());
      assertEquals((-1579), registerUser0.getNif());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemInUtil.addInputLine("5");
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      RateOwnerCar rateOwnerCar0 = menu0.pendingRateShow("5", "5", 9);
      assertEquals(5, rateOwnerCar0.getOwnerRate());
      assertTrue(menu0.getRun());
      assertEquals(0, rateOwnerCar0.getCarRate());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      // Undeclared exception!
      try { 
        menu0.walkingDistanceRent("5.j{nZ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemInUtil.addInputLine("main.java.exceptions.InvalidNewRegisterException");
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      menu0.top10ClientsShow(linkedList0, "main.java.utils.StringBetter");
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemInUtil.addInputLine("guj0*#[%y}*RV+");
      Menu menu0 = new Menu();
      menu0.showString("Matricula:");
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemInUtil.addInputLine("main.java.view.viewmodel.TimeInterval");
      Menu menu0 = new Menu();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      TimeInterval timeInterval0 = new TimeInterval(localDateTime0, localDateTime0);
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      menu0.rentalHistoryShow(timeInterval0, linkedList0);
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.autonomyCarRent("7#ZE%x=fxJ~?0iQ?}e");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      menu0.showRentalRate("Nif:");
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemInUtil.addInputLine("5");
      Menu menu0 = new Menu();
      menu0.showRentalRate("%H$2z*bg~L");
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Menu menu0 = new Menu();
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.CHEAPESTNEAR;
      menu1.selectOption(menu_MenuInd0);
      assertFalse(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      String string0 = menu0.reviewRentShow("0", (-574), linkedList0);
      assertEquals("0", string0);
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SystemInUtil.addInputLine("5");
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("5");
      RateOwnerCar rateOwnerCar0 = menu0.pendingRateShow("5", "5", 9);
      assertTrue(menu0.getRun());
      assertEquals(5, rateOwnerCar0.getOwnerRate());
      assertEquals(5, rateOwnerCar0.getCarRate());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SystemInUtil.addInputLine("6");
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("6");
      RegisterUser registerUser0 = menu0.newRegisterUserAux("6", "6", "6", "6", 0);
      assertTrue(menu0.getRun());
      assertEquals(0, registerUser0.getNif());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("0");
      RegisterUser registerUser0 = menu0.newRegisterUserAux("0", "0", "Sq4mKA;o*x4", "($L0w[", 593);
      assertEquals("0", registerUser0.getEmail());
      assertEquals("($L0w[", registerUser0.getAddress());
      assertEquals(593, registerUser0.getNif());
      assertEquals("Sq4mKA;o*x4", registerUser0.getPasswd());
      assertEquals("0", registerUser0.getName());
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SystemInUtil.addInputLine("]orm9pFzyafPv52!9N<");
      SystemInUtil.addInputLine("2");
      SystemInUtil.addInputLine("2");
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("2");
      SystemInUtil.addInputLine("2");
      RegisterUser registerUser0 = menu0.newRegisterUser("2");
      assertEquals(2, registerUser0.getNif());
      assertEquals("]orm9pFzyafPv52!9N<", registerUser0.getName());
      assertEquals("2", registerUser0.getPasswd());
      assertTrue(menu0.getRun());
      assertEquals("2", registerUser0.getEmail());
      assertEquals("2", registerUser0.getAddress());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SystemInUtil.addInputLine("main.java.view.viewmodel.TimeInterval");
      SystemInUtil.addInputLine("y:");
      Menu menu0 = new Menu();
      NewLogin newLogin0 = menu0.newLogin("G! (DI{:%pOY?!G-V");
      assertEquals("main.java.view.viewmodel.TimeInterval", newLogin0.getUser());
      assertEquals("y:", newLogin0.getPassword());
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("Alcance:");
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      String string0 = menu0.carOverviewShow("Alcance:", linkedList0);
      assertTrue(menu0.getRun());
      assertEquals("alcance:", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemInUtil.addInputLine("");
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      String string0 = menu0.carOverviewShow("main.java.view.viewmodel.NewLogin", linkedList0);
      assertEquals("", string0);
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("\tA[pos] -> aprove rental\n\tR[pos] -> refuse rental");
      try { 
        menu0.walkingDistanceRent("$VALUES");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.view.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      // Undeclared exception!
      try { 
        menu0.top10ClientsShow(linkedList0, "{Y <q");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SystemInUtil.addInputLine("DI]TANCE");
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.specificCarRent("DI]TANCE");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SystemInUtil.addInputLine("c@~J?fA3DY|");
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.simpleCarRent("|\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("main.java.utils.Point");
      // Undeclared exception!
      try { 
        menu0.showRentalRate("main.java.utils.Point");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scanner closed
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.selectOption((Menu.MenuInd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.view.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      // Undeclared exception!
      try { 
        menu0.reviewRentShow((String) null, (-1465), linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      linkedList0.add(list0);
      // Undeclared exception!
      try { 
        menu0.reviewRentShow("", (-78), linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Menu menu0 = new Menu();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      TimeInterval timeInterval0 = new TimeInterval(localDateTime0, localDateTime0);
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      // Undeclared exception!
      try { 
        menu0.rentalHistoryShow(timeInterval0, linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Menu menu0 = new Menu();
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      TimeInterval timeInterval0 = new TimeInterval(localDateTime0, localDateTime0);
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.offerLast(linkedList1);
      // Undeclared exception!
      try { 
        menu0.rentalHistoryShow(timeInterval0, linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SystemInUtil.addInputLine("r\"{w5?jR/{m==f");
      Menu menu0 = new Menu();
      try { 
        menu0.pendingRateShow("| ", "0", (-4910));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.view.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SystemInUtil.addInputLine("DISTANCE");
      Menu menu0 = new Menu();
      try { 
        menu0.newRegisterUserAux("0", "DISTANCE", "", "DISTANCE", (-2525));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.view.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SystemInUtil.addInputLine("p_M$OiE;0");
      SystemInUtil.addInputLine("HISTORYCLIENT");
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("HISTORYCLIENT");
      SystemInUtil.addInputLine("+v`UUPAqiSD,]C");
      SystemInUtil.addInputLine("p_M$OiE;0");
      try { 
        menu0.newRegisterUser("p_M$OiE;0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.view.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.newRegisterUser((String) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SystemInUtil.addInputLine("\tR[pos] -> Refill car\n\tC[pos] [price] -> Change Price\n\tD[pos] -> Toggle Availability\n\tT[pos] -> total faturado");
      Menu menu0 = new Menu();
      try { 
        menu0.newRegisterCar((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.view.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("5@QX)U");
      try { 
        menu0.getTimeInterval("\u001Bc");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.view.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      linkedList0.add((List<String>) null);
      // Undeclared exception!
      try { 
        menu0.carOverviewShow("3dXgu@}=il2|v~)", linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.view.Table", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add((List<String>) linkedList1);
      // Undeclared exception!
      try { 
        menu0.carOverviewShow("", linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SystemInUtil.addInputLine("main.java.view.viewmodel.TimeInterval");
      SystemInUtil.addInputLine("y:");
      Menu menu0 = new Menu();
      try { 
        menu0.autonomyCarRent("y:");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.view.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.TOP10CLIENTS;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      String string0 = menu1.toString();
      assertEquals("\u001Bc\u001B[31m\t--INITIAL/TOP10CLIENTS--\n\u001B[0m\n\n1- Organizado por n\u00FAmero de Utiliza\u00E7\u00F5es\n2- Organizado por dist\u00E2ncia\n", string0);
      assertTrue(menu1.getRun());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.RENTALS;
      menu0.selectOption(menu_MenuInd0);
      String string0 = menu0.toString();
      assertEquals("\u001Bc\u001B[31m\t--INITIAL/RENTALS--\n\u001B[0m\n\n1- Carro mais pr\u00F3ximo das suas coordenadas\n2- Carro mais barato\n3- Carro mais barato dentro de uma dist\u00E2ncia\n4- Carro espec\u00EDfico\n5- Carro com uma autonomia desejada.\n", string0);
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.OWNER;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      // Undeclared exception!
      try { 
        menu1.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.CLIENT;
      menu0.selectOption(menu_MenuInd0);
      // Undeclared exception!
      try { 
        menu0.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.REGISTER;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      // Undeclared exception!
      try { 
        menu1.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.offerLast(linkedList1);
      // Undeclared exception!
      try { 
        menu0.top10ClientsShow(linkedList0, "0R-xORf;0|");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.REGISTER;
      menu0.selectOption(menu_MenuInd0);
      menu0.selectOption(menu_MenuInd0);
      menu0.back();
      assertEquals(Menu.MenuInd.INITIAL, menu0.getMenu());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.LOGIN;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      menu1.selectOption(menu_MenuInd0);
      menu1.back();
      assertEquals(Menu.MenuInd.INITIAL, menu1.getMenu());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Menu menu0 = new Menu();
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      boolean boolean0 = menu1.getRun();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      RateOwnerCar rateOwnerCar0 = menu0.pendingRateShow("0", "0", (-14));
      assertEquals(0, rateOwnerCar0.getCarRate());
      assertTrue(menu0.getRun());
      assertEquals(0, rateOwnerCar0.getOwnerRate());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("0");
      // Undeclared exception!
      try { 
        menu0.pendingRateShow("0", "0", (-14));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.parser();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u001Bc\u001B[31m\t--INITIAL--
         // \u001B[0m
         // 
         // 1- Login
         // 2- Registar novo utilizador
         // \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SystemInUtil.addInputLine("k?PY\"c G}A0F.]");
      Menu menu0 = new Menu();
      assertTrue(menu0.getRun());
      
      menu0.parser();
      SystemInUtil.addInputLine("");
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      menu0.reviewRentShow("k?PY\"c G}A0F.]", (-583), linkedList0);
      assertFalse(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SystemInUtil.addInputLine("]orm9pFzyafPv52!9N<");
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("]orm9pFzyafPv52!9N<");
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.REGISTERCLIENT;
      menu0.selectOption(menu_MenuInd0);
      SystemInUtil.addInputLine("0");
      // Undeclared exception!
      try { 
        menu0.newRegisterUser("0");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SystemInUtil.addInputLine("]orm9pFzyafPv52!9N<");
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      RegisterUser registerUser0 = menu0.newRegisterUser("0");
      assertEquals("0", registerUser0.getAddress());
      assertEquals("]orm9pFzyafPv52!9N<", registerUser0.getName());
      assertEquals("0", registerUser0.getEmail());
      assertEquals(0, registerUser0.getNif());
      assertEquals("0", registerUser0.getPasswd());
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.specificCarRent("'lvC)!0@z.5gP#");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.showRentalRate("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.newLogin("y:");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      // Undeclared exception!
      try { 
        menu0.carOverviewShow("Alcance:", linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Menu menu0 = new Menu();
      boolean boolean0 = menu0.getRun();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.newRegisterCar("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Menu menu0 = new Menu();
      TimeInterval timeInterval0 = new TimeInterval((LocalDateTime) null, (LocalDateTime) null);
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      // Undeclared exception!
      try { 
        menu0.rentalHistoryShow(timeInterval0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.view.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.reviewRentShow("O", 0, (List<List<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.newRegisterCar("main.java.view.viewmodel.RegisterUser");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Menu menu0 = new Menu();
      menu0.getMenu();
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.getTimeInterval("*7cy=)rjzq");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.walkingDistanceRent("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.simpleCarRent("Alcance:");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.autonomyCarRent("iiR@U1s;aZHO");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.showString("B");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      // Undeclared exception!
      try { 
        menu0.top10ClientsShow(linkedList0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.view.Table", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.newRegisterUserAux("B", "B", "7", "7", (-1579));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }
}
