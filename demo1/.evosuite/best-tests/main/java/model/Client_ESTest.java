/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 10 18:58:39 GMT 2019
 */

package main.java.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import main.java.model.Car;
import main.java.model.CarModel;
import main.java.model.Client;
import main.java.model.Owner;
import main.java.model.Rental;
import main.java.model.User;
import main.java.utils.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Client_ESTest extends Client_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "main.java.model.Client", "&_Y,@@AiR", "&_Y,@@AiR", "&_Y,@@AiR", 100);
      // Undeclared exception!
      try { 
        client0.rate((Rental) null, (-1), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double((-1317.61797));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "", "Tempo a p\u00E9      ", 0);
      client0.rate(0);
      User user0 = client0.myclone();
      assertEquals(0, user0.getRates());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double((-3479.655218));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "#pKe", "", (-1169));
      client0.rate((-1169));
      User user0 = client0.myclone();
      assertTrue(user0.equals((Object)client0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", ">3c6CO", ">3c6CO", "", 3098);
      Point point1 = client0.getPos();
      assertNotSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = Double.valueOf(1.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, (String) null, (String) null, "y", 0);
      Point point1 = client0.getPos();
      assertEquals(1.0, point1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double((-3479.655218));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "#pKe", "", (-1169));
      Point point1 = client0.getPos();
      assertNotSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double((-12.423320603071847));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "main.java.model.Car", "main.java.model.Car", "main.java.model.Car", "main.java.model.Car", (-1600));
      Owner owner0 = new Owner("main.java.model.Car", "main.java.model.Car", "main.java.model.Car", (-1600), "main.java.model.Car");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-1600), "main.java.model.Car");
      Car car0 = new Car("main.java.model.Car", owner0, carModel0, (-12.423320603071847), (-1600), (-1600), point0);
      Rental rental0 = new Rental(car0, client0, point0);
      client0.addPendingRental(rental0);
      List<Rental> list0 = client0.getPendingRates();
      assertTrue(list0.contains(rental0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "\\uwM";
      Client client0 = new Client((Point) null, string0, string0, string0, "main.java.model.Client", 0);
      // Undeclared exception!
      try { 
        client0.myclone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Client client0 = new Client((Point) null, "", "", "main.java.model.Client", "", 1);
      // Undeclared exception!
      try { 
        client0.getPos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double double0 = new Double(1.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "main.java.model.Car", "main.java.model.Car", "main.java.model.Car", "main.java.model.Car", 3119);
      Owner owner0 = new Owner("main.java.model.Car", "main.java.model.Car", "main.java.model.Car", 3119, "main.java.model.Car");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 3119, "main.java.model.Car");
      Car car0 = new Car("main.java.model.Car", owner0, carModel0, 1.0, 3119, 3119, point0);
      Rental rental0 = new Rental(car0, client0, point0);
      client0.addPendingRental(rental0);
      Client client1 = new Client(point0, "main.java.model.Car", "", "main.java.model.Car", "main.java.model.Car", 3119);
      Rental rental1 = new Rental(car0, client1, point0);
      client1.addPendingRental(rental1);
      // Undeclared exception!
      try { 
        client0.equals(client1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "qT", "qT", "qT", "qT", 0);
      client0.setPos((Point) null);
      Client client1 = new Client(point0, "qT", "qT", "qT", "qT", 0);
      // Undeclared exception!
      try { 
        client0.equals(client1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double((-12.423320603071847));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "main.java.model.Car", "main.java.model.Car", "main.java.model.Car", "main.java.model.Car", (-1600));
      Owner owner0 = new Owner("main.java.model.Car", "main.java.model.Car", "main.java.model.Car", (-1600), "main.java.model.Car");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-1600), "main.java.model.Car");
      Car car0 = new Car("main.java.model.Car", owner0, carModel0, (-12.423320603071847), (-1600), (-1600), point0);
      Rental rental0 = new Rental(car0, client0, point0);
      client0.addPendingRental(rental0);
      Client client1 = new Client(point0, "main.java.model.Car", "", "main.java.model.Car", "main.java.model.Car", (-1600));
      boolean boolean0 = client1.equals(client0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double double0 = Double.valueOf(67.316);
      Double double1 = new Double((-892.313650451537));
      Point point0 = new Point(double0, double1);
      Point point1 = new Point(double1, double1);
      Client client0 = new Client(point0, "n<4_bE'<vU<rgS)/6!", "n<4_bE'<vU<rgS)/6!", "n<4_bE'<vU<rgS)/6!", "n<4_bE'<vU<rgS)/6!", 1127);
      Client client1 = new Client(point1, "n<4_bE'<vU<rgS)/6!", "n<4_bE'<vU<rgS)/6!", "n<4_bE'<vU<rgS)/6!", "n<4_bE'<vU<rgS)/6!", 1127);
      boolean boolean0 = client0.equals(client1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = new Double((-12.423320603071847));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "main.java.model.Car", "main.java.model.Car", "main.java.model.Car", "main.java.model.Car", (-1600));
      Client client1 = new Client(point0, "main.java.model.Car", "", "main.java.model.Car", "main.java.model.Car", (-1600));
      boolean boolean0 = client1.equals(client0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double double0 = new Double(15.967836401206686);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "", "", 19);
      boolean boolean0 = client0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(15.967836401206686);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "", "", 19);
      boolean boolean0 = client0.equals(client0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double((-12.423320603071847));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "main.java.model.Car", "main.java.model.Car", "main.java.model.Car", "main.java.model.Car", (-1600));
      Object object0 = new Object();
      boolean boolean0 = client0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(15.967836401206686);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "", "", 19);
      client0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = new Double((-12.423320603071847));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "main.java.model.Car", "main.java.model.Car", "main.java.model.Car", "main.java.model.Car", (-1600));
      List<Rental> list0 = client0.getPendingRates();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double double0 = new Double(0.5);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, "", "", "Electrico", 558);
      User user0 = client0.myclone();
      assertNotSame(user0, client0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "SPF`oLmy8wW;dA';P", "SPF`oLmy8wW;dA';P", "SPF`oLmy8wW;dA';P", "SPF`oLmy8wW;dA';P", (-2383));
      Owner owner0 = new Owner("SPF`oLmy8wW;dA';P", "SPF`oLmy8wW;dA';P", "SPF`oLmy8wW;dA';P", (-2383), "SPF`oLmy8wW;dA';P");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-1.0), "SPF`oLmy8wW;dA';P");
      Car car0 = new Car("SPF`oLmy8wW;dA';P", owner0, carModel0, (-2383), (-2383), (-2383), point0);
      Rental rental0 = new Rental(car0, client0, point0);
      client0.rate(rental0, (-2383), (-2383));
      assertEquals((-2383), owner0.getRates());
  }
}
