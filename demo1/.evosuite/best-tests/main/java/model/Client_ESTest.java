/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 21 22:39:37 GMT 2019
 */

package main.java.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import main.java.model.Car;
import main.java.model.Client;
import main.java.model.Owner;
import main.java.model.Rental;
import main.java.model.User;
import main.java.utils.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Client_ESTest extends Client_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "yyyy-MM-dd HH:mm", "yyyy-MM-dd HH:mm", "yyyy-MM-dd HH:mm", (String) null, 0);
      Owner owner0 = new Owner("", "", "", (-562), " -> ");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Car car0 = new Car("", owner0, car_CarType0, 0.0, 0, 0.0, 0, point0, (String) null);
      Rental rental0 = new Rental(car0, client0, point0);
      client0.rate(rental0, (-562), (-3456));
      assertEquals((-3456), owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "yyyy-MM-dd HH:mm", "yyyy-MM-dd HH:mm", "yyyy-MM-dd HH:mm", (String) null, 0);
      client0.rate(0);
      User user0 = client0.myclone();
      assertNotSame(client0, user0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "", "", (-1381));
      client0.rate((-1381));
      User user0 = client0.myclone();
      assertNotSame(client0, user0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "", "", (-1381));
      Point point1 = client0.getPos();
      assertNotSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(1032.224123352865);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, ",:*c7W2\"xbY;n>OWx", "", "", ",:*c7W2\"xbY;n>OWx", 0);
      Point point1 = client0.getPos();
      assertNotSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double((-783.118876792));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, "", (String) null, (String) null, 1135);
      Point point1 = client0.getPos();
      assertTrue(point1.equals((Object)point0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double(3242.6752717180925);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "rQ7K]G(,=rbKqUpp", "rQ7K]G(,=rbKqUpp", "rQ7K]G(,=rbKqUpp", "(3242.68, 3242.68)", (-3426));
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Car car0 = new Car("rQ7K]G(,=rbKqUpp", (Owner) null, car_CarType0, (-3426), 3242.6752717180925, 3242.6752717180925, (-3426), point0, "rQ7K]G(,=rbKqUpp");
      Rental rental0 = new Rental(car0, client0, point0);
      client0.addPendingRental(rental0);
      List<Rental> list0 = client0.getPendingRates();
      assertTrue(list0.contains(rental0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Client client0 = new Client((Point) null, "", "47tm(5(f<W})~wE[&", "`Uk5m]>iE4Zy", "`Uk5m]>iE4Zy", 1473122002);
      // Undeclared exception!
      try { 
        client0.rate((Rental) null, (-1782), (-1782));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Client client0 = new Client((Point) null, "gd# ,", (String) null, "main.java.model.Client", "gd# ,", (-1962));
      // Undeclared exception!
      try { 
        client0.myclone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Client client0 = new Client((Point) null, "", "Gf", "w#s]&Q'8:Q-SjfGZl", "", 3);
      // Undeclared exception!
      try { 
        client0.getPos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double double0 = new Double(3242.6752717180925);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "rQ7K]G(,=rbKqUpp", "rQ7K]G(,=rbKqUpp", "rQ7K]G(,=rbKqUpp", "(3242.68, 3242.68)", (-3378));
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Car car0 = new Car("rQ7K]G(,=rbKqUpp", (Owner) null, car_CarType0, (-3378), 3242.6752717180925, 3242.6752717180925, (-3378), point0, "rQ7K]G(,=rbKqUpp");
      Rental rental0 = new Rental(car0, client0, point0);
      client0.addPendingRental(rental0);
      Client client1 = new Client(point0, "(3242.68, 3242.68)", "(3242.68, 3242.68)", "(3242.68, 3242.68)", "(3242.68, 3242.68)", (-3378));
      Rental rental1 = new Rental(car0, client1, point0);
      client1.addPendingRental(rental1);
      // Undeclared exception!
      try { 
        client0.equals(client1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double((-11L));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "(*|oA[_)6SdGo", "(*|oA[_)6SdGo", "(*|oA[_)6SdGo", "(wOYs5.i+s%63#YpM*", (-1409));
      client0.setPos((Point) null);
      Client client1 = new Client(point0, "(*|oA[_)6SdGo", "", "(wOYs5.i+s%63#YpM*", "(wOYs5.i+s%63#YpM*", (-1409));
      // Undeclared exception!
      try { 
        client0.equals(client1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double double0 = new Double(1032.224123352865);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, ",:*c7W2\"xbY;n>OWx", "", "", ",:*c7W2\"xbY;n>OWx", 0);
      boolean boolean0 = client0.wrongEquals(client0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = new Double(0.6050467760993116);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "T2bO: Lu(Fwd", "T2bO: Lu(Fwd", "T2bO: Lu(Fwd", "T2bO: Lu(Fwd", 2790);
      Owner owner0 = new Owner("T2bO: Lu(Fwd", "T2bO: Lu(Fwd", "T2bO: Lu(Fwd", 2790, "T2bO: Lu(Fwd");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Car car0 = new Car("T2bO: Lu(Fwd", owner0, car_CarType0, 2790, 2790, 2790, 2790, point0, "T2bO: Lu(Fwd");
      boolean boolean0 = client0.wrongEquals(car0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double double0 = new Double(1219.5741479983574);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "G>`AS", "G>`AS", "G>`AS", "G>`AS", 41);
      Client client1 = new Client(point0, "G>`AS", "G>`AS", "G>`AS", "G>`AS", 41);
      boolean boolean0 = client0.equals(client1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(1L);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "(*|oA[_)6SdGo", "aux[j", "aux[j", "(wOYs5.i+s%63#YpM*", (-1409));
      Double double1 = new Double((-1409));
      Point point1 = new Point(double0, double1);
      Client client1 = new Client(point1, "(*|oA[_)6SdGo", "", "", "(wOYs5.i+s%63#YpM*", 2054);
      boolean boolean0 = client0.equals(client1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double(1219.5741479983574);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "G>`AS", "G>`AS", "G>`AS", "G>`AS", 41);
      Object object0 = new Object();
      boolean boolean0 = client0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "bPX[EImkqAD", "", 1648);
      boolean boolean0 = client0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = new Double(0.6050467760993116);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "T2bO: Lu(Fwd", "T2bO: Lu(Fwd", "T2bO: Lu(Fwd", "T2bO: Lu(Fwd", 2790);
      Owner owner0 = new Owner("T2bO: Lu(Fwd", "T2bO: Lu(Fwd", "T2bO: Lu(Fwd", 2790, "T2bO: Lu(Fwd");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Car car0 = new Car("T2bO: Lu(Fwd", owner0, car_CarType0, 2790, 2790, 2790, 2790, point0, "T2bO: Lu(Fwd");
      Rental rental0 = new Rental(car0, client0, point0);
      owner0.addPendingRental(rental0);
      Rental rental1 = new Rental(car0, client0, point0);
      car0.approvePendingRental(rental1);
      assertTrue(rental1.equals((Object)rental0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double double0 = new Double(3242.6752717180925);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "rQ7K]G(,=rbKqUpp", "rQ7K]G(,=rbKqUpp", "rQ7K]G(,=rbKqUpp", "(3242.68, 3242.68)", (-3426));
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Car car0 = new Car("rQ7K]G(,=rbKqUpp", (Owner) null, car_CarType0, (-3426), 3242.6752717180925, 3242.6752717180925, (-3426), point0, "rQ7K]G(,=rbKqUpp");
      Rental rental0 = new Rental(car0, client0, point0);
      client0.addPendingRental(rental0);
      Client client1 = new Client(point0, "(3242.68, 3242.68)", "(3242.68, 3242.68)", "(3242.68, 3242.68)", "(3242.68, 3242.68)", (-3426));
      boolean boolean0 = client0.equals(client1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double(3242.6752717180925);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "rQ7K]G(,=rbKqUpp", "rQ7K]G(,=rbKqUpp", "rQ7K]G(,=rbKqUpp", "(3242.68, 3242.68)", (-3378));
      client0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Double double0 = new Double(3242.6752717180925);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "rQ7K]G(,=rbKqUpp", "rQ7K]G(,=rbKqUpp", "rQ7K]G(,=rbKqUpp", "(3242.68, 3242.68)", (-3378));
      List<Rental> list0 = client0.getPendingRates();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Double double0 = new Double(3242.6752717180925);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "rQ7K]G(,=rbKqUpp", "rQ7K]G(,=rbKqUpp", "rQ7K]G(,=rbKqUpp", "(3242.68, 3242.68)", (-3378));
      User user0 = client0.myclone();
      assertNotSame(user0, client0);
  }
}
