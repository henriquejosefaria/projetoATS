/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 21 22:43:21 GMT 2019
 */

package main.java.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import main.java.utils.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Point_ESTest extends Point_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Double double1 = new Double(2752.51452);
      Point point1 = new Point(double0, double1);
      boolean boolean0 = point0.equals(point1);
      assertFalse(boolean0);
      assertEquals(0.0, point1.getX(), 0.01);
      assertFalse(point1.equals((Object)point0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double((-2602.98978085171));
      Point point0 = new Point(double0, double0);
      Double double1 = new Double((-1094.77));
      Point point1 = new Point(double1, double1);
      boolean boolean0 = point0.equals(point1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Double double1 = new Double(574.6);
      Point point1 = new Point(double0, double1);
      double double2 = point0.distanceBetweenPoints(point1);
      assertEquals(574.6, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      double double1 = point0.distanceBetweenPoints(point0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(436.015);
      Point point0 = new Point(double0, double0);
      Point point1 = point0.myclone();
      assertTrue(point1.equals((Object)point0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(1514.9486);
      Point point0 = new Point(double0, double0);
      double double1 = point0.getY();
      assertEquals(1514.9486, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double((-2602.98978085171));
      Point point0 = new Point(double0, double0);
      double double1 = point0.getY();
      assertEquals((-2602.98978085171), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double double0 = new Double(1514.9486);
      Point point0 = new Point(double0, double0);
      double double1 = point0.getX();
      assertEquals(1514.9486, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double((-2602.98978085171));
      Point point0 = new Point(double0, double0);
      double double1 = point0.getX();
      assertEquals((-2602.98978085171), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Double double1 = new Double(2826.0);
      Point point1 = new Point(double1, double0);
      double double2 = point0.distanceBetweenPoints(point1);
      assertEquals(2827.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      // Undeclared exception!
      try { 
        point0.equals((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.utils.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      // Undeclared exception!
      try { 
        point0.distanceBetweenPoints((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.utils.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point point0 = null;
      try {
        point0 = new Point((Double) null, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.utils.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = new Double(1514.9486);
      Point point0 = new Point(double0, double0);
      Double double1 = new Double((-1176.9959786621162));
      Point point1 = new Point(double0, double1);
      boolean boolean0 = point0.equals(point1);
      assertEquals(1514.9486, point1.getX(), 0.01);
      assertFalse(boolean0);
      assertFalse(point1.equals((Object)point0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Double double1 = new Double(2826.0);
      Point point1 = new Point(double1, double0);
      boolean boolean0 = point1.equals(point0);
      assertFalse(point0.equals((Object)point1));
      assertFalse(boolean0);
      assertEquals((-1.0), point1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Point point1 = point0.myclone();
      boolean boolean0 = point1.equals(point0);
      assertEquals(0.0, point1.getX(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, point1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      boolean boolean0 = point0.equals(point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Object object0 = new Object();
      boolean boolean0 = point0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      double double1 = point0.getY();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      double double1 = point0.getX();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Point point1 = point0.myclone();
      assertTrue(point1.equals((Object)point0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      String string0 = point0.toString();
      assertEquals("(-1.00, -1.00)", string0);
  }
}
