/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 21 22:20:56 GMT 2019
 */

package main.java.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import main.java.model.Car;
import main.java.model.Client;
import main.java.model.Owner;
import main.java.model.Rental;
import main.java.utils.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Car_ESTest extends Car_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Owner owner0 = new Owner("r!s^OG1Vo64g<J@", "w84$j[3yNe ij)p,5", "V1PU|Fo", 3298, "Electrico");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("r!s^OG1Vo64g<J@", owner0, car_CarType0, 0.0, 3298, 3298, 3298, point0, "V1PU|Fo");
      car0.rate(3298, 3298);
      car0.rate(3298);
      Car car1 = car0.myclone();
      boolean boolean0 = car0.equals(car1);
      assertEquals(3298, owner0.getRates());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Owner owner0 = new Owner("B!`nmv%!Pf|N}3i[e", "LUC", "B!`nmv%!Pf|N}3i[e", 3, "LUC");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(654.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("B!`nmv%!Pf|N}3i[e", owner0, car_CarType0, 3, 3, 654.0, 3, point0, "B!`nmv%!Pf|N}3i[e");
      Car car1 = car0.myclone();
      Double double1 = new Double(3);
      Point point1 = new Point(double1, double1);
      car1.setPosition(point1, 3);
      boolean boolean0 = car1.equals(car0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Owner owner0 = new Owner("/P8N&d[ydbfv j8aHa", (String) null, (String) null, (-1817), (String) null);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-639.6293473119362));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("/P8N&d[ydbfv j8aHa", owner0, car_CarType0, (-1817), (-1817), (-1817), (-1817), point0, (String) null);
      Car car1 = new Car("Gasolina", owner0, car_CarType0, (-1817), (-1817), (-1817), (-2141153153), point0, (String) null);
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "", "", 654, (String) null);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(1124.6493092809706);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 654, 654, 1025.83187136329, (-1336), point0, "");
      Car car1 = new Car((String) null, owner0, car_CarType0, 654, 654, 654, (-1336), point0, "qcZ6_|,T3FK6V^");
      Car car2 = car1.myclone();
      boolean boolean0 = car0.equals(car2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "", "wC!jIr0V", 654, (String) null);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(1124.6493092809706);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("%.2f", owner0, car_CarType0, 654, 706.0, 1025.83187136329, (-1336), point0, "%.2f");
      Car car1 = new Car((String) null, owner0, car_CarType0, 654, 654, 654, (-1336), point0, "qcZ6_|,T3FK6V^");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Owner owner0 = new Owner("f8x$$.O", "%.2f Horas", "%.2f", 0, "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(1.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("%.2f Horas", owner0, car_CarType0, 0, 0.0, 0.0, 0, point0, " -> ");
      Car car1 = new Car("%.2f", owner0, car_CarType0, (-1420.209263), 0.0, 0.0, 0, point0, "");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Owner owner0 = new Owner("f8x$.O", "f8x$.O", "f8x$.O", 0, "f8x$.O");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(2142.1267558);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("f8x$.O", owner0, car_CarType0, 0, 0, 0, 0, point0, "f8x$.O");
      boolean boolean0 = car0.hasRange(point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "2?;A1{o;=I%E", "2?;A1{o;=I%E", 80982221, "Pte-bwX~yNvX5Ks");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-2199.4120392002633));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, (-540.6036984), (-540.6036984), 4050.93, 2404, point0, "Pte-bwX~yNvX5Ks");
      Double double1 = new Double(0.0);
      Point point1 = new Point(double1, double0);
      boolean boolean0 = car0.hasRange(point1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Owner owner0 = new Owner("r!9^OG1Vo64g<J@", "w84$j[3yNe ij)p,5", "V1PU|Fo", 3298, "Electrico");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("r!9^OG1Vo64g<J@", owner0, car_CarType0, 0.0, 3298, 3298, (-3396), point0, "V1PU|Fo");
      car0.rate(3298, (-3396));
      car0.rate((-3396));
      car0.myclone();
      assertEquals((-3396), owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Owner owner0 = new Owner("B!`nmv%!Pf|N}3i[e", "LUC", "B!`nmv%!Pf|N}3i[e", 3, "LUC");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(654.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("B!`nmv%!Pf|N}3i[e", owner0, car_CarType0, 3, 3, 654.0, 3, point0, "B!`nmv%!Pf|N}3i[e");
      boolean boolean0 = car0.isAvailable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Owner owner0 = new Owner("P", "l]u zw.>", (String) null, (-1465), (String) null);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-4304.40696437));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("P", owner0, car_CarType0, 4.0, (-4304.40696437), (-1465), 1364, point0, "");
      car0.swapState();
      boolean boolean0 = car0.isAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Owner owner0 = new Owner("/Y:+Xt!", "O carro necessita de ser abastecido\n", "", (-1039), "");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(1.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("/Y:+Xt!", owner0, car_CarType0, 0.15, 2503.197013223245, 1.0, (-1039), point0, "O carro necessita de ser abastecido\n");
      Car.CarType car_CarType1 = car0.getType();
      assertSame(car_CarType0, car_CarType1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Owner owner0 = new Owner("yK.E bz3!.)inx/I3L'", " -> ", "*.YZ7f}f`/", 0, "[v=UTi");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("yK.E bz3!.)inx/I3L'", owner0, car_CarType0, 641.0, (-531.6111063), (-92.5754), 0, point0, " -> ");
      double double1 = car0.getRange();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(2834.187339);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("aUaIo", (Owner) null, car_CarType0, 1.0, 1.0, 1.0, 644, point0, "_B<LqfdD?B}8IU");
      double double1 = car0.getRange();
      assertEquals(644.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Owner owner0 = new Owner("Custo Total: ", "Custo Total: ", "Custo Total: ", (-3037), "Custo Total: ");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-3481.208241263309));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Custo Total: ", owner0, car_CarType0, (-3037), (-3037), (-3481.208241263309), (-3037), point0, "");
      double double1 = car0.getRange();
      assertEquals((-3037.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "_(3<>6zSD", (String) null, (-247), "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Car car0 = new Car("Sasdob:", owner0, car_CarType0, (-247), 2886.549594687387, (-1358.5087507626126), (-247), (Point) null, ".}q4N");
      Point point0 = car0.getPosition();
      assertNull(point0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 0.0, 0.0, 0.0, (-2758), point0, "");
      Point point1 = car0.getPosition();
      assertSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(3851.1709114741943);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, (-2882.0), (-2255.2586171535745), 3851.1709114741943, 1328, point0, "");
      Point point1 = car0.getPosition();
      assertSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, "", (-1155), "&N|k#\"R");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-1155), (-1.0), 0.0, (-1155), point0, (String) null);
      Point point1 = car0.getPosition();
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "", "Todos", (-942), "");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double((-2252.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("-Lw5]cfkr~:'cd?+u", owner0, car_CarType0, 0.0, 0.0, (-942), (-942), point0, "");
      String string0 = car0.getOwnerID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Owner owner0 = new Owner("Todos", "Todos", "4N<3~(", 96, (String) null);
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Car car0 = new Car((String) null, owner0, car_CarType0, (-1297.87548), (-2403.65), (-1297.87548), 0, (Point) null, "$VALUES");
      String string0 = car0.getOwnerID();
      assertEquals("Todos", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, "DZ=", 0, "6M|i+");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(1.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, (-500.2947986439), 0, 0, point0, "F{I2A3n9X?x7lk");
      String string0 = car0.getOwnerID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, "@_T", 601, "@_T");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(601);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 601, 601, 601, 601, point0, "");
      String string0 = car0.getNumberPlate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Car car0 = new Car(";`'?hXBwUIcR,ZfsT", (Owner) null, car_CarType0, (-2580.343), (-2580.343), 63.051812235324, 100, (Point) null, "m_wCB|Vr@;\"Q216l");
      String string0 = car0.getNumberPlate();
      assertEquals(";`'?hXBwUIcR,ZfsT", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 1, "");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 1, 1, 1, 1, point0, (String) null);
      String string0 = car0.getNumberPlate();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(3187.754090767);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(")", (Owner) null, car_CarType0, 0.0, 0.0, (-307.97), 2814, point0, ")");
      double double1 = car0.getBasePrice();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Owner owner0 = new Owner("B!`nmv%!Pf|N}3i[e", "LUC", "B!`nmv%!Pf|N}3i[e", 3, "LUC");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-752.2));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("B!`nmv%!Pf|N}3i[e", owner0, car_CarType0, 3, 3, (-752.2), 3, point0, "B!`nmv%!Pf|N}3i[e");
      double double1 = car0.getBasePrice();
      assertEquals(3.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Owner owner0 = new Owner("@", (String) null, "", 2535, (String) null);
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(132.125991407822);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("U;fsc$#Xi/T", owner0, car_CarType0, (-577.08458912071), (-577.08458912071), (-1271.79856205), 1, point0, (String) null);
      double double1 = car0.getBasePrice();
      assertEquals((-577.08458912071), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 0, "");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(753.906568587143);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, (-720.681516082148), 753.906568587143, 0, point0, "");
      double double1 = car0.getAvgSpeed();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Owner owner0 = new Owner("P", "l]u zw.>", (String) null, (-1465), (String) null);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-4304.40696437));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("P", owner0, car_CarType0, 4.0, (-4304.40696437), (-1465), 1364, point0, "");
      double double1 = car0.getAvgSpeed();
      assertEquals(4.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-628), "");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-460.84239174285966));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("brB[>0u/v'l?Yk", owner0, car_CarType0, (-628), (-628), (-628), (-628), point0, "L*oPf8!S=d!pcA");
      double double1 = car0.getAvgSpeed();
      assertEquals((-628.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Car car0 = new Car("U%>T|F!nXUvk2", (Owner) null, car_CarType0, 0.0, 0.0, 0.0, 822, (Point) null, "U%>T|F!nXUvk2");
      // Undeclared exception!
      try { 
        car0.setPosition((Point) null, (-1135.2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(464.2120758797508);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(")", (Owner) null, car_CarType0, 0.0, 0.0, 0.0, (-780), point0, ")");
      // Undeclared exception!
      try { 
        car0.rate((-780), (-780));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 0.0, 2310.7381812, 0.0, 0, point0, "");
      Client client0 = new Client(point0, "", (String) null, "", "Electrico", (-1086));
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        car0.pendingRental(rental0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "_(3<>6zSD", (String) null, (-247), "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(18);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("'Q;", owner0, car_CarType0, 2199.0143166, 0.2, 0.2, 18, point0, "_(3<>6zSD");
      // Undeclared exception!
      try { 
        car0.hasRange((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.utils.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, (Owner) null, car_CarType0, 1.2, (-1312.0), (-1733.2753341), 1, point0, (String) null);
      // Undeclared exception!
      try { 
        car0.getOwnerID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Owner owner0 = new Owner("/P8N&d[ydbfv j8aHa", (String) null, (String) null, (-1827), "%.2f Horas");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-639.6293473119362));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("/P8N&d[ydbfv j8aHa", owner0, car_CarType0, (-1827), (-1827), (-1827), (-1827), point0, (String) null);
      Car car1 = car0.myclone();
      Car car2 = car0.myclone();
      // Undeclared exception!
      try { 
        car1.equals(car2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double((-272.43060542));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Vm", (Owner) null, car_CarType0, 0.0, 0.0, 0.4, 0, point0, "XhcBvQf(>E{0%Wq");
      Client client0 = new Client(point0, "XhcBvQf(>E{0%Wq", "Carro:          ", "a9Ix", "(-272.43, -272.43)", (-595));
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        car0.approvePendingRental(rental0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Owner owner0 = new Owner("Client:    &  9", "Client:    &  9", "Client:    &  9", (-1105), "Client:    &  9");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-1105));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Client:    &  9", owner0, car_CarType0, (-1105), (-1105), (-2195L), (-1105), point0, "Client:    &  9");
      Car car1 = car0.myclone();
      Car car2 = car0.myclone();
      assertTrue(car2.equals((Object)car1));
      
      Client client0 = new Client(point0, "Client:    &  9", "Client:    &  9", "Client:    &  9", "Client:    &  9", (-1105));
      Rental rental0 = new Rental(car0, client0, point0);
      car2.approvePendingRental(rental0);
      boolean boolean0 = car1.equals(car2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Owner owner0 = new Owner("p", "<", "<", 2, "<");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Car car0 = new Car("<", owner0, car_CarType0, 2, 2, 2, 2, (Point) null, "<");
      Car car1 = new Car("<", owner0, car_CarType0, 2, 2, 2, 2, (Point) null, "p");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Owner owner0 = new Owner("$VALUES", "$VALUES", "$VALUES", (-1817), "$VALUES");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-1817));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("$VALUES", owner0, car_CarType0, (-1817), (-1817), (-1817), (-1817), point0, "$VALUES");
      Car car1 = new Car("Gasolina", owner0, car_CarType0, (-1817), (-1817), (-1817), (-1817), point0, "$VALUES");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Owner owner0 = new Owner("Client:    &  9", "Client:    &  9", "Client:    &  9", (-1105), "Client:    &  9");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-1105));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Client:    &  9", owner0, car_CarType0, (-1105), (-1105), (-2195L), (-1105), point0, "Client:    &  9");
      Car car1 = car0.myclone();
      Car car2 = car0.myclone();
      boolean boolean0 = car1.equals(car2);
      assertFalse(car2.equals((Object)car0));
      assertTrue(boolean0);
      assertFalse(car0.equals((Object)car2));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Owner owner0 = new Owner("B!`nmv%!Pf|N}3i[e", "LUC", "B!`nmv%!Pf|N}3i[e", 3, "LUC");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(654.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("B!`nmv%!Pf|N}3i[e", owner0, car_CarType0, 3, 3, 654.0, 3, point0, "B!`nmv%!Pf|N}3i[e");
      Car car1 = car0.myclone();
      assertFalse(car1.equals((Object)car0));
      
      Double double1 = new Double(3);
      Point point1 = new Point(double1, double1);
      car0.setPosition(point1, 3);
      Car car2 = car1.myclone();
      car2.equals(car0);
      assertTrue(car2.equals((Object)car1));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "", "wC!jIr0V", 654, (String) null);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(1124.6493092809706);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("%.2f", owner0, car_CarType0, 654, 706.0, 1025.83187136329, (-1336), point0, "%.2f");
      Car car1 = car0.myclone();
      car1.swapState();
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Owner owner0 = new Owner("/P8N&d[ydbfv j8aHa", (String) null, (String) null, (-1817), (String) null);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-1817));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("/P8N&d[ydbfv j8aHa", owner0, car_CarType0, (-1817), (-1817), (-1817), (-1817), point0, (String) null);
      Car car1 = new Car("", owner0, car_CarType0, (-1817), (-1817), (-1817), 104, point0, (String) null);
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, (String) null, 666, (String) null);
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(666);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 666, 666, (-1336), (-1336), point0, (String) null);
      Car car1 = new Car((String) null, owner0, car_CarType0, 666, 666, 666, (-1336), point0, (String) null);
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, (String) null, 639, (String) null);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(1124.6493092809706);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 639, (-1345), 1025.83187136329, (-1345), point0, (String) null);
      Car car1 = new Car((String) null, owner0, car_CarType0, 639, 639, 639, (-1345), point0, "qcZ6_|,T3FK6V^");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Owner owner0 = new Owner("E:", "E:", "E:", 13, "E:");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Car car0 = new Car("E:", owner0, car_CarType0, (-906), (-906), 13, (-906), (Point) null, "E:");
      Car car1 = new Car("E:", owner0, car_CarType0, 13, 13, 13, 13, (Point) null, "E:");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Owner owner0 = new Owner(";vy'(N \"R>-", ";vy'(N \"R>-", "Winter", 3487, "Winter");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(923.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(";vy'(N \"R>-", owner0, car_CarType0, 3487, 3648.70788, 3487, (-804), point0, "Hibrido");
      boolean boolean0 = car0.equals(owner0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Owner owner0 = new Owner(";vy'(N \"R>-", ";vy'(N \"R>-", "Winter", 3487, "Winter");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(923.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(";vy'(N \"R>-", owner0, car_CarType0, 3487, 3648.70788, 3487, (-804), point0, "Hibrido");
      boolean boolean0 = car0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, (String) null, 654, (String) null);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(654);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 654, 654, 654, 654, point0, (String) null);
      boolean boolean0 = car0.equals(car0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Owner owner0 = new Owner("Client:    &  9", "Client:    &  9", "Client:    &  9", (-1105), "Client:    &  9");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-1105));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Client:    &  9", owner0, car_CarType0, (-1105), (-1105), (-2195L), (-1105), point0, "Client:    &  9");
      Car car1 = car0.myclone();
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
      assertFalse(car1.equals((Object)car0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Owner owner0 = new Owner("B!`nmv%!Pf|N}3i[e", "LUC", "B!`nmv%!Pf|N}3i[e", 3, "LUC");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-752.2));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("B!`nmv%!Pf|N}3i[e", owner0, car_CarType0, 3, 3, (-752.2), 3, point0, "B!`nmv%!Pf|N}3i[e");
      Double double1 = new Double(0.0);
      Point point1 = new Point(double1, double1);
      Client client0 = new Client(point1, "Xl'VS@,g`B4S-tmL=", (String) null, "B!`nmv%!Pf|N}3i[e", "B!`nmv%!Pf|N}3i[e", 0);
      Rental rental0 = new Rental(car0, client0, point1);
      rental0.rent();
      String string0 = car0.warnings();
      assertEquals("O carro necessita de ser abastecido\n", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Owner owner0 = new Owner(";vy'(N \"R>-", ";vy'(N \"R>-", "Winter", 3487, "Winter");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(923.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(";vy'(N \"R>-", owner0, car_CarType0, 3487, 3648.70788, 3487, (-804), point0, "Hibrido");
      String string0 = car0.warnings();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Owner owner0 = new Owner("B!`nmv%!Pf|N}3i[e", "LUC", "B!`nmv%!Pf|N}3i[e", 3, "LUC");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(654.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("B!`nmv%!Pf|N}3i[e", owner0, car_CarType0, 3, 3, 654.0, 3, point0, "B!`nmv%!Pf|N}3i[e");
      boolean boolean0 = car0.hasRange(point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Owner owner0 = new Owner("B!`nmv%!Pf|N}3i[e", "LUC", "B!`nmv%!Pf|N}3i[e", 10, "LUC");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(10);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("B!`nmv%!Pf|N}3i[e", owner0, car_CarType0, 10, 10, 0.0, 10, point0, "B!`nmv%!Pf|N}3i[e");
      Double double1 = new Double(0.0);
      Point point1 = new Point(double1, double1);
      car0.setPosition(point1, 10);
      boolean boolean0 = car0.hasRange(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, (String) null, 80982221, (String) null);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(80982221);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 80982221, 80982221, 80982221, 80982221, point0, (String) null);
      car0.swapState();
      car0.swapState();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Electrico");
      assertEquals(Car.CarType.ELECTRIC, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Todos");
      assertEquals(Car.CarType.ANY, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Gasolina");
      assertEquals(Car.CarType.GAS, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      try { 
        Car.CarType.fromString("\u001B[35m");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car$CarType", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Hibrido");
      assertEquals(Car.CarType.HYBRID, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Car.CarType car_CarType1 = Car.CarType.GAS;
      boolean boolean0 = car_CarType0.isEqual(car_CarType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Car.CarType car_CarType1 = Car.CarType.ANY;
      boolean boolean0 = car_CarType0.isEqual(car_CarType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      boolean boolean0 = car_CarType0.isEqual(car_CarType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, (String) null, 80982221, (String) null);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(80982221);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 80982221, 80982221, 80982221, 80982221, point0, (String) null);
      car0.hashCode();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Owner owner0 = new Owner("\u001B[35m", "\u001B[35m", "\u001B[35m", 1244, "\u001B[35m");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(1244);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("\u001B[35m", owner0, car_CarType0, 1244, 1244, 1244, 1244, point0, "\u001B[35m");
      Client client0 = new Client(point0, "\u001B[35m", "main.java.model.Client", "main.java.model.Client", "\u001B[35m", 1244);
      Rental rental0 = new Rental(car0, client0, point0);
      car0.pendingRental(rental0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double((-272.43060542));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Vm", (Owner) null, car_CarType0, 0.0, 0.0, 0.4, 0, point0, "XhcBvQf(>E{0%Wq");
      car0.setBasePrice(0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Owner owner0 = new Owner("\u001B[35m", "\u001B[35m", "\u001B[35m", 1244, "\u001B[35m");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(1244);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("\u001B[35m", owner0, car_CarType0, 1244, 1244, 1244, 1244, point0, "\u001B[35m");
      String string0 = car0.toString();
      assertEquals("\u001B[35m\n1244.00\n1244.00\ntrue\n100", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Owner owner0 = new Owner("\u001B[35m", "\u001B[35m", "\u001B[35m", 1244, "\u001B[35m");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(1244);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("\u001B[35m", owner0, car_CarType0, 1244, 1244, 1244, 1244, point0, "\u001B[35m");
      car0.refil();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Owner owner0 = new Owner("f8x$$.O", "%.2f Horas", "%.2f", 0, "");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(1.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("%.2f Horas", owner0, car_CarType0, 0, 0.0, 0, 0, point0, " -> ");
      car0.rate(0, (-435));
      Car car1 = new Car("%.2f", owner0, car_CarType0, 0.0, 0.0, 0, 0, point0, "");
      boolean boolean0 = car0.equals(car1);
      assertEquals((-435), owner0.getRates());
      assertFalse(boolean0);
  }
}
