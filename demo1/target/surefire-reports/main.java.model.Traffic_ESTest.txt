-------------------------------------------------------------------------------
Test set: main.java.model.Traffic_ESTest
-------------------------------------------------------------------------------
Tests run: 4, Failures: 0, Errors: 4, Skipped: 0, Time elapsed: 0.024 sec <<< FAILURE!
test1(main.java.model.Traffic_ESTest)  Time elapsed: 0.003 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/Traffic.<init>()V @3: aload_0
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { flagThisUninit }
    locals: { uninitializedThis }
    stack: { }
  Bytecode:
    0000000: b800 102a b700 12b8 0010 2abb 0014 59b8
    0000010: 001a 9900 0e58 bb00 1c59 b700 1da7 0006
    0000020: b700 1eb5 0020 2ab8 0026 b1            

	at main.java.model.Traffic_ESTest.test1(Traffic_ESTest.java:29)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test0(main.java.model.Traffic_ESTest)  Time elapsed: 0.003 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/Traffic.<init>()V @3: aload_0
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { flagThisUninit }
    locals: { uninitializedThis }
    stack: { }
  Bytecode:
    0000000: b800 102a b700 12b8 0010 2abb 0014 59b8
    0000010: 001a 9900 0e58 bb00 1c59 b700 1da7 0006
    0000020: b700 1eb5 0020 2ab8 0026 b1            

	at main.java.model.Traffic_ESTest.test0(Traffic_ESTest.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test3(main.java.model.Traffic_ESTest)  Time elapsed: 0.003 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/Traffic.<init>()V @3: aload_0
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { flagThisUninit }
    locals: { uninitializedThis }
    stack: { }
  Bytecode:
    0000000: b800 102a b700 12b8 0010 2abb 0014 59b8
    0000010: 001a 9900 0e58 bb00 1c59 b700 1da7 0006
    0000020: b700 1eb5 0020 2ab8 0026 b1            

	at main.java.model.Traffic_ESTest.test3(Traffic_ESTest.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test2(main.java.model.Traffic_ESTest)  Time elapsed: 0.003 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/model/Traffic.<init>()V @3: aload_0
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { flagThisUninit }
    locals: { uninitializedThis }
    stack: { }
  Bytecode:
    0000000: b800 102a b700 12b8 0010 2abb 0014 59b8
    0000010: 001a 9900 0e58 bb00 1c59 b700 1da7 0006
    0000020: b700 1eb5 0020 2ab8 0026 b1            

	at main.java.model.Traffic_ESTest.test2(Traffic_ESTest.java:47)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

