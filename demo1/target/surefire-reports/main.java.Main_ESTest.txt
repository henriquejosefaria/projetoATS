-------------------------------------------------------------------------------
Test set: main.java.Main_ESTest
-------------------------------------------------------------------------------
Tests run: 5, Failures: 0, Errors: 5, Skipped: 0, Time elapsed: 0.281 sec <<< FAILURE!
test0(main.java.Main_ESTest)  Time elapsed: 0.013 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/Main.main([Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { '[Ljava/lang/String;' }
    stack: { }
  Bytecode:
    0000000: b800 10bb 0024 59b7 0025 4cb8 0010 1227
    0000010: b800 2b4c b800 10b2 002d 122f b600 35b8
    0000020: 0010 b800 3b12 3cb6 0040 b800 10a7 0020
    0000030: b800 104d b800 10b2 002d 1242 b600 35b8
    0000040: 0010 bb00 4459 1246 2bb7 0049 57b8 0010
    0000050: 1400 4ab8 0051 9900 09b8 0057 a700 06b8
    0000060: 005a b800 3b12 5bb6 0040 b800 10a7 000c
    0000070: 4db2 002d 125d b600 35b8 0010 bb00 5f59
    0000080: 2bb7 0062 b600 65b8 0010 2b12 27b6 0068
    0000090: b800 10b8 003b 1269 b600 40b8 0010 a700
    00000a0: 0c4d b200 2d12 5db6 0035 b800 10b1     
  Exception Handler Table:
    bci [11, 31] => handler: 48
    bci [11, 31] => handler: 48
    bci [77, 98] => handler: 112
    bci [135, 144] => handler: 161

	at main.java.Main_ESTest.test0(Main_ESTest.java:29)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test1(main.java.Main_ESTest)  Time elapsed: 0.008 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/Main.main([Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { '[Ljava/lang/String;' }
    stack: { }
  Bytecode:
    0000000: b800 10bb 0024 59b7 0025 4cb8 0010 1227
    0000010: b800 2b4c b800 10b2 002d 122f b600 35b8
    0000020: 0010 b800 3b12 3cb6 0040 b800 10a7 0020
    0000030: b800 104d b800 10b2 002d 1242 b600 35b8
    0000040: 0010 bb00 4459 1246 2bb7 0049 57b8 0010
    0000050: 1400 4ab8 0051 9900 09b8 0057 a700 06b8
    0000060: 005a b800 3b12 5bb6 0040 b800 10a7 000c
    0000070: 4db2 002d 125d b600 35b8 0010 bb00 5f59
    0000080: 2bb7 0062 b600 65b8 0010 2b12 27b6 0068
    0000090: b800 10b8 003b 1269 b600 40b8 0010 a700
    00000a0: 0c4d b200 2d12 5db6 0035 b800 10b1     
  Exception Handler Table:
    bci [11, 31] => handler: 48
    bci [11, 31] => handler: 48
    bci [77, 98] => handler: 112
    bci [135, 144] => handler: 161

	at main.java.Main_ESTest.test1(Main_ESTest.java:45)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test4(main.java.Main_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/Main.main([Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { '[Ljava/lang/String;' }
    stack: { }
  Bytecode:
    0000000: b800 10bb 0024 59b7 0025 4cb8 0010 1227
    0000010: b800 2b4c b800 10b2 002d 122f b600 35b8
    0000020: 0010 b800 3b12 3cb6 0040 b800 10a7 0020
    0000030: b800 104d b800 10b2 002d 1242 b600 35b8
    0000040: 0010 bb00 4459 1246 2bb7 0049 57b8 0010
    0000050: 1400 4ab8 0051 9900 09b8 0057 a700 06b8
    0000060: 005a b800 3b12 5bb6 0040 b800 10a7 000c
    0000070: 4db2 002d 125d b600 35b8 0010 bb00 5f59
    0000080: 2bb7 0062 b600 65b8 0010 2b12 27b6 0068
    0000090: b800 10b8 003b 1269 b600 40b8 0010 a700
    00000a0: 0c4d b200 2d12 5db6 0035 b800 10b1     
  Exception Handler Table:
    bci [11, 31] => handler: 48
    bci [11, 31] => handler: 48
    bci [77, 98] => handler: 112
    bci [135, 144] => handler: 161

	at main.java.Main_ESTest.test4(Main_ESTest.java:119)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test2(main.java.Main_ESTest)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/Main.main([Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { '[Ljava/lang/String;' }
    stack: { }
  Bytecode:
    0000000: b800 10bb 0024 59b7 0025 4cb8 0010 1227
    0000010: b800 2b4c b800 10b2 002d 122f b600 35b8
    0000020: 0010 b800 3b12 3cb6 0040 b800 10a7 0020
    0000030: b800 104d b800 10b2 002d 1242 b600 35b8
    0000040: 0010 bb00 4459 1246 2bb7 0049 57b8 0010
    0000050: 1400 4ab8 0051 9900 09b8 0057 a700 06b8
    0000060: 005a b800 3b12 5bb6 0040 b800 10a7 000c
    0000070: 4db2 002d 125d b600 35b8 0010 bb00 5f59
    0000080: 2bb7 0062 b600 65b8 0010 2b12 27b6 0068
    0000090: b800 10b8 003b 1269 b600 40b8 0010 a700
    00000a0: 0c4d b200 2d12 5db6 0035 b800 10b1     
  Exception Handler Table:
    bci [11, 31] => handler: 48
    bci [11, 31] => handler: 48
    bci [77, 98] => handler: 112
    bci [135, 144] => handler: 161

	at main.java.Main_ESTest.test2(Main_ESTest.java:80)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

test3(main.java.Main_ESTest)  Time elapsed: 0.008 sec  <<< ERROR!
java.lang.VerifyError: Operand stack overflow
Exception Details:
  Location:
    main/java/Main.main([Ljava/lang/String;)V @3: new
  Reason:
    Exceeded max stack size.
  Current Frame:
    bci: @3
    flags: { }
    locals: { '[Ljava/lang/String;' }
    stack: { }
  Bytecode:
    0000000: b800 10bb 0024 59b7 0025 4cb8 0010 1227
    0000010: b800 2b4c b800 10b2 002d 122f b600 35b8
    0000020: 0010 b800 3b12 3cb6 0040 b800 10a7 0020
    0000030: b800 104d b800 10b2 002d 1242 b600 35b8
    0000040: 0010 bb00 4459 1246 2bb7 0049 57b8 0010
    0000050: 1400 4ab8 0051 9900 09b8 0057 a700 06b8
    0000060: 005a b800 3b12 5bb6 0040 b800 10a7 000c
    0000070: 4db2 002d 125d b600 35b8 0010 bb00 5f59
    0000080: 2bb7 0062 b600 65b8 0010 2b12 27b6 0068
    0000090: b800 10b8 003b 1269 b600 40b8 0010 a700
    00000a0: 0c4d b200 2d12 5db6 0035 b800 10b1     
  Exception Handler Table:
    bci [11, 31] => handler: 48
    bci [11, 31] => handler: 48
    bci [77, 98] => handler: 112
    bci [135, 144] => handler: 161

	at main.java.Main_ESTest.test3(Main_ESTest.java:103)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)

