/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 10 16:20:10 GMT 2019
 */

package main.java.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.List;
import main.java.model.Car;
import main.java.model.CarModel;
import main.java.model.Client;
import main.java.model.Owner;
import main.java.model.Rental;
import main.java.model.Rentals;
import main.java.utils.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Rentals_ESTest extends Rentals_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner((String) null, "{4-J~S\"@wfdO", "main.java.model.Owner", (-1), "('<lTCh9oXQ=");
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(5);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      List<Rental> list0 = rentals0.getRentalListOwner(owner0, (LocalDateTime) null, localDateTime0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(578.4576);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "f)]wX#)0", "f)]wX#)0", "f)]wX#)0", (String) null, 2353);
      Owner owner0 = new Owner("Tempo Estimado: ", (String) null, "('<lTCh9oXQ=", 2353, "Tempo Estimado: ");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-635.278), "main.java.model.Weather");
      Car car0 = new Car("f)]wX#)0", owner0, carModel0, 4.0, 2353, 2353, point0);
      Rental rental0 = new Rental(car0, client0, point0);
      LocalDateTime localDateTime0 = rental0.getDate();
      List<Rental> list0 = rentals0.getRentalListClient(client0, localDateTime0, (LocalDateTime) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("&Z &JHYxO,", "&Z &JHYxO,", "&Z &JHYxO,", 223, ";zZd3l;SBucF");
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      Clock clock0 = MockClock.system(zoneOffset0);
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0, "&Z &JHYxO,");
      Double double0 = new Double(2.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("PQM)gA&Q", owner0, carModel0, 0, 0, 3431, point0);
      Client client0 = new Client(point0, (String) null, (String) null, "CQ-R x!<42mQ!+1", "CQ-R x!<42mQ!+1", 3431);
      Rental rental0 = new Rental(car0, client0, point0);
      LocalDateTime localDateTime0 = rental0.getDate();
      LocalDateTime localDateTime1 = MockLocalDateTime.now(clock0);
      double double1 = rentals0.getTotalBilledCar(car0, localDateTime0, localDateTime1);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(4.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "6t%S1:omi#DpfTw6", "6t%S1:omi#DpfTw6", "6t%S1:omi#DpfTw6", "6t%S1:omi#DpfTw6", 80982221);
      Owner owner0 = new Owner((String) null, (String) null, "(4.00, 521.54)", 80982221, "I(");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 4.0, "%.2f");
      Car car0 = new Car("28FX6^kl5P.#(ZxMYBG", owner0, carModel0, 80982221, 80982221, (-87), point0);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListClient(client0);
      assertTrue(list0.contains(rental0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(0.0);
      Owner owner0 = new Owner("main.java.model.Rentals", "", "$S@^BR^", 2048, "main.java.model.Rentals");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1164.4, "main.java.utils.Point");
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("main.java.model.Rentals", owner0, carModel0, 2048, (-1375.424971596), 1, point0);
      Client client0 = new Client(point0, "", "$S@^BR^", "", "main.java.utils.Point", 100);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListClient("");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("M_JOu?HUh1FcJJx [", "JVj", "M_JOu?HUh1FcJJx [", 2005, "2r#Ss,&Kzqyi=Mr_Y");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1.0, "M_JOu?HUh1FcJJx [");
      Double double0 = new Double(1.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, carModel0, 2279.304, (-1.0), (-2076), point0);
      Client client0 = new Client(point0, "main.java.model.Rentals", "[2{HOEB/E<rNT:4", "2r#Ss,&Kzqyi=Mr_Y", "[2{HOEB/E<rNT:4", (-2076));
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      // Undeclared exception!
      try { 
        rentals0.getTotalBilledCar(car0, (LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getTotalBilledCar((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getRentalListOwner((Owner) null, (LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getRentalListOwner((Owner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("j\"6.`=o?F<V+/8~8tW", "j\"6.`=o?F<V+/8~8tW", "j\"6.`=o?F<V+/8~8tW", (-3522), "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-3522), "j\"6.`=o?F<V+/8~8tW");
      Double double0 = new Double(711.91);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, (-3522), 711.91, (-3522), point0);
      Client client0 = new Client(point0, "j\"6.`=o?F<V+/8~8tW", (String) null, ")^yNKk3=eJ^t4!Q", "Tempo Total: ", (-1076));
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient(client0, (LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "<", "<", "<", "<", 0);
      rentals0.addRental((Rental) null);
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double((-2926.9095627982288));
      Point point0 = new Point(double0, double0);
      Owner owner0 = new Owner("\"?{6?!bCw", "main.java.model.Owner", "\"?{6?!bCw", (-5), (String) null);
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1305.176542649709, "");
      Car car0 = new Car("l#", owner0, carModel0, (-2926.9095627982288), 1.0, (-539), point0);
      Client client0 = new Client(point0, (String) null, "main.java.model.Owner", (String) null, "(-2926.91, 1.00)", (-5));
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient("Pw-Vfua76Zh@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Rentals rentals1 = new Rentals();
      boolean boolean0 = rentals0.equals(rentals1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(2468.559272459384);
      boolean boolean0 = rentals0.equals(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      boolean boolean0 = rentals0.equals(rentals0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      boolean boolean0 = rentals0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double((-2926.9095627982288));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "l#", "l#", (-5));
      List<Rental> list0 = rentals0.getRentalListClient(client0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("OvT4yu", "OvT4yu", "OvT4yu", 2912, "OvT4yu");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2912, "OvT4yu");
      Double double0 = new Double(2912);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("OvT4yu", owner0, carModel0, 2912, 2912, 2912, point0);
      double double1 = rentals0.getTotalBilledCar(car0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("OvT4yu", "OvT4yu", "OvT4yu", 2912, "OvT4yu");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2912, "OvT4yu");
      Double double0 = new Double(2912);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("OvT4yu", owner0, carModel0, 2912, 2912, 2912, point0);
      Client client0 = new Client(point0, "OvT4yu", "OvT4yu", "OvT4yu", "OvT4yu", 2912);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListOwner(owner0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      List<Rental> list0 = rentals0.getRentalListClient("");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      rentals0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("OvT4yu", "OvT4yu", "OvT4yu", 2912, "OvT4yu");
      List<Rental> list0 = rentals0.getRentalListOwner(owner0);
      assertEquals(0, list0.size());
  }
}
