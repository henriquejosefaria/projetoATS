/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 10 15:51:48 GMT 2019
 */

package main.java.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDateTime;
import main.java.model.Car;
import main.java.model.CarModel;
import main.java.model.Client;
import main.java.model.Owner;
import main.java.model.Rental;
import main.java.utils.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Rental_ESTest extends Rental_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Owner owner0 = new Owner("LwDC^", "LwDC^", "LwDC^", (-1522788922), "LwDC^");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-1522788922), "LwDC^");
      Double double0 = new Double((-1522788922));
      Double double1 = new Double(323.22864078224063);
      Point point0 = new Point(double0, double1);
      Car car0 = new Car("LwDC^", owner0, carModel0, (-1522788922), (-1522788922), (-1522788922), point0);
      Client client0 = new Client(point0, "LwDC^", "LwDC^", "LwDC^", "LwDC^", (-1522788922));
      Point point1 = new Point(double0, double0);
      Rental rental0 = new Rental(car0, client0, point1);
      Rental rental1 = new Rental(car0, client0, point1);
      assertTrue(rental1.equals((Object)rental0));
      
      rental1.rent();
      boolean boolean0 = rental0.equals(rental1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Owner owner0 = new Owner("", "LwNHC-", "}BQEz@X{G", 1, "}BQEz@X{G");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1, "LwNHC-");
      Double double0 = new Double(2621.654845);
      Double double1 = new Double(302.22921777006076);
      Point point0 = new Point(double0, double1);
      Car car0 = new Car("LwNHC-", owner0, carModel0, 1, 1, 1, point0);
      Client client0 = new Client(point0, "", "}BQEz@X{G", "", "main.java.utils.StringBetter", 1);
      Rental rental0 = new Rental(car0, client0, point0);
      Point point1 = new Point(double0, double0);
      Rental rental1 = new Rental(car0, client0, point1);
      boolean boolean0 = rental0.equals(rental1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Owner owner0 = new Owner("\u001B[4m", "\u001B[4m", "\u001B[4m", 1, "\u001B[4m");
      Double double0 = new Double(1);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "\u001B[4m", "\u001B[4m", "{S~{FxGd|p-Szw5", "main.java.model.Rental", 1);
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-1), "\u001B[4m");
      Double double1 = new Double(0.0);
      Point point1 = new Point(double0, double1);
      Car car0 = new Car("", owner0, carModel0, 543, 1.0, 0, point1);
      Rental rental0 = new Rental(car0, client0, point1);
      String string0 = rental0.toString();
      assertEquals("Client:        \u001B[4m\nCarro:          \nDono:           \u001B[4m\nViagem:         (1.00, 0.00) -> (1.00, 0.00)\nTempo a p\u00E9      0.25 Horas\nTempo Estimado: -0.00 Horas\nCusto Estimado: 0.00", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Owner owner0 = new Owner("YPx( wGL@884m|g=", "YPx( wGL@884m|g=", "", (-1), "YPx( wGL@884m|g=");
      Double double0 = new Double((-1));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "Summer", "", "YPx( wGL@884m|g=", "YPx( wGL@884m|g=", (-1));
      Double double1 = new Double(0.0);
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-1), "(-1.00, -1.00)");
      Point point1 = new Point(double0, double1);
      Car car0 = new Car("YPx( wGL@884m|g=", owner0, carModel0, (-1.0), (-653.11), (-1), point1);
      Rental rental0 = new Rental(car0, client0, point0);
      String string0 = rental0.toParsableUserString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Owner owner0 = new Owner("Dono:           ", "", "", 0, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0, "Tempo a p\u00E9      ");
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 0, 0, 0, point0);
      Rental rental0 = new Rental(car0, (Client) null, point0);
      rental0.rate(1617, 0);
      assertEquals(0, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 1, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1, "");
      Double double0 = new Double(1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 0.0, -0.0, 0, point0);
      Client client0 = new Client(point0, "", " -> ", " -> ", "", 1);
      Rental rental0 = new Rental(car0, client0, point0);
      rental0.rent();
      rental0.rent();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Owner owner0 = new Owner("", "", (String) null, (-1697), "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-1697), "");
      Double double0 = new Double(225.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, (-1697), (-1697), (-1697), point0);
      Client client0 = new Client(point0, "", "", "M", "", (-1697));
      Rental rental0 = new Rental(car0, client0, point0);
      rental0.rate(0);
      assertEquals(0, client0.getRates());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Owner owner0 = new Owner("LwDC^", "LwDC^", "LwDC^", (-1522788922), "LwDC^");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-1522788922), "LwDC^");
      Double double0 = new Double((-1522788922));
      Double double1 = new Double(323.22864078224063);
      Point point0 = new Point(double0, double1);
      Car car0 = new Car("LwDC^", owner0, carModel0, (-1522788922), (-1522788922), (-1522788922), point0);
      Client client0 = new Client(point0, "LwDC^", "LwDC^", "LwDC^", "LwDC^", (-1522788922));
      Point point1 = new Point(double0, double0);
      Rental rental0 = new Rental(car0, client0, point1);
      rental0.rent();
      double double2 = rental0.getPrice();
      assertEquals((-2.5507752524924073E18), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, (String) null, 0, (String) null);
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0, (String) null);
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, carModel0, 0, 0, 0, point0);
      Client client0 = new Client(point0, "", "", (String) null, (String) null, 0);
      Rental rental0 = new Rental(car0, client0, point0);
      String string0 = rental0.getOwnerID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Owner owner0 = new Owner("J+bV&jp$p%F3p}@8\"", "J+bV&jp$p%F3p}@8\"", "", 1473122002, "J+bV&jp$p%F3p}@8\"");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1473122002, "J+bV&jp$p%F3p}@8\"");
      Double double0 = new Double(0.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 1473122002, 0.2, 1473122002, point0);
      Client client0 = new Client(point0, (String) null, "", "J+bV&jp$p%F3p}@8\"", "main.java.exceptions.UnknownCarTypeException", 1473122002);
      Rental rental0 = new Rental(car0, client0, point0);
      String string0 = rental0.getOwnerID();
      assertEquals("J+bV&jp$p%F3p}@8\"", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 1473121985, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1473121985, "");
      Double double0 = new Double(1473121985);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 1473121985, 1473121985, 1473121985, point0);
      Client client0 = new Client(point0, "", "", "", "main.java.exceptions.UnknownCarTypeException", 1473121985);
      Rental rental0 = new Rental(car0, client0, point0);
      String string0 = rental0.getOwnerID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 3329, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 3329, "");
      Double double0 = new Double(3329);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "", "main.java.model.Rental", 1);
      Double double1 = new Double((-1117.5418718));
      Point point1 = new Point(double1, double1);
      Car car0 = new Car((String) null, owner0, carModel0, (-1117.5418718), 0, 1, point1);
      Rental rental0 = new Rental(car0, client0, point0);
      double double2 = rental0.getDistance();
      assertEquals(6288.359820759408, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, "", 1473122002, " 2~,Z+~wYYQ.g`{h1\"");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1.0, "");
      Double double0 = new Double(1.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("BPI^i=tSSR^", owner0, carModel0, 0.0, 0.0, 1473122002, point0);
      Client client0 = new Client(point0, (String) null, "", "", (String) null, 1473122002);
      Rental rental0 = new Rental(car0, client0, point0);
      String string0 = rental0.getClientID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Owner owner0 = new Owner("", "%.2f", "4>7XV>;MhIdGzC,`", (-2956), (String) null);
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-2956), "%.2f");
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, (-2956), 1176.5715544176, 0, point0);
      Client client0 = new Client(point0, "%.2f", "Custo Total: ", "Custo Total: ", (String) null, (-1297));
      Rental rental0 = new Rental(car0, client0, point0);
      String string0 = rental0.getClientID();
      assertEquals("%.2f", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, (String) null, (-13), (String) null);
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-13), (String) null);
      Double double0 = new Double((-13));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, carModel0, (-13), (-13), (-13), point0);
      Client client0 = new Client(point0, (String) null, (String) null, (String) null, (String) null, (-13));
      Rental rental0 = new Rental(car0, client0, point0);
      String string0 = rental0.getCarID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Owner owner0 = new Owner("%.2f Horas", "%.2f Horas", (String) null, 0, "%.2f Horas");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0, "MWH~kb[]Pj");
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("%.2f Horas", owner0, carModel0, 0, 0.15, 0, point0);
      Rental rental0 = new Rental(car0, (Client) null, point0);
      String string0 = rental0.getCarID();
      assertEquals("%.2f Horas", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 0, "yyyy-MM-dd HH:mm");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.0, "");
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 0.0, 0.0, 0, point0);
      Client client0 = new Client(point0, "[1BEX$MlYx", "", "UR*QY#@", "", (-1));
      Rental rental0 = new Rental(car0, client0, point0);
      String string0 = rental0.getCarID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1.0, "V)hq");
      Double double0 = new Double((-625.84));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("V)hq", (Owner) null, carModel0, (-625.84), (-5375.411), 0, point0);
      Client client0 = new Client(point0, "jmPDtG|nd|@}", "V)hq", "$VALUES", "jmPDtG|nd|@}", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        rental0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Owner owner0 = new Owner("Y<", "GDIj", "GDIj", 1, "gjo8F/<s$y34&");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.0, "yyyy-MM-dd HH:mm");
      Double double0 = new Double((-2538.523155473373));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Y<", owner0, carModel0, 1, (-2538.523155473373), (-1719145501), point0);
      Rental rental0 = new Rental(car0, (Client) null, point0);
      // Undeclared exception!
      try { 
        rental0.toParsableUserString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1473.7229528919543, "Carro:          ");
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Carro:          ", (Owner) null, carModel0, (-4151.42723), 1910.3258, 0, point0);
      Client client0 = new Client(point0, "1fLI<*L#h5", "1fLI<*L#h5", (String) null, "", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        rental0.toParsableUserRentalString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Owner owner0 = new Owner("", "", "_U*Nvc30*I", (-3826), ".cHM%*t)2U](!H");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 899.1, "_U*Nvc30*I");
      Double double0 = new Double(1.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, (-3826), -0.0, (-2354), point0);
      Rental rental0 = new Rental(car0, (Client) null, point0);
      // Undeclared exception!
      try { 
        rental0.toParsableOwnerRentalString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.0, "main.java.model.User");
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("nK(dX$cKxh+[+\"Bv", (Owner) null, carModel0, 0.0, 0.0, 1905, point0);
      Client client0 = new Client(point0, "yJE?]/N]q?lc~[", "08x#z}7+xT;", "nK(dX$cKxh+[+\"Bv", "nK(dX$cKxh+[+\"Bv", (-1));
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        rental0.rent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Owner owner0 = new Owner("Hibrido", (String) null, (String) null, (-7), "Hibrido");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-7), "");
      Double double0 = new Double(-0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Hibrido", owner0, carModel0, (-7), -0.0, (-1631), point0);
      Client client0 = new Client(point0, "", (String) null, "", (String) null, 1473122002);
      Rental rental0 = new Rental(car0, client0, point0);
      System.setCurrentTimeMillis((-2385L));
      // Undeclared exception!
      try { 
        rental0.rent();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("main.java.model.Weather", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Owner owner0 = new Owner("Tempo Estimado: ", (String) null, "6?g`F{ji[f.N*qHA>-0", (-360), (String) null);
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.0, (String) null);
      Double double0 = new Double(0.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("6?g`F{ji[f.N*qHA>-0", owner0, carModel0, 0.0, 0.0, (-360), point0);
      Rental rental0 = new Rental(car0, (Client) null, point0);
      // Undeclared exception!
      try { 
        rental0.rate((-360));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, (String) null, (-5), (String) null);
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-5), (String) null);
      Double double0 = new Double((-5));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, carModel0, (-5), (-5), (-5), point0);
      Rental rental0 = new Rental(car0, (Client) null, point0);
      // Undeclared exception!
      try { 
        rental0.getClientID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 1473121985, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1473121985, "");
      Double double0 = new Double(1473121985);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 1473121985, 1473121985, 1473121985, point0);
      Client client0 = new Client(point0, "", "", "", "main.java.exceptions.UnknownCarTypeException", 1473121985);
      Rental rental0 = new Rental(car0, client0, point0);
      Client client1 = new Client(point0, "main.java.exceptions.UnknownCarTypeException", "", "", "main.java.exceptions.UnknownCarTypeException", 1473121985);
      client1.addPendingRental(rental0);
      Rental rental1 = new Rental(car0, client1, point0);
      client0.addPendingRental(rental1);
      // Undeclared exception!
      try { 
        rental0.equals(rental1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Owner owner0 = new Owner("YmNO%tlzwtX", "[>v +`\"|", "mjiTsl?GK", (-545), "[>v +`\"|");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 146.1005073664957, "Fall");
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("\n", owner0, carModel0, (-545), (-545), (-545), point0);
      Rental rental0 = new Rental(car0, (Client) null, point0);
      Rental rental1 = new Rental(car0, (Client) null, point0);
      // Undeclared exception!
      try { 
        rental0.equals(rental1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", (String) null, "", "V;g~V892", (-3129));
      Rental rental0 = null;
      try {
        rental0 = new Rental((Car) null, client0, point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Owner owner0 = new Owner("main.jaa.model.Owner", "main.jaa.model.Owner", "main.jaa.model.Owner", 1473122012, "main.jaa.model.Owner");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1473122012, "main.jaa.model.Owner");
      Double double0 = new Double(1473122012);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("main.jaa.model.Owner", owner0, carModel0, 1473122012, 1473122012, 1473122012, point0);
      Client client0 = new Client(point0, "main.jaa.model.Owner", "main.jaa.model.Owner", "main.jaa.model.Owner", "main.jaa.model.Owner", 1473122012);
      Rental rental0 = new Rental(car0, client0, point0);
      Rental rental1 = new Rental(car0, client0, point0);
      boolean boolean0 = rental0.equals(rental1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Owner owner0 = new Owner("\u001B[38m", "_kz|z\"\"}hS0LXe1\"np", "_kz|z\"\"}hS0LXe1\"np", 1366, "_kz|z\"\"}hS0LXe1\"np");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1366, "_kz|z\"\"}hS0LXe1\"np");
      Double double0 = new Double(-0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("_kz|z\"\"}hS0LXe1\"np", owner0, carModel0, 775.07157797118, (-665.566818943), 1, point0);
      Car car1 = car0.myclone();
      Client client0 = new Client(point0, "", "_yZgaT", "\u001B[38m", "", (-2504));
      Rental rental0 = new Rental(car0, client0, point0);
      Rental rental1 = new Rental(car1, client0, point0);
      boolean boolean0 = rental1.equals(rental0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Owner owner0 = new Owner("", "", "fE)0H6t+nTd", 0, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-2.3188866449497446E18), "2s");
      Double double0 = new Double(3765.5656323);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 0, (-2.3188866449497446E18), 0, point0);
      Client client0 = new Client(point0, "", "", "fE)0H6t+nTd", "%\"jm2ZG&lh-w8#", 1313);
      Rental rental0 = new Rental(car0, client0, point0);
      Double double1 = new Double(1.5227892466269827E9);
      Point point1 = new Point(double1, double0);
      Rental rental1 = new Rental(car0, client0, point1);
      boolean boolean0 = rental0.equals(rental1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Owner owner0 = new Owner("main.jaa.model.Owner", "main.jaa.model.Owner", "main.jaa.model.Owner", 1473122012, "main.jaa.model.Owner");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1473122012, "main.jaa.model.Owner");
      Double double0 = new Double(1473122012);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("main.jaa.model.Owner", owner0, carModel0, 1473122012, 1473122012, 1473122012, point0);
      Client client0 = new Client(point0, "main.jaa.model.Owner", "main.jaa.model.Owner", "main.jaa.model.Owner", "main.jaa.model.Owner", 1473122012);
      Rental rental0 = new Rental(car0, client0, point0);
      boolean boolean0 = rental0.equals(rental0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, "", 1473122002, " 2~,Z+~wYYQ.g`{h1\"");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1.0, "");
      Double double0 = new Double(1.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("BPI^i=tSSR^", owner0, carModel0, 0.0, 0.0, 1473122002, point0);
      Client client0 = new Client(point0, (String) null, "", "", (String) null, 1473122002);
      Rental rental0 = new Rental(car0, client0, point0);
      System.setCurrentTimeMillis(1473122002);
      Rental rental1 = new Rental(car0, client0, point0);
      boolean boolean0 = rental0.equals(rental1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Owner owner0 = new Owner("J+bV&jp$p%F3p}@8\"", "J+bV&jp$p%F3p}@8\"", "", 1473122002, "J+bV&jp$p%F3p}@8\"");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1473122002, "J+bV&jp$p%F3p}@8\"");
      Double double0 = new Double(0.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 1473122002, 0.2, 1473122002, point0);
      Client client0 = new Client(point0, (String) null, "", "J+bV&jp$p%F3p}@8\"", "main.java.exceptions.UnknownCarTypeException", 1473122002);
      Rental rental0 = new Rental(car0, client0, point0);
      Client client1 = new Client(point0, "kg9G#&<<1)m<0li", "Tempo Estimado: ", "", "kg9G#&<<1)m<0li", 1827);
      Rental rental1 = new Rental(car0, client1, point0);
      assertTrue(rental1.equals((Object)rental0));
      
      rental1.rent();
      boolean boolean0 = rental0.equals(rental1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Owner owner0 = new Owner("LwDC^", "LwDC^", "LwDC^", (-1522788933), "LwDC^");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-1522788933), "LwDC^");
      Double double0 = new Double((-1522788933));
      Double double1 = new Double(323.22864078224063);
      Point point0 = new Point(double0, double1);
      Car car0 = new Car("LwDC^", owner0, carModel0, (-1522788933), (-1522788933), (-1522788933), point0);
      Client client0 = new Client(point0, "LwDC^", "LwDC^", "LwDC^", "LwDC^", (-1522788933));
      Point point1 = new Point(double0, double0);
      Rental rental0 = new Rental(car0, client0, point1);
      rental0.rent();
      Rental rental1 = new Rental(car0, client0, point1);
      boolean boolean0 = rental0.equals(rental1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Owner owner0 = new Owner("|]&@&9;E@JKoWV<", "|]&@&9;E@JKoWV<", "|]&@&9;E@JKoWV<", (-1522788935), "|]&@&9;E@JKoWV<");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-1522788935), "|]&@&9;E@JKoWV<");
      Double double0 = new Double((-1522788935));
      Double double1 = new Double(324.6269826068573);
      Point point0 = new Point(double0, double1);
      Car car0 = new Car("|]&@&9;E@JKoWV<", owner0, carModel0, (-1522788935), (-1522788935), (-1522788935), point0);
      Client client0 = new Client(point0, "|]&@&9;E@JKoWV<", "|]&@&9;E@JKoWV<", "|]&@&9;E@JKoWV<", "|]&@&9;E@JKoWV<", (-1522788935));
      Rental rental0 = new Rental(car0, client0, point0);
      Point point1 = new Point(double0, double0);
      Rental rental1 = new Rental(car0, client0, point1);
      boolean boolean0 = rental0.equals(rental1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Owner owner0 = new Owner("J+bV&jp$p%F3p}@8\"", "J+bV&jp$p%F3p}@8\"", "", 1473122002, "J+bV&jp$p%F3p}@8\"");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1473122002, "J+bV&jp$p%F3p}@8\"");
      Double double0 = new Double(0.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 1473122002, 0.2, 1473122002, point0);
      Object object0 = new Object();
      Client client0 = new Client(point0, (String) null, "", "J+bV&jp$p%F3p}@8\"", "main.java.exceptions.UnknownCarTypeException", 1473122002);
      Rental rental0 = new Rental(car0, client0, point0);
      boolean boolean0 = rental0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Owner owner0 = new Owner("Y!SHn:LE'", "\n", "\n", 4196, "\n");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.0, "Y!SHn:LE'");
      Double double0 = new Double(4196);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Y!SHn:LE'", owner0, carModel0, 4196, 4196, 98, point0);
      Client client0 = new Client(point0, "", "Y!SHn:LE'", "ANY", "main.java.model.Owner", 98);
      Rental rental0 = new Rental(car0, client0, point0);
      boolean boolean0 = rental0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 1, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1, "");
      Double double0 = new Double(1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 0.0, -0.0, 0, point0);
      Client client0 = new Client(point0, "", " -> ", " -> ", "", 1);
      Rental rental0 = new Rental(car0, client0, point0);
      LocalDateTime localDateTime0 = rental0.getDate();
      assertNotNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 1, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1, "");
      Double double0 = new Double(1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 0.0, -0.0, 0, point0);
      Client client0 = new Client(point0, "", " -> ", " -> ", "", 1);
      Rental rental0 = new Rental(car0, client0, point0);
      String string0 = rental0.toParsableUserRentalString();
      assertEquals("2014-02-14 20:21\n\n\n(1.00, 1.00)\n(1.00, 1.00)\n0.00", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Owner owner0 = new Owner("-v2Ex)udqgZLb[!?v", "-v2Ex)udqgZLb[!?v", "-v2Ex)udqgZLb[!?v", 0, "\n\n");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0, "\n\n");
      Double double0 = new Double(2318);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("-v2Ex)udqgZLb[!?v", owner0, carModel0, 0, 0, 2318, point0);
      Client client0 = new Client(point0, "-v2Ex)udqgZLb[!?v", "", "\n\n", "-v2Ex)udqgZLb[!?v", 2318);
      Rental rental0 = new Rental(car0, client0, point0);
      String string0 = rental0.toParsableOwnerRentalString();
      assertEquals("2014-02-14 20:21\n-v2Ex)udqgZLb[!?v\n-v2Ex)udqgZLb[!?v\n(2318.00, 2318.00)\n(2318.00, 2318.00)\n0.00", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 1, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1, "");
      Double double0 = new Double(1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 0.0, -0.0, 0, point0);
      Double double1 = new Double(0.0);
      Point point1 = new Point(double1, double0);
      Client client0 = new Client(point1, "", " -> ", " -> ", "", 1);
      Rental rental0 = new Rental(car0, client0, point1);
      owner0.addPendingRental(rental0);
      Rental rental1 = new Rental(car0, client0, point0);
      rental1.rent();
      assertFalse(rental1.equals((Object)rental0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Owner owner0 = new Owner("3gP", "3gP", "3gP", 1299, "3gP");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1299, "3gP");
      Double double0 = new Double(1299);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("3gP", owner0, carModel0, 1299, 1299, 1299, point0);
      Client client0 = new Client(point0, "3gP", "3gP", "3gP", "3gP", 1299);
      Rental rental0 = new Rental(car0, client0, point0);
      double double1 = rental0.getPrice();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Owner owner0 = new Owner("Y!SHn:LE'", "\n", "\n", 4196, "\n");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.0, "Y!SHn:LE'");
      Double double0 = new Double(4196);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Y!SHn:LE'", owner0, carModel0, 4196, 4196, 98, point0);
      Client client0 = new Client(point0, "", "Y!SHn:LE'", "ANY", "main.java.model.Owner", 98);
      Rental rental0 = new Rental(car0, client0, point0);
      String string0 = rental0.getClientID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 1, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1, "");
      Double double0 = new Double(1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 0.0, -0.0, 0, point0);
      Client client0 = new Client(point0, "", " -> ", " -> ", "", 1);
      Rental rental0 = new Rental(car0, client0, point0);
      String string0 = rental0.toFinalString();
      assertEquals("Tempo Total: 0.00 Horas\nCusto Total: 0.00\n\n\u001B[4m\u001B[0m", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Owner owner0 = new Owner("3gP", "3gP", "3gP", 1299, "3gP");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1299, "3gP");
      Double double0 = new Double(1299);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("3gP", owner0, carModel0, 1299, 1299, 1299, point0);
      Client client0 = new Client(point0, "3gP", "3gP", "3gP", "3gP", 1299);
      Rental rental0 = new Rental(car0, client0, point0);
      rental0.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.5, "87(kcHGJ1pQ");
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("87(kcHGJ1pQ", (Owner) null, carModel0, 0.5, (-6127.0381203264), 0, point0);
      Client client0 = new Client(point0, (String) null, "", (String) null, "87(kcHGJ1pQ", 491);
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        rental0.getOwnerID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.5, "87(kcHGJ1pQ");
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("87(kcHGJ1pQ", (Owner) null, carModel0, 0.5, (-6127.0381203264), 0, point0);
      Client client0 = new Client(point0, (String) null, "", (String) null, "87(kcHGJ1pQ", 491);
      Rental rental0 = new Rental(car0, client0, point0);
      double double1 = rental0.getDistance();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-78.0), "%.2f");
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("(_IrEL8If", (Owner) null, carModel0, 0.0, 0.0, 1, point0);
      Client client0 = new Client(point0, "yyyy-MM-dd HH:mm", "%.2f", "(_IrEL8If", (String) null, 1);
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        rental0.rate(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }
}
