/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 10 19:08:35 GMT 2019
 */

package main.java.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import main.java.utils.StringBetter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringBetter_ESTest extends StringBetter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter((String) null);
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.white();
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[38mnull\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[38mnull\u001B[0m", stringBetter1.toString());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotNull(stringBetter1);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      
      StringBetter stringBetter2 = stringBetter0.green();
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[32mnull\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[32mnull\u001B[0m", stringBetter2.getStr());
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotNull(stringBetter2);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      
      StringBetter stringBetter3 = stringBetter2.append((String) null);
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.toString());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.toString());
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter0);
      assertSame(stringBetter3, stringBetter2);
      assertNotNull(stringBetter3);
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      
      StringBetter stringBetter4 = stringBetter3.under();
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.toString());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.toString());
      assertEquals("\u001B[4m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter4.toString());
      assertEquals("\u001B[4m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter4.getStr());
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter4);
      assertNotSame(stringBetter3, stringBetter0);
      assertSame(stringBetter3, stringBetter2);
      assertNotSame(stringBetter4, stringBetter1);
      assertNotSame(stringBetter4, stringBetter0);
      assertNotSame(stringBetter4, stringBetter2);
      assertNotSame(stringBetter4, stringBetter3);
      assertNotNull(stringBetter4);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertFalse(stringBetter4.equals((Object)stringBetter1));
      assertFalse(stringBetter4.equals((Object)stringBetter0));
      assertFalse(stringBetter4.equals((Object)stringBetter2));
      assertFalse(stringBetter4.equals((Object)stringBetter3));
      
      String string0 = stringBetter2.toString();
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.toString());
      assertEquals("\u001B[32mnull\u001B[0mnull", string0);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotNull(string0);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      
      StringBetter stringBetter5 = stringBetter3.grey();
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.toString());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.toString());
      assertEquals("\u001B[37m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter5.toString());
      assertEquals("\u001B[37m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter5.getStr());
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter4);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotSame(stringBetter3, stringBetter5);
      assertSame(stringBetter3, stringBetter2);
      assertNotSame(stringBetter5, stringBetter1);
      assertNotSame(stringBetter5, stringBetter4);
      assertNotSame(stringBetter5, stringBetter0);
      assertNotSame(stringBetter5, stringBetter2);
      assertNotSame(stringBetter5, stringBetter3);
      assertNotNull(stringBetter5);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter4));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertFalse(stringBetter5.equals((Object)stringBetter1));
      assertFalse(stringBetter5.equals((Object)stringBetter4));
      assertFalse(stringBetter5.equals((Object)stringBetter0));
      assertFalse(stringBetter5.equals((Object)stringBetter2));
      assertFalse(stringBetter5.equals((Object)stringBetter3));
      
      String string1 = stringBetter0.toString();
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNull(string1);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      
      StringBetter stringBetter6 = stringBetter3.cyan();
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.toString());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.toString());
      assertEquals("\u001B[36m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter6.getStr());
      assertEquals("\u001B[36m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter6.toString());
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter4);
      assertNotSame(stringBetter3, stringBetter6);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotSame(stringBetter3, stringBetter5);
      assertSame(stringBetter3, stringBetter2);
      assertNotSame(stringBetter6, stringBetter5);
      assertNotSame(stringBetter6, stringBetter3);
      assertNotSame(stringBetter6, stringBetter0);
      assertNotSame(stringBetter6, stringBetter2);
      assertNotSame(stringBetter6, stringBetter1);
      assertNotSame(stringBetter6, stringBetter4);
      assertNotNull(stringBetter6);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter4));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertFalse(stringBetter3.equals((Object)stringBetter5));
      assertFalse(stringBetter6.equals((Object)stringBetter5));
      assertFalse(stringBetter6.equals((Object)stringBetter3));
      assertFalse(stringBetter6.equals((Object)stringBetter0));
      assertFalse(stringBetter6.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter1));
      assertFalse(stringBetter6.equals((Object)stringBetter4));
      
      StringBetter stringBetter7 = stringBetter6.red();
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.toString());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.toString());
      assertEquals("\u001B[36m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter6.getStr());
      assertEquals("\u001B[36m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter6.toString());
      assertEquals("\u001B[31m\u001B[36m\u001B[32mnull\u001B[0mnull\u001B[0m\u001B[0m", stringBetter7.toString());
      assertEquals("\u001B[31m\u001B[36m\u001B[32mnull\u001B[0mnull\u001B[0m\u001B[0m", stringBetter7.getStr());
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter2, stringBetter0);
      assertSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter7);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter4);
      assertNotSame(stringBetter3, stringBetter6);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotSame(stringBetter3, stringBetter5);
      assertSame(stringBetter3, stringBetter2);
      assertNotSame(stringBetter3, stringBetter7);
      assertNotSame(stringBetter6, stringBetter7);
      assertNotSame(stringBetter6, stringBetter5);
      assertNotSame(stringBetter6, stringBetter3);
      assertNotSame(stringBetter6, stringBetter0);
      assertNotSame(stringBetter6, stringBetter2);
      assertNotSame(stringBetter6, stringBetter1);
      assertNotSame(stringBetter6, stringBetter4);
      assertNotSame(stringBetter7, stringBetter0);
      assertNotSame(stringBetter7, stringBetter2);
      assertNotSame(stringBetter7, stringBetter4);
      assertNotSame(stringBetter7, stringBetter6);
      assertNotSame(stringBetter7, stringBetter3);
      assertNotSame(stringBetter7, stringBetter5);
      assertNotSame(stringBetter7, stringBetter1);
      assertNotNull(stringBetter7);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter6));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter4));
      assertFalse(stringBetter3.equals((Object)stringBetter6));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertFalse(stringBetter3.equals((Object)stringBetter5));
      assertFalse(stringBetter6.equals((Object)stringBetter5));
      assertFalse(stringBetter6.equals((Object)stringBetter3));
      assertFalse(stringBetter6.equals((Object)stringBetter0));
      assertFalse(stringBetter6.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter1));
      assertFalse(stringBetter6.equals((Object)stringBetter4));
      assertFalse(stringBetter7.equals((Object)stringBetter0));
      assertFalse(stringBetter7.equals((Object)stringBetter2));
      assertFalse(stringBetter7.equals((Object)stringBetter4));
      assertFalse(stringBetter7.equals((Object)stringBetter6));
      assertFalse(stringBetter7.equals((Object)stringBetter3));
      assertFalse(stringBetter7.equals((Object)stringBetter5));
      assertFalse(stringBetter7.equals((Object)stringBetter1));
      
      StringBetter stringBetter8 = stringBetter2.white();
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.toString());
      assertEquals("\u001B[38m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter8.getStr());
      assertEquals("\u001B[38m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter8.toString());
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter2, stringBetter0);
      assertSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter8);
      assertNotSame(stringBetter2, stringBetter7);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter8, stringBetter6);
      assertNotSame(stringBetter8, stringBetter1);
      assertNotSame(stringBetter8, stringBetter4);
      assertNotSame(stringBetter8, stringBetter0);
      assertNotSame(stringBetter8, stringBetter3);
      assertNotSame(stringBetter8, stringBetter2);
      assertNotSame(stringBetter8, stringBetter7);
      assertNotSame(stringBetter8, stringBetter5);
      assertNotNull(stringBetter8);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter6));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter8.equals((Object)stringBetter6));
      assertFalse(stringBetter8.equals((Object)stringBetter1));
      assertFalse(stringBetter8.equals((Object)stringBetter4));
      assertFalse(stringBetter8.equals((Object)stringBetter0));
      assertFalse(stringBetter8.equals((Object)stringBetter3));
      assertFalse(stringBetter8.equals((Object)stringBetter2));
      assertFalse(stringBetter8.equals((Object)stringBetter7));
      assertFalse(stringBetter8.equals((Object)stringBetter5));
      
      StringBetter stringBetter9 = stringBetter8.roxo();
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.toString());
      assertEquals("\u001B[38m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter8.getStr());
      assertEquals("\u001B[38m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter8.toString());
      assertEquals("\u001B[35m\u001B[38m\u001B[32mnull\u001B[0mnull\u001B[0m\u001B[0m", stringBetter9.toString());
      assertEquals("\u001B[35m\u001B[38m\u001B[32mnull\u001B[0mnull\u001B[0m\u001B[0m", stringBetter9.getStr());
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter9);
      assertSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter8);
      assertNotSame(stringBetter2, stringBetter7);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter8, stringBetter9);
      assertNotSame(stringBetter8, stringBetter6);
      assertNotSame(stringBetter8, stringBetter1);
      assertNotSame(stringBetter8, stringBetter4);
      assertNotSame(stringBetter8, stringBetter0);
      assertNotSame(stringBetter8, stringBetter3);
      assertNotSame(stringBetter8, stringBetter2);
      assertNotSame(stringBetter8, stringBetter7);
      assertNotSame(stringBetter8, stringBetter5);
      assertNotSame(stringBetter9, stringBetter5);
      assertNotSame(stringBetter9, stringBetter3);
      assertNotSame(stringBetter9, stringBetter1);
      assertNotSame(stringBetter9, stringBetter7);
      assertNotSame(stringBetter9, stringBetter8);
      assertNotSame(stringBetter9, stringBetter2);
      assertNotSame(stringBetter9, stringBetter0);
      assertNotSame(stringBetter9, stringBetter6);
      assertNotSame(stringBetter9, stringBetter4);
      assertNotNull(stringBetter9);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter6));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter8));
      assertFalse(stringBetter2.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter8.equals((Object)stringBetter6));
      assertFalse(stringBetter8.equals((Object)stringBetter1));
      assertFalse(stringBetter8.equals((Object)stringBetter4));
      assertFalse(stringBetter8.equals((Object)stringBetter0));
      assertFalse(stringBetter8.equals((Object)stringBetter3));
      assertFalse(stringBetter8.equals((Object)stringBetter2));
      assertFalse(stringBetter8.equals((Object)stringBetter7));
      assertFalse(stringBetter8.equals((Object)stringBetter5));
      assertFalse(stringBetter9.equals((Object)stringBetter5));
      assertFalse(stringBetter9.equals((Object)stringBetter3));
      assertFalse(stringBetter9.equals((Object)stringBetter1));
      assertFalse(stringBetter9.equals((Object)stringBetter7));
      assertFalse(stringBetter9.equals((Object)stringBetter8));
      assertFalse(stringBetter9.equals((Object)stringBetter2));
      assertFalse(stringBetter9.equals((Object)stringBetter0));
      assertFalse(stringBetter9.equals((Object)stringBetter6));
      assertFalse(stringBetter9.equals((Object)stringBetter4));
      
      String string2 = stringBetter4.toString();
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.toString());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.toString());
      assertEquals("\u001B[4m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter4.toString());
      assertEquals("\u001B[4m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter4.getStr());
      assertEquals("\u001B[4m\u001B[32mnull\u001B[0mnull\u001B[0m", string2);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter9);
      assertSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter8);
      assertNotSame(stringBetter2, stringBetter7);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter4);
      assertNotSame(stringBetter3, stringBetter9);
      assertNotSame(stringBetter3, stringBetter6);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotSame(stringBetter3, stringBetter5);
      assertSame(stringBetter3, stringBetter2);
      assertNotSame(stringBetter3, stringBetter7);
      assertNotSame(stringBetter3, stringBetter8);
      assertNotSame(stringBetter4, stringBetter1);
      assertNotSame(stringBetter4, stringBetter9);
      assertNotSame(stringBetter4, stringBetter6);
      assertNotSame(stringBetter4, stringBetter0);
      assertNotSame(stringBetter4, stringBetter5);
      assertNotSame(stringBetter4, stringBetter2);
      assertNotSame(stringBetter4, stringBetter3);
      assertNotSame(stringBetter4, stringBetter7);
      assertNotSame(stringBetter4, stringBetter8);
      assertNotNull(string2);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter9));
      assertFalse(stringBetter2.equals((Object)stringBetter6));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter8));
      assertFalse(stringBetter2.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter4));
      assertFalse(stringBetter3.equals((Object)stringBetter9));
      assertFalse(stringBetter3.equals((Object)stringBetter6));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertFalse(stringBetter3.equals((Object)stringBetter5));
      assertFalse(stringBetter3.equals((Object)stringBetter7));
      assertFalse(stringBetter3.equals((Object)stringBetter8));
      assertFalse(stringBetter4.equals((Object)stringBetter1));
      assertFalse(stringBetter4.equals((Object)stringBetter9));
      assertFalse(stringBetter4.equals((Object)stringBetter6));
      assertFalse(stringBetter4.equals((Object)stringBetter0));
      assertFalse(stringBetter4.equals((Object)stringBetter5));
      assertFalse(stringBetter4.equals((Object)stringBetter2));
      assertFalse(stringBetter4.equals((Object)stringBetter3));
      assertFalse(stringBetter4.equals((Object)stringBetter7));
      assertFalse(stringBetter4.equals((Object)stringBetter8));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = stringBetter6.toString();
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.toString());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.toString());
      assertEquals("\u001B[36m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter6.getStr());
      assertEquals("\u001B[36m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter6.toString());
      assertEquals("\u001B[36m\u001B[32mnull\u001B[0mnull\u001B[0m", string3);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter9);
      assertSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter8);
      assertNotSame(stringBetter2, stringBetter7);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter4);
      assertNotSame(stringBetter3, stringBetter9);
      assertNotSame(stringBetter3, stringBetter6);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotSame(stringBetter3, stringBetter5);
      assertSame(stringBetter3, stringBetter2);
      assertNotSame(stringBetter3, stringBetter7);
      assertNotSame(stringBetter3, stringBetter8);
      assertNotSame(stringBetter6, stringBetter8);
      assertNotSame(stringBetter6, stringBetter7);
      assertNotSame(stringBetter6, stringBetter5);
      assertNotSame(stringBetter6, stringBetter3);
      assertNotSame(stringBetter6, stringBetter0);
      assertNotSame(stringBetter6, stringBetter2);
      assertNotSame(stringBetter6, stringBetter1);
      assertNotSame(stringBetter6, stringBetter4);
      assertNotSame(stringBetter6, stringBetter9);
      assertNotNull(string3);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter9));
      assertFalse(stringBetter2.equals((Object)stringBetter6));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter8));
      assertFalse(stringBetter2.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter4));
      assertFalse(stringBetter3.equals((Object)stringBetter9));
      assertFalse(stringBetter3.equals((Object)stringBetter6));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertFalse(stringBetter3.equals((Object)stringBetter5));
      assertFalse(stringBetter3.equals((Object)stringBetter7));
      assertFalse(stringBetter3.equals((Object)stringBetter8));
      assertFalse(stringBetter6.equals((Object)stringBetter8));
      assertFalse(stringBetter6.equals((Object)stringBetter7));
      assertFalse(stringBetter6.equals((Object)stringBetter5));
      assertFalse(stringBetter6.equals((Object)stringBetter3));
      assertFalse(stringBetter6.equals((Object)stringBetter0));
      assertFalse(stringBetter6.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter1));
      assertFalse(stringBetter6.equals((Object)stringBetter4));
      assertFalse(stringBetter6.equals((Object)stringBetter9));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      StringBetter stringBetter10 = stringBetter3.roxo();
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.toString());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.toString());
      assertEquals("\u001B[35m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter10.toString());
      assertEquals("\u001B[35m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter10.getStr());
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter10);
      assertNotSame(stringBetter2, stringBetter9);
      assertSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter8);
      assertNotSame(stringBetter2, stringBetter7);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter4);
      assertNotSame(stringBetter3, stringBetter10);
      assertNotSame(stringBetter3, stringBetter9);
      assertNotSame(stringBetter3, stringBetter6);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotSame(stringBetter3, stringBetter5);
      assertSame(stringBetter3, stringBetter2);
      assertNotSame(stringBetter3, stringBetter7);
      assertNotSame(stringBetter3, stringBetter8);
      assertNotSame(stringBetter10, stringBetter5);
      assertNotSame(stringBetter10, stringBetter3);
      assertNotSame(stringBetter10, stringBetter4);
      assertNotSame(stringBetter10, stringBetter9);
      assertNotSame(stringBetter10, stringBetter2);
      assertNotSame(stringBetter10, stringBetter8);
      assertNotSame(stringBetter10, stringBetter1);
      assertNotSame(stringBetter10, stringBetter7);
      assertNotSame(stringBetter10, stringBetter0);
      assertNotSame(stringBetter10, stringBetter6);
      assertNotNull(stringBetter10);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter9));
      assertFalse(stringBetter2.equals((Object)stringBetter6));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter8));
      assertFalse(stringBetter2.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter4));
      assertFalse(stringBetter3.equals((Object)stringBetter9));
      assertFalse(stringBetter3.equals((Object)stringBetter6));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertFalse(stringBetter3.equals((Object)stringBetter5));
      assertFalse(stringBetter3.equals((Object)stringBetter7));
      assertFalse(stringBetter3.equals((Object)stringBetter8));
      assertFalse(stringBetter10.equals((Object)stringBetter5));
      assertFalse(stringBetter10.equals((Object)stringBetter3));
      assertFalse(stringBetter10.equals((Object)stringBetter4));
      assertFalse(stringBetter10.equals((Object)stringBetter9));
      assertFalse(stringBetter10.equals((Object)stringBetter2));
      assertFalse(stringBetter10.equals((Object)stringBetter8));
      assertFalse(stringBetter10.equals((Object)stringBetter1));
      assertFalse(stringBetter10.equals((Object)stringBetter7));
      assertFalse(stringBetter10.equals((Object)stringBetter0));
      assertFalse(stringBetter10.equals((Object)stringBetter6));
      
      StringBetter stringBetter11 = stringBetter6.orange();
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter2.toString());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.getStr());
      assertEquals("\u001B[32mnull\u001B[0mnull", stringBetter3.toString());
      assertEquals("\u001B[36m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter6.getStr());
      assertEquals("\u001B[36m\u001B[32mnull\u001B[0mnull\u001B[0m", stringBetter6.toString());
      assertEquals("\u001B[33m\u001B[36m\u001B[32mnull\u001B[0mnull\u001B[0m\u001B[0m", stringBetter11.toString());
      assertEquals("\u001B[33m\u001B[36m\u001B[32mnull\u001B[0mnull\u001B[0m\u001B[0m", stringBetter11.getStr());
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter11);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter10);
      assertNotSame(stringBetter2, stringBetter9);
      assertSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter8);
      assertNotSame(stringBetter2, stringBetter7);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter2, stringBetter11);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter4);
      assertNotSame(stringBetter3, stringBetter10);
      assertNotSame(stringBetter3, stringBetter9);
      assertNotSame(stringBetter3, stringBetter6);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotSame(stringBetter3, stringBetter5);
      assertNotSame(stringBetter3, stringBetter11);
      assertSame(stringBetter3, stringBetter2);
      assertNotSame(stringBetter3, stringBetter7);
      assertNotSame(stringBetter3, stringBetter8);
      assertNotSame(stringBetter6, stringBetter8);
      assertNotSame(stringBetter6, stringBetter7);
      assertNotSame(stringBetter6, stringBetter11);
      assertNotSame(stringBetter6, stringBetter5);
      assertNotSame(stringBetter6, stringBetter3);
      assertNotSame(stringBetter6, stringBetter0);
      assertNotSame(stringBetter6, stringBetter2);
      assertNotSame(stringBetter6, stringBetter1);
      assertNotSame(stringBetter6, stringBetter4);
      assertNotSame(stringBetter6, stringBetter10);
      assertNotSame(stringBetter6, stringBetter9);
      assertNotSame(stringBetter11, stringBetter7);
      assertNotSame(stringBetter11, stringBetter8);
      assertNotSame(stringBetter11, stringBetter1);
      assertNotSame(stringBetter11, stringBetter4);
      assertNotSame(stringBetter11, stringBetter10);
      assertNotSame(stringBetter11, stringBetter9);
      assertNotSame(stringBetter11, stringBetter6);
      assertNotSame(stringBetter11, stringBetter0);
      assertNotSame(stringBetter11, stringBetter5);
      assertNotSame(stringBetter11, stringBetter2);
      assertNotSame(stringBetter11, stringBetter3);
      assertNotNull(stringBetter11);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter10));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter10));
      assertFalse(stringBetter2.equals((Object)stringBetter9));
      assertFalse(stringBetter2.equals((Object)stringBetter6));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter8));
      assertFalse(stringBetter2.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter4));
      assertFalse(stringBetter3.equals((Object)stringBetter10));
      assertFalse(stringBetter3.equals((Object)stringBetter9));
      assertFalse(stringBetter3.equals((Object)stringBetter6));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertFalse(stringBetter3.equals((Object)stringBetter5));
      assertFalse(stringBetter3.equals((Object)stringBetter7));
      assertFalse(stringBetter3.equals((Object)stringBetter8));
      assertFalse(stringBetter6.equals((Object)stringBetter8));
      assertFalse(stringBetter6.equals((Object)stringBetter7));
      assertFalse(stringBetter6.equals((Object)stringBetter5));
      assertFalse(stringBetter6.equals((Object)stringBetter3));
      assertFalse(stringBetter6.equals((Object)stringBetter0));
      assertFalse(stringBetter6.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter1));
      assertFalse(stringBetter6.equals((Object)stringBetter4));
      assertFalse(stringBetter6.equals((Object)stringBetter10));
      assertFalse(stringBetter6.equals((Object)stringBetter9));
      assertFalse(stringBetter11.equals((Object)stringBetter7));
      assertFalse(stringBetter11.equals((Object)stringBetter8));
      assertFalse(stringBetter11.equals((Object)stringBetter1));
      assertFalse(stringBetter11.equals((Object)stringBetter4));
      assertFalse(stringBetter11.equals((Object)stringBetter10));
      assertFalse(stringBetter11.equals((Object)stringBetter9));
      assertFalse(stringBetter11.equals((Object)stringBetter6));
      assertFalse(stringBetter11.equals((Object)stringBetter0));
      assertFalse(stringBetter11.equals((Object)stringBetter5));
      assertFalse(stringBetter11.equals((Object)stringBetter2));
      assertFalse(stringBetter11.equals((Object)stringBetter3));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.blue();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter1.toString());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotNull(stringBetter1);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      
      StringBetter stringBetter2 = stringBetter1.bold();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[1m\u001B[34m\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[1m\u001B[34m\u001B[0m\u001B[0m", stringBetter2.toString());
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotNull(stringBetter2);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      
      StringBetter stringBetter3 = stringBetter2.showCursor();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[1m\u001B[34m\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[1m\u001B[34m\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[1m\u001B[34m\u001B[0m\u001B[0m\u001B[?25h", stringBetter3.getStr());
      assertEquals("\u001B[1m\u001B[34m\u001B[0m\u001B[0m\u001B[?25h", stringBetter3.toString());
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter2);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotNull(stringBetter3);
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter2));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      
      StringBetter stringBetter4 = stringBetter0.blue();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter4.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter4.toString());
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter4, stringBetter1);
      assertNotSame(stringBetter4, stringBetter3);
      assertNotSame(stringBetter4, stringBetter2);
      assertNotSame(stringBetter4, stringBetter0);
      assertNotNull(stringBetter4);
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter4.equals((Object)stringBetter1));
      assertFalse(stringBetter4.equals((Object)stringBetter3));
      assertFalse(stringBetter4.equals((Object)stringBetter2));
      assertFalse(stringBetter4.equals((Object)stringBetter0));
      
      String string0 = stringBetter1.toString();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[34m\u001B[0m", string0);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotNull(string0);
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.bold();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertEquals("\u001B[1m\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[1m\u001B[0m", stringBetter1.getStr());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotNull(stringBetter1);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      
      StringBetter stringBetter2 = stringBetter1.showCursor();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertEquals("\u001B[1m\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[1m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[1m\u001B[0m\u001B[?25h", stringBetter2.getStr());
      assertEquals("\u001B[1m\u001B[0m\u001B[?25h", stringBetter2.toString());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotNull(stringBetter2);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      
      String string0 = stringBetter2.getStr();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertEquals("\u001B[1m\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[1m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[1m\u001B[0m\u001B[?25h", stringBetter2.getStr());
      assertEquals("\u001B[1m\u001B[0m\u001B[?25h", stringBetter2.toString());
      assertEquals("\u001B[1m\u001B[0m\u001B[?25h", string0);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotNull(string0);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.green();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[32m\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[32m\u001B[0m", stringBetter1.getStr());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotNull(stringBetter1);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      
      StringBetter stringBetter2 = stringBetter1.red();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[32m\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[32m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[31m\u001B[32m\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[31m\u001B[32m\u001B[0m\u001B[0m", stringBetter2.toString());
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotNull(stringBetter2);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter((String) null);
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.grey();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.toString());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotNull(stringBetter1);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      
      StringBetter stringBetter2 = stringBetter1.white();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotNull(stringBetter2);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      
      StringBetter stringBetter3 = stringBetter0.red();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertEquals("\u001B[31mnull\u001B[0m", stringBetter3.getStr());
      assertEquals("\u001B[31mnull\u001B[0m", stringBetter3.toString());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotSame(stringBetter3, stringBetter2);
      assertNotNull(stringBetter3);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertFalse(stringBetter3.equals((Object)stringBetter2));
      
      StringBetter stringBetter4 = stringBetter2.blink();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter4.toString());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter4.getStr());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter4, stringBetter3);
      assertNotSame(stringBetter4, stringBetter0);
      assertNotSame(stringBetter4, stringBetter1);
      assertNotSame(stringBetter4, stringBetter2);
      assertNotNull(stringBetter4);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter3));
      assertFalse(stringBetter4.equals((Object)stringBetter3));
      assertFalse(stringBetter4.equals((Object)stringBetter0));
      assertFalse(stringBetter4.equals((Object)stringBetter1));
      assertFalse(stringBetter4.equals((Object)stringBetter2));
      
      StringBetter stringBetter5 = stringBetter4.black();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter4.toString());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter4.getStr());
      assertEquals("\u001B[30m\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m\u001B[0m", stringBetter5.getStr());
      assertEquals("\u001B[30m\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m\u001B[0m", stringBetter5.toString());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter1, stringBetter5);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter4, stringBetter3);
      assertNotSame(stringBetter4, stringBetter0);
      assertNotSame(stringBetter4, stringBetter5);
      assertNotSame(stringBetter4, stringBetter1);
      assertNotSame(stringBetter4, stringBetter2);
      assertNotSame(stringBetter5, stringBetter1);
      assertNotSame(stringBetter5, stringBetter4);
      assertNotSame(stringBetter5, stringBetter2);
      assertNotSame(stringBetter5, stringBetter3);
      assertNotSame(stringBetter5, stringBetter0);
      assertNotNull(stringBetter5);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter3));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter4.equals((Object)stringBetter3));
      assertFalse(stringBetter4.equals((Object)stringBetter0));
      assertFalse(stringBetter4.equals((Object)stringBetter1));
      assertFalse(stringBetter4.equals((Object)stringBetter2));
      assertFalse(stringBetter5.equals((Object)stringBetter1));
      assertFalse(stringBetter5.equals((Object)stringBetter4));
      assertFalse(stringBetter5.equals((Object)stringBetter2));
      assertFalse(stringBetter5.equals((Object)stringBetter3));
      assertFalse(stringBetter5.equals((Object)stringBetter0));
      
      StringBetter stringBetter6 = stringBetter4.hideCursor();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter4.toString());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter4.getStr());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m\u001B[?25l", stringBetter6.toString());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m\u001B[?25l", stringBetter6.getStr());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter1, stringBetter5);
      assertNotSame(stringBetter1, stringBetter6);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter4, stringBetter3);
      assertNotSame(stringBetter4, stringBetter6);
      assertNotSame(stringBetter4, stringBetter0);
      assertNotSame(stringBetter4, stringBetter5);
      assertNotSame(stringBetter4, stringBetter1);
      assertNotSame(stringBetter4, stringBetter2);
      assertNotSame(stringBetter6, stringBetter5);
      assertNotSame(stringBetter6, stringBetter1);
      assertNotSame(stringBetter6, stringBetter3);
      assertNotSame(stringBetter6, stringBetter0);
      assertNotSame(stringBetter6, stringBetter2);
      assertNotSame(stringBetter6, stringBetter4);
      assertNotNull(stringBetter6);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter3));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter4.equals((Object)stringBetter3));
      assertFalse(stringBetter4.equals((Object)stringBetter0));
      assertFalse(stringBetter4.equals((Object)stringBetter5));
      assertFalse(stringBetter4.equals((Object)stringBetter1));
      assertFalse(stringBetter4.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter5));
      assertFalse(stringBetter6.equals((Object)stringBetter1));
      assertFalse(stringBetter6.equals((Object)stringBetter3));
      assertFalse(stringBetter6.equals((Object)stringBetter0));
      assertFalse(stringBetter6.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter4));
      
      StringBetter stringBetter7 = stringBetter6.grey();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter4.toString());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter4.getStr());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m\u001B[?25l", stringBetter6.toString());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m\u001B[?25l", stringBetter6.getStr());
      assertEquals("\u001B[37m\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m\u001B[?25l\u001B[0m", stringBetter7.getStr());
      assertEquals("\u001B[37m\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m\u001B[?25l\u001B[0m", stringBetter7.toString());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter1, stringBetter5);
      assertNotSame(stringBetter1, stringBetter6);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter7);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter2, stringBetter7);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter4, stringBetter3);
      assertNotSame(stringBetter4, stringBetter6);
      assertNotSame(stringBetter4, stringBetter0);
      assertNotSame(stringBetter4, stringBetter5);
      assertNotSame(stringBetter4, stringBetter1);
      assertNotSame(stringBetter4, stringBetter7);
      assertNotSame(stringBetter4, stringBetter2);
      assertNotSame(stringBetter6, stringBetter5);
      assertNotSame(stringBetter6, stringBetter1);
      assertNotSame(stringBetter6, stringBetter3);
      assertNotSame(stringBetter6, stringBetter0);
      assertNotSame(stringBetter6, stringBetter2);
      assertNotSame(stringBetter6, stringBetter7);
      assertNotSame(stringBetter6, stringBetter4);
      assertNotSame(stringBetter7, stringBetter5);
      assertNotSame(stringBetter7, stringBetter1);
      assertNotSame(stringBetter7, stringBetter2);
      assertNotSame(stringBetter7, stringBetter0);
      assertNotSame(stringBetter7, stringBetter4);
      assertNotSame(stringBetter7, stringBetter6);
      assertNotSame(stringBetter7, stringBetter3);
      assertNotNull(stringBetter7);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter6));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter3));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter4.equals((Object)stringBetter3));
      assertFalse(stringBetter4.equals((Object)stringBetter6));
      assertFalse(stringBetter4.equals((Object)stringBetter0));
      assertFalse(stringBetter4.equals((Object)stringBetter5));
      assertFalse(stringBetter4.equals((Object)stringBetter1));
      assertFalse(stringBetter4.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter5));
      assertFalse(stringBetter6.equals((Object)stringBetter1));
      assertFalse(stringBetter6.equals((Object)stringBetter3));
      assertFalse(stringBetter6.equals((Object)stringBetter0));
      assertFalse(stringBetter6.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter4));
      assertFalse(stringBetter7.equals((Object)stringBetter5));
      assertFalse(stringBetter7.equals((Object)stringBetter1));
      assertFalse(stringBetter7.equals((Object)stringBetter2));
      assertFalse(stringBetter7.equals((Object)stringBetter0));
      assertFalse(stringBetter7.equals((Object)stringBetter4));
      assertFalse(stringBetter7.equals((Object)stringBetter6));
      assertFalse(stringBetter7.equals((Object)stringBetter3));
      
      StringBetter stringBetter8 = stringBetter4.hideCursor();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter4.toString());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter4.getStr());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m\u001B[?25l", stringBetter8.toString());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m\u001B[?25l", stringBetter8.getStr());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter1, stringBetter5);
      assertNotSame(stringBetter1, stringBetter6);
      assertNotSame(stringBetter1, stringBetter8);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter7);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter2, stringBetter7);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter8);
      assertNotSame(stringBetter4, stringBetter3);
      assertNotSame(stringBetter4, stringBetter8);
      assertNotSame(stringBetter4, stringBetter6);
      assertNotSame(stringBetter4, stringBetter0);
      assertNotSame(stringBetter4, stringBetter5);
      assertNotSame(stringBetter4, stringBetter1);
      assertNotSame(stringBetter4, stringBetter7);
      assertNotSame(stringBetter4, stringBetter2);
      assertNotSame(stringBetter8, stringBetter0);
      assertNotSame(stringBetter8, stringBetter1);
      assertNotSame(stringBetter8, stringBetter5);
      assertNotSame(stringBetter8, stringBetter7);
      assertNotSame(stringBetter8, stringBetter2);
      assertNotSame(stringBetter8, stringBetter3);
      assertNotSame(stringBetter8, stringBetter4);
      assertNotSame(stringBetter8, stringBetter6);
      assertNotNull(stringBetter8);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter7));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter6));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter2.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter3));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter4.equals((Object)stringBetter3));
      assertFalse(stringBetter4.equals((Object)stringBetter6));
      assertFalse(stringBetter4.equals((Object)stringBetter0));
      assertFalse(stringBetter4.equals((Object)stringBetter5));
      assertFalse(stringBetter4.equals((Object)stringBetter1));
      assertFalse(stringBetter4.equals((Object)stringBetter7));
      assertFalse(stringBetter4.equals((Object)stringBetter2));
      assertFalse(stringBetter8.equals((Object)stringBetter0));
      assertFalse(stringBetter8.equals((Object)stringBetter1));
      assertFalse(stringBetter8.equals((Object)stringBetter5));
      assertFalse(stringBetter8.equals((Object)stringBetter7));
      assertFalse(stringBetter8.equals((Object)stringBetter2));
      assertFalse(stringBetter8.equals((Object)stringBetter3));
      assertFalse(stringBetter8.equals((Object)stringBetter4));
      assertFalse(stringBetter8.equals((Object)stringBetter6));
      
      StringBetter stringBetter9 = stringBetter8.grey();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter4.toString());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter4.getStr());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m\u001B[?25l", stringBetter8.toString());
      assertEquals("\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m\u001B[?25l", stringBetter8.getStr());
      assertEquals("\u001B[37m\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m\u001B[?25l\u001B[0m", stringBetter9.getStr());
      assertEquals("\u001B[37m\u001B[5m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m\u001B[?25l\u001B[0m", stringBetter9.toString());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter1, stringBetter5);
      assertNotSame(stringBetter1, stringBetter6);
      assertNotSame(stringBetter1, stringBetter9);
      assertNotSame(stringBetter1, stringBetter8);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter7);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter2, stringBetter7);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter8);
      assertNotSame(stringBetter2, stringBetter9);
      assertNotSame(stringBetter4, stringBetter9);
      assertNotSame(stringBetter4, stringBetter3);
      assertNotSame(stringBetter4, stringBetter8);
      assertNotSame(stringBetter4, stringBetter6);
      assertNotSame(stringBetter4, stringBetter0);
      assertNotSame(stringBetter4, stringBetter5);
      assertNotSame(stringBetter4, stringBetter1);
      assertNotSame(stringBetter4, stringBetter7);
      assertNotSame(stringBetter4, stringBetter2);
      assertNotSame(stringBetter8, stringBetter0);
      assertNotSame(stringBetter8, stringBetter1);
      assertNotSame(stringBetter8, stringBetter5);
      assertNotSame(stringBetter8, stringBetter7);
      assertNotSame(stringBetter8, stringBetter2);
      assertNotSame(stringBetter8, stringBetter9);
      assertNotSame(stringBetter8, stringBetter3);
      assertNotSame(stringBetter8, stringBetter4);
      assertNotSame(stringBetter8, stringBetter6);
      assertNotSame(stringBetter9, stringBetter5);
      assertNotSame(stringBetter9, stringBetter1);
      assertNotSame(stringBetter9, stringBetter2);
      assertNotSame(stringBetter9, stringBetter3);
      assertNotSame(stringBetter9, stringBetter4);
      assertNotSame(stringBetter9, stringBetter7);
      assertNotSame(stringBetter9, stringBetter8);
      assertNotSame(stringBetter9, stringBetter0);
      assertNotSame(stringBetter9, stringBetter6);
      assertNotNull(stringBetter9);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter8));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter7));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter6));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter2.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter3));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter8));
      assertFalse(stringBetter4.equals((Object)stringBetter3));
      assertFalse(stringBetter4.equals((Object)stringBetter8));
      assertFalse(stringBetter4.equals((Object)stringBetter6));
      assertFalse(stringBetter4.equals((Object)stringBetter0));
      assertFalse(stringBetter4.equals((Object)stringBetter5));
      assertFalse(stringBetter4.equals((Object)stringBetter1));
      assertFalse(stringBetter4.equals((Object)stringBetter7));
      assertFalse(stringBetter4.equals((Object)stringBetter2));
      assertFalse(stringBetter8.equals((Object)stringBetter0));
      assertFalse(stringBetter8.equals((Object)stringBetter1));
      assertFalse(stringBetter8.equals((Object)stringBetter5));
      assertFalse(stringBetter8.equals((Object)stringBetter7));
      assertFalse(stringBetter8.equals((Object)stringBetter2));
      assertFalse(stringBetter8.equals((Object)stringBetter3));
      assertFalse(stringBetter8.equals((Object)stringBetter4));
      assertFalse(stringBetter8.equals((Object)stringBetter6));
      assertFalse(stringBetter9.equals((Object)stringBetter5));
      assertFalse(stringBetter9.equals((Object)stringBetter1));
      assertFalse(stringBetter9.equals((Object)stringBetter2));
      assertFalse(stringBetter9.equals((Object)stringBetter3));
      assertFalse(stringBetter9.equals((Object)stringBetter4));
      assertFalse(stringBetter9.equals((Object)stringBetter7));
      assertFalse(stringBetter9.equals((Object)stringBetter8));
      assertFalse(stringBetter9.equals((Object)stringBetter0));
      assertFalse(stringBetter9.equals((Object)stringBetter6));
      
      StringBetter stringBetter10 = stringBetter1.grey();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[37m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter10.getStr());
      assertEquals("\u001B[37m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter10.toString());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter1, stringBetter5);
      assertNotSame(stringBetter1, stringBetter6);
      assertNotSame(stringBetter1, stringBetter9);
      assertNotSame(stringBetter1, stringBetter8);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter10);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter7);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter10, stringBetter0);
      assertNotSame(stringBetter10, stringBetter2);
      assertNotSame(stringBetter10, stringBetter4);
      assertNotSame(stringBetter10, stringBetter7);
      assertNotSame(stringBetter10, stringBetter8);
      assertNotSame(stringBetter10, stringBetter9);
      assertNotSame(stringBetter10, stringBetter1);
      assertNotSame(stringBetter10, stringBetter5);
      assertNotSame(stringBetter10, stringBetter6);
      assertNotSame(stringBetter10, stringBetter3);
      assertNotNull(stringBetter10);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter9));
      assertFalse(stringBetter1.equals((Object)stringBetter8));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter7));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter10.equals((Object)stringBetter0));
      assertFalse(stringBetter10.equals((Object)stringBetter2));
      assertFalse(stringBetter10.equals((Object)stringBetter4));
      assertFalse(stringBetter10.equals((Object)stringBetter7));
      assertFalse(stringBetter10.equals((Object)stringBetter8));
      assertFalse(stringBetter10.equals((Object)stringBetter9));
      assertFalse(stringBetter10.equals((Object)stringBetter1));
      assertFalse(stringBetter10.equals((Object)stringBetter5));
      assertFalse(stringBetter10.equals((Object)stringBetter6));
      assertFalse(stringBetter10.equals((Object)stringBetter3));
      
      StringBetter stringBetter11 = stringBetter0.hideCursor();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertEquals("null\u001B[?25l", stringBetter11.toString());
      assertEquals("null\u001B[?25l", stringBetter11.getStr());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter11);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter11, stringBetter2);
      assertNotSame(stringBetter11, stringBetter10);
      assertNotSame(stringBetter11, stringBetter1);
      assertNotSame(stringBetter11, stringBetter3);
      assertNotSame(stringBetter11, stringBetter7);
      assertNotSame(stringBetter11, stringBetter0);
      assertNotSame(stringBetter11, stringBetter5);
      assertNotSame(stringBetter11, stringBetter6);
      assertNotSame(stringBetter11, stringBetter9);
      assertNotSame(stringBetter11, stringBetter4);
      assertNotSame(stringBetter11, stringBetter8);
      assertNotNull(stringBetter11);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter10));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter11.equals((Object)stringBetter2));
      assertFalse(stringBetter11.equals((Object)stringBetter10));
      assertFalse(stringBetter11.equals((Object)stringBetter1));
      assertFalse(stringBetter11.equals((Object)stringBetter3));
      assertFalse(stringBetter11.equals((Object)stringBetter7));
      assertFalse(stringBetter11.equals((Object)stringBetter0));
      assertFalse(stringBetter11.equals((Object)stringBetter5));
      assertFalse(stringBetter11.equals((Object)stringBetter6));
      assertFalse(stringBetter11.equals((Object)stringBetter9));
      assertFalse(stringBetter11.equals((Object)stringBetter4));
      assertFalse(stringBetter11.equals((Object)stringBetter8));
      
      StringBetter stringBetter12 = stringBetter10.bold();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[37m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter10.getStr());
      assertEquals("\u001B[37m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter10.toString());
      assertEquals("\u001B[1m\u001B[37m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter12.toString());
      assertEquals("\u001B[1m\u001B[37m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter12.getStr());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter12);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter11);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter1, stringBetter11);
      assertNotSame(stringBetter1, stringBetter5);
      assertNotSame(stringBetter1, stringBetter6);
      assertNotSame(stringBetter1, stringBetter9);
      assertNotSame(stringBetter1, stringBetter12);
      assertNotSame(stringBetter1, stringBetter8);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter10);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter7);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter10, stringBetter0);
      assertNotSame(stringBetter10, stringBetter2);
      assertNotSame(stringBetter10, stringBetter4);
      assertNotSame(stringBetter10, stringBetter7);
      assertNotSame(stringBetter10, stringBetter8);
      assertNotSame(stringBetter10, stringBetter11);
      assertNotSame(stringBetter10, stringBetter9);
      assertNotSame(stringBetter10, stringBetter12);
      assertNotSame(stringBetter10, stringBetter1);
      assertNotSame(stringBetter10, stringBetter5);
      assertNotSame(stringBetter10, stringBetter6);
      assertNotSame(stringBetter10, stringBetter3);
      assertNotSame(stringBetter12, stringBetter11);
      assertNotSame(stringBetter12, stringBetter6);
      assertNotSame(stringBetter12, stringBetter0);
      assertNotSame(stringBetter12, stringBetter3);
      assertNotSame(stringBetter12, stringBetter9);
      assertNotSame(stringBetter12, stringBetter4);
      assertNotSame(stringBetter12, stringBetter8);
      assertNotSame(stringBetter12, stringBetter5);
      assertNotSame(stringBetter12, stringBetter10);
      assertNotSame(stringBetter12, stringBetter2);
      assertNotSame(stringBetter12, stringBetter1);
      assertNotSame(stringBetter12, stringBetter7);
      assertNotNull(stringBetter12);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter10));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter11));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter11));
      assertFalse(stringBetter1.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter9));
      assertFalse(stringBetter1.equals((Object)stringBetter8));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter10));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter7));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter10.equals((Object)stringBetter0));
      assertFalse(stringBetter10.equals((Object)stringBetter2));
      assertFalse(stringBetter10.equals((Object)stringBetter4));
      assertFalse(stringBetter10.equals((Object)stringBetter7));
      assertFalse(stringBetter10.equals((Object)stringBetter8));
      assertFalse(stringBetter10.equals((Object)stringBetter11));
      assertFalse(stringBetter10.equals((Object)stringBetter9));
      assertFalse(stringBetter10.equals((Object)stringBetter1));
      assertFalse(stringBetter10.equals((Object)stringBetter5));
      assertFalse(stringBetter10.equals((Object)stringBetter6));
      assertFalse(stringBetter10.equals((Object)stringBetter3));
      assertFalse(stringBetter12.equals((Object)stringBetter11));
      assertFalse(stringBetter12.equals((Object)stringBetter6));
      assertFalse(stringBetter12.equals((Object)stringBetter0));
      assertFalse(stringBetter12.equals((Object)stringBetter3));
      assertFalse(stringBetter12.equals((Object)stringBetter9));
      assertFalse(stringBetter12.equals((Object)stringBetter4));
      assertFalse(stringBetter12.equals((Object)stringBetter8));
      assertFalse(stringBetter12.equals((Object)stringBetter5));
      assertFalse(stringBetter12.equals((Object)stringBetter10));
      assertFalse(stringBetter12.equals((Object)stringBetter2));
      assertFalse(stringBetter12.equals((Object)stringBetter1));
      assertFalse(stringBetter12.equals((Object)stringBetter7));
      
      StringBetter stringBetter13 = stringBetter2.cyan();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[37mnull\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[36m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter13.getStr());
      assertEquals("\u001B[36m\u001B[38m\u001B[37mnull\u001B[0m\u001B[0m\u001B[0m", stringBetter13.toString());
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter13);
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter12);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter11);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter1, stringBetter11);
      assertNotSame(stringBetter1, stringBetter5);
      assertNotSame(stringBetter1, stringBetter8);
      assertNotSame(stringBetter1, stringBetter10);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter6);
      assertNotSame(stringBetter1, stringBetter9);
      assertNotSame(stringBetter1, stringBetter12);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter7);
      assertNotSame(stringBetter1, stringBetter13);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter2, stringBetter13);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter8);
      assertNotSame(stringBetter2, stringBetter9);
      assertNotSame(stringBetter2, stringBetter12);
      assertNotSame(stringBetter2, stringBetter11);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter7);
      assertNotSame(stringBetter2, stringBetter10);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter13, stringBetter0);
      assertNotSame(stringBetter13, stringBetter4);
      assertNotSame(stringBetter13, stringBetter7);
      assertNotSame(stringBetter13, stringBetter3);
      assertNotSame(stringBetter13, stringBetter10);
      assertNotSame(stringBetter13, stringBetter8);
      assertNotSame(stringBetter13, stringBetter1);
      assertNotSame(stringBetter13, stringBetter2);
      assertNotSame(stringBetter13, stringBetter11);
      assertNotSame(stringBetter13, stringBetter5);
      assertNotSame(stringBetter13, stringBetter9);
      assertNotSame(stringBetter13, stringBetter12);
      assertNotSame(stringBetter13, stringBetter6);
      assertNotNull(stringBetter13);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter10));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter12));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter11));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter11));
      assertFalse(stringBetter1.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter9));
      assertFalse(stringBetter1.equals((Object)stringBetter12));
      assertFalse(stringBetter1.equals((Object)stringBetter8));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter10));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter7));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter6));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter2.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter10));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter3));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter8));
      assertFalse(stringBetter2.equals((Object)stringBetter9));
      assertFalse(stringBetter2.equals((Object)stringBetter12));
      assertFalse(stringBetter2.equals((Object)stringBetter11));
      assertFalse(stringBetter13.equals((Object)stringBetter0));
      assertFalse(stringBetter13.equals((Object)stringBetter4));
      assertFalse(stringBetter13.equals((Object)stringBetter7));
      assertFalse(stringBetter13.equals((Object)stringBetter3));
      assertFalse(stringBetter13.equals((Object)stringBetter10));
      assertFalse(stringBetter13.equals((Object)stringBetter8));
      assertFalse(stringBetter13.equals((Object)stringBetter1));
      assertFalse(stringBetter13.equals((Object)stringBetter2));
      assertFalse(stringBetter13.equals((Object)stringBetter11));
      assertFalse(stringBetter13.equals((Object)stringBetter5));
      assertFalse(stringBetter13.equals((Object)stringBetter9));
      assertFalse(stringBetter13.equals((Object)stringBetter12));
      assertFalse(stringBetter13.equals((Object)stringBetter6));
      
      StringBetter stringBetter14 = stringBetter3.hideCursor();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertEquals("\u001B[31mnull\u001B[0m", stringBetter3.getStr());
      assertEquals("\u001B[31mnull\u001B[0m", stringBetter3.toString());
      assertEquals("\u001B[31mnull\u001B[0m\u001B[?25l", stringBetter14.getStr());
      assertEquals("\u001B[31mnull\u001B[0m\u001B[?25l", stringBetter14.toString());
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter14);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter13);
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter12);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter11);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter3, stringBetter5);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter11);
      assertNotSame(stringBetter3, stringBetter13);
      assertNotSame(stringBetter3, stringBetter8);
      assertNotSame(stringBetter3, stringBetter10);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotSame(stringBetter3, stringBetter9);
      assertNotSame(stringBetter3, stringBetter12);
      assertNotSame(stringBetter3, stringBetter4);
      assertNotSame(stringBetter3, stringBetter14);
      assertNotSame(stringBetter3, stringBetter6);
      assertNotSame(stringBetter3, stringBetter7);
      assertNotSame(stringBetter3, stringBetter2);
      assertNotSame(stringBetter14, stringBetter10);
      assertNotSame(stringBetter14, stringBetter2);
      assertNotSame(stringBetter14, stringBetter1);
      assertNotSame(stringBetter14, stringBetter3);
      assertNotSame(stringBetter14, stringBetter13);
      assertNotSame(stringBetter14, stringBetter6);
      assertNotSame(stringBetter14, stringBetter5);
      assertNotSame(stringBetter14, stringBetter9);
      assertNotSame(stringBetter14, stringBetter12);
      assertNotSame(stringBetter14, stringBetter4);
      assertNotSame(stringBetter14, stringBetter8);
      assertNotSame(stringBetter14, stringBetter11);
      assertNotSame(stringBetter14, stringBetter7);
      assertNotSame(stringBetter14, stringBetter0);
      assertNotNull(stringBetter14);
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter13));
      assertFalse(stringBetter0.equals((Object)stringBetter10));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter12));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter11));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter3.equals((Object)stringBetter5));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter11));
      assertFalse(stringBetter3.equals((Object)stringBetter13));
      assertFalse(stringBetter3.equals((Object)stringBetter8));
      assertFalse(stringBetter3.equals((Object)stringBetter10));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertFalse(stringBetter3.equals((Object)stringBetter9));
      assertFalse(stringBetter3.equals((Object)stringBetter12));
      assertFalse(stringBetter3.equals((Object)stringBetter4));
      assertFalse(stringBetter3.equals((Object)stringBetter6));
      assertFalse(stringBetter3.equals((Object)stringBetter7));
      assertFalse(stringBetter3.equals((Object)stringBetter2));
      assertFalse(stringBetter14.equals((Object)stringBetter10));
      assertFalse(stringBetter14.equals((Object)stringBetter2));
      assertFalse(stringBetter14.equals((Object)stringBetter1));
      assertFalse(stringBetter14.equals((Object)stringBetter3));
      assertFalse(stringBetter14.equals((Object)stringBetter13));
      assertFalse(stringBetter14.equals((Object)stringBetter6));
      assertFalse(stringBetter14.equals((Object)stringBetter5));
      assertFalse(stringBetter14.equals((Object)stringBetter9));
      assertFalse(stringBetter14.equals((Object)stringBetter12));
      assertFalse(stringBetter14.equals((Object)stringBetter4));
      assertFalse(stringBetter14.equals((Object)stringBetter8));
      assertFalse(stringBetter14.equals((Object)stringBetter11));
      assertFalse(stringBetter14.equals((Object)stringBetter7));
      assertFalse(stringBetter14.equals((Object)stringBetter0));
      
      StringBetter stringBetter15 = stringBetter0.orange();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertEquals("\u001B[33mnull\u001B[0m", stringBetter15.getStr());
      assertEquals("\u001B[33mnull\u001B[0m", stringBetter15.toString());
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter14);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter13);
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter12);
      assertNotSame(stringBetter0, stringBetter15);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter11);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter15, stringBetter11);
      assertNotSame(stringBetter15, stringBetter0);
      assertNotSame(stringBetter15, stringBetter3);
      assertNotSame(stringBetter15, stringBetter4);
      assertNotSame(stringBetter15, stringBetter7);
      assertNotSame(stringBetter15, stringBetter8);
      assertNotSame(stringBetter15, stringBetter9);
      assertNotSame(stringBetter15, stringBetter13);
      assertNotSame(stringBetter15, stringBetter1);
      assertNotSame(stringBetter15, stringBetter5);
      assertNotSame(stringBetter15, stringBetter2);
      assertNotSame(stringBetter15, stringBetter14);
      assertNotSame(stringBetter15, stringBetter12);
      assertNotSame(stringBetter15, stringBetter6);
      assertNotSame(stringBetter15, stringBetter10);
      assertNotNull(stringBetter15);
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter14));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter13));
      assertFalse(stringBetter0.equals((Object)stringBetter10));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter12));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter11));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter15.equals((Object)stringBetter11));
      assertFalse(stringBetter15.equals((Object)stringBetter0));
      assertFalse(stringBetter15.equals((Object)stringBetter3));
      assertFalse(stringBetter15.equals((Object)stringBetter4));
      assertFalse(stringBetter15.equals((Object)stringBetter7));
      assertFalse(stringBetter15.equals((Object)stringBetter8));
      assertFalse(stringBetter15.equals((Object)stringBetter9));
      assertFalse(stringBetter15.equals((Object)stringBetter13));
      assertFalse(stringBetter15.equals((Object)stringBetter1));
      assertFalse(stringBetter15.equals((Object)stringBetter5));
      assertFalse(stringBetter15.equals((Object)stringBetter2));
      assertFalse(stringBetter15.equals((Object)stringBetter14));
      assertFalse(stringBetter15.equals((Object)stringBetter12));
      assertFalse(stringBetter15.equals((Object)stringBetter6));
      assertFalse(stringBetter15.equals((Object)stringBetter10));
      
      String string0 = stringBetter0.getStr();
      assertNull(stringBetter0.getStr());
      assertNull(stringBetter0.toString());
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter14);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter13);
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter12);
      assertNotSame(stringBetter0, stringBetter15);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter11);
      assertNotSame(stringBetter0, stringBetter6);
      assertNull(string0);
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter14));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter13));
      assertFalse(stringBetter0.equals((Object)stringBetter10));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter12));
      assertFalse(stringBetter0.equals((Object)stringBetter15));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter11));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.red();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[31m\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[31m\u001B[0m", stringBetter1.getStr());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotNull(stringBetter1);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      
      StringBetter stringBetter2 = stringBetter1.cyan();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[31m\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[31m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[36m\u001B[31m\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[36m\u001B[31m\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotNull(stringBetter2);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("vPG1dd0v");
      assertEquals("vPG1dd0v", stringBetter0.toString());
      assertEquals("vPG1dd0v", stringBetter0.getStr());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.repeat((-1));
      assertEquals("vPG1dd0v", stringBetter0.toString());
      assertEquals("vPG1dd0v", stringBetter0.getStr());
      assertEquals("", stringBetter1.getStr());
      assertEquals("", stringBetter1.toString());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotNull(stringBetter1);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      
      StringBetter stringBetter2 = stringBetter1.hideCursor();
      assertEquals("vPG1dd0v", stringBetter0.toString());
      assertEquals("vPG1dd0v", stringBetter0.getStr());
      assertEquals("", stringBetter1.getStr());
      assertEquals("", stringBetter1.toString());
      assertEquals("\u001B[?25l", stringBetter2.getStr());
      assertEquals("\u001B[?25l", stringBetter2.toString());
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotNull(stringBetter2);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.repeat(3419);
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter1.toString());
      assertEquals("", stringBetter1.getStr());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotNull(stringBetter1);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      
      StringBetter stringBetter2 = stringBetter1.white();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter1.toString());
      assertEquals("", stringBetter1.getStr());
      assertEquals("\u001B[38m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[38m\u001B[0m", stringBetter2.toString());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotNull(stringBetter2);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      
      StringBetter stringBetter3 = stringBetter0.bold();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[1m\u001B[0m", stringBetter3.getStr());
      assertEquals("\u001B[1m\u001B[0m", stringBetter3.toString());
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter2);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotNull(stringBetter3);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter2));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      
      StringBetter stringBetter4 = stringBetter1.blue();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter1.toString());
      assertEquals("", stringBetter1.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter4.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter4.toString());
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter4, stringBetter2);
      assertNotSame(stringBetter4, stringBetter0);
      assertNotSame(stringBetter4, stringBetter1);
      assertNotSame(stringBetter4, stringBetter3);
      assertNotNull(stringBetter4);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter4.equals((Object)stringBetter2));
      assertFalse(stringBetter4.equals((Object)stringBetter0));
      assertFalse(stringBetter4.equals((Object)stringBetter1));
      assertFalse(stringBetter4.equals((Object)stringBetter3));
      
      StringBetter stringBetter5 = stringBetter2.grey();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter1.toString());
      assertEquals("", stringBetter1.getStr());
      assertEquals("\u001B[38m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[38m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[37m\u001B[38m\u001B[0m\u001B[0m", stringBetter5.getStr());
      assertEquals("\u001B[37m\u001B[38m\u001B[0m\u001B[0m", stringBetter5.toString());
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter5);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter5, stringBetter3);
      assertNotSame(stringBetter5, stringBetter1);
      assertNotSame(stringBetter5, stringBetter4);
      assertNotSame(stringBetter5, stringBetter0);
      assertNotSame(stringBetter5, stringBetter2);
      assertNotNull(stringBetter5);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter3));
      assertFalse(stringBetter5.equals((Object)stringBetter3));
      assertFalse(stringBetter5.equals((Object)stringBetter1));
      assertFalse(stringBetter5.equals((Object)stringBetter4));
      assertFalse(stringBetter5.equals((Object)stringBetter0));
      assertFalse(stringBetter5.equals((Object)stringBetter2));
      
      StringBetter stringBetter6 = stringBetter5.blink();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter1.toString());
      assertEquals("", stringBetter1.getStr());
      assertEquals("\u001B[38m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[38m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[37m\u001B[38m\u001B[0m\u001B[0m", stringBetter5.getStr());
      assertEquals("\u001B[37m\u001B[38m\u001B[0m\u001B[0m", stringBetter5.toString());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m", stringBetter6.getStr());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m", stringBetter6.toString());
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter5);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter6);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter5, stringBetter3);
      assertNotSame(stringBetter5, stringBetter1);
      assertNotSame(stringBetter5, stringBetter6);
      assertNotSame(stringBetter5, stringBetter4);
      assertNotSame(stringBetter5, stringBetter0);
      assertNotSame(stringBetter5, stringBetter2);
      assertNotSame(stringBetter6, stringBetter5);
      assertNotSame(stringBetter6, stringBetter3);
      assertNotSame(stringBetter6, stringBetter1);
      assertNotSame(stringBetter6, stringBetter2);
      assertNotSame(stringBetter6, stringBetter0);
      assertNotSame(stringBetter6, stringBetter4);
      assertNotNull(stringBetter6);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter3));
      assertFalse(stringBetter5.equals((Object)stringBetter3));
      assertFalse(stringBetter5.equals((Object)stringBetter1));
      assertFalse(stringBetter5.equals((Object)stringBetter4));
      assertFalse(stringBetter5.equals((Object)stringBetter0));
      assertFalse(stringBetter5.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter5));
      assertFalse(stringBetter6.equals((Object)stringBetter3));
      assertFalse(stringBetter6.equals((Object)stringBetter1));
      assertFalse(stringBetter6.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter0));
      assertFalse(stringBetter6.equals((Object)stringBetter4));
      
      StringBetter stringBetter7 = stringBetter0.showCursor();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[?25h", stringBetter7.getStr());
      assertEquals("\u001B[?25h", stringBetter7.toString());
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter7, stringBetter5);
      assertNotSame(stringBetter7, stringBetter3);
      assertNotSame(stringBetter7, stringBetter6);
      assertNotSame(stringBetter7, stringBetter1);
      assertNotSame(stringBetter7, stringBetter4);
      assertNotSame(stringBetter7, stringBetter0);
      assertNotSame(stringBetter7, stringBetter2);
      assertNotNull(stringBetter7);
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter7.equals((Object)stringBetter5));
      assertFalse(stringBetter7.equals((Object)stringBetter3));
      assertFalse(stringBetter7.equals((Object)stringBetter6));
      assertFalse(stringBetter7.equals((Object)stringBetter1));
      assertFalse(stringBetter7.equals((Object)stringBetter4));
      assertFalse(stringBetter7.equals((Object)stringBetter0));
      assertFalse(stringBetter7.equals((Object)stringBetter2));
      
      StringBetter stringBetter8 = stringBetter6.showCursor();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter1.toString());
      assertEquals("", stringBetter1.getStr());
      assertEquals("\u001B[38m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[38m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[37m\u001B[38m\u001B[0m\u001B[0m", stringBetter5.getStr());
      assertEquals("\u001B[37m\u001B[38m\u001B[0m\u001B[0m", stringBetter5.toString());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m", stringBetter6.getStr());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m", stringBetter6.toString());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m\u001B[?25h", stringBetter8.toString());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m\u001B[?25h", stringBetter8.getStr());
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter5);
      assertNotSame(stringBetter1, stringBetter8);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter6);
      assertNotSame(stringBetter1, stringBetter7);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter7);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter8);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter5, stringBetter3);
      assertNotSame(stringBetter5, stringBetter1);
      assertNotSame(stringBetter5, stringBetter6);
      assertNotSame(stringBetter5, stringBetter8);
      assertNotSame(stringBetter5, stringBetter4);
      assertNotSame(stringBetter5, stringBetter7);
      assertNotSame(stringBetter5, stringBetter0);
      assertNotSame(stringBetter5, stringBetter2);
      assertNotSame(stringBetter6, stringBetter5);
      assertNotSame(stringBetter6, stringBetter3);
      assertNotSame(stringBetter6, stringBetter1);
      assertNotSame(stringBetter6, stringBetter2);
      assertNotSame(stringBetter6, stringBetter8);
      assertNotSame(stringBetter6, stringBetter0);
      assertNotSame(stringBetter6, stringBetter7);
      assertNotSame(stringBetter6, stringBetter4);
      assertNotSame(stringBetter8, stringBetter7);
      assertNotSame(stringBetter8, stringBetter4);
      assertNotSame(stringBetter8, stringBetter2);
      assertNotSame(stringBetter8, stringBetter0);
      assertNotSame(stringBetter8, stringBetter5);
      assertNotSame(stringBetter8, stringBetter1);
      assertNotSame(stringBetter8, stringBetter6);
      assertNotSame(stringBetter8, stringBetter3);
      assertNotNull(stringBetter8);
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter7));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter6));
      assertFalse(stringBetter2.equals((Object)stringBetter3));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter5.equals((Object)stringBetter3));
      assertFalse(stringBetter5.equals((Object)stringBetter1));
      assertFalse(stringBetter5.equals((Object)stringBetter6));
      assertFalse(stringBetter5.equals((Object)stringBetter4));
      assertFalse(stringBetter5.equals((Object)stringBetter7));
      assertFalse(stringBetter5.equals((Object)stringBetter0));
      assertFalse(stringBetter5.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter5));
      assertFalse(stringBetter6.equals((Object)stringBetter3));
      assertFalse(stringBetter6.equals((Object)stringBetter1));
      assertFalse(stringBetter6.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter0));
      assertFalse(stringBetter6.equals((Object)stringBetter7));
      assertFalse(stringBetter6.equals((Object)stringBetter4));
      assertFalse(stringBetter8.equals((Object)stringBetter7));
      assertFalse(stringBetter8.equals((Object)stringBetter4));
      assertFalse(stringBetter8.equals((Object)stringBetter2));
      assertFalse(stringBetter8.equals((Object)stringBetter0));
      assertFalse(stringBetter8.equals((Object)stringBetter5));
      assertFalse(stringBetter8.equals((Object)stringBetter1));
      assertFalse(stringBetter8.equals((Object)stringBetter6));
      assertFalse(stringBetter8.equals((Object)stringBetter3));
      
      StringBetter stringBetter9 = stringBetter8.under();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter1.toString());
      assertEquals("", stringBetter1.getStr());
      assertEquals("\u001B[38m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[38m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[37m\u001B[38m\u001B[0m\u001B[0m", stringBetter5.getStr());
      assertEquals("\u001B[37m\u001B[38m\u001B[0m\u001B[0m", stringBetter5.toString());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m", stringBetter6.getStr());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m", stringBetter6.toString());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m\u001B[?25h", stringBetter8.toString());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m\u001B[?25h", stringBetter8.getStr());
      assertEquals("\u001B[4m\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m\u001B[?25h\u001B[0m", stringBetter9.toString());
      assertEquals("\u001B[4m\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m\u001B[?25h\u001B[0m", stringBetter9.getStr());
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter5);
      assertNotSame(stringBetter1, stringBetter8);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter9);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter6);
      assertNotSame(stringBetter1, stringBetter7);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter7);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter8);
      assertNotSame(stringBetter2, stringBetter9);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter5, stringBetter3);
      assertNotSame(stringBetter5, stringBetter1);
      assertNotSame(stringBetter5, stringBetter6);
      assertNotSame(stringBetter5, stringBetter8);
      assertNotSame(stringBetter5, stringBetter4);
      assertNotSame(stringBetter5, stringBetter7);
      assertNotSame(stringBetter5, stringBetter9);
      assertNotSame(stringBetter5, stringBetter0);
      assertNotSame(stringBetter5, stringBetter2);
      assertNotSame(stringBetter6, stringBetter5);
      assertNotSame(stringBetter6, stringBetter3);
      assertNotSame(stringBetter6, stringBetter9);
      assertNotSame(stringBetter6, stringBetter1);
      assertNotSame(stringBetter6, stringBetter2);
      assertNotSame(stringBetter6, stringBetter8);
      assertNotSame(stringBetter6, stringBetter0);
      assertNotSame(stringBetter6, stringBetter7);
      assertNotSame(stringBetter6, stringBetter4);
      assertNotSame(stringBetter8, stringBetter7);
      assertNotSame(stringBetter8, stringBetter4);
      assertNotSame(stringBetter8, stringBetter2);
      assertNotSame(stringBetter8, stringBetter0);
      assertNotSame(stringBetter8, stringBetter5);
      assertNotSame(stringBetter8, stringBetter9);
      assertNotSame(stringBetter8, stringBetter1);
      assertNotSame(stringBetter8, stringBetter6);
      assertNotSame(stringBetter8, stringBetter3);
      assertNotSame(stringBetter9, stringBetter1);
      assertNotSame(stringBetter9, stringBetter2);
      assertNotSame(stringBetter9, stringBetter8);
      assertNotSame(stringBetter9, stringBetter0);
      assertNotSame(stringBetter9, stringBetter4);
      assertNotSame(stringBetter9, stringBetter6);
      assertNotSame(stringBetter9, stringBetter7);
      assertNotSame(stringBetter9, stringBetter3);
      assertNotSame(stringBetter9, stringBetter5);
      assertNotNull(stringBetter9);
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter8));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter7));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter8));
      assertFalse(stringBetter2.equals((Object)stringBetter6));
      assertFalse(stringBetter2.equals((Object)stringBetter3));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter5.equals((Object)stringBetter3));
      assertFalse(stringBetter5.equals((Object)stringBetter1));
      assertFalse(stringBetter5.equals((Object)stringBetter6));
      assertFalse(stringBetter5.equals((Object)stringBetter8));
      assertFalse(stringBetter5.equals((Object)stringBetter4));
      assertFalse(stringBetter5.equals((Object)stringBetter7));
      assertFalse(stringBetter5.equals((Object)stringBetter0));
      assertFalse(stringBetter5.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter5));
      assertFalse(stringBetter6.equals((Object)stringBetter3));
      assertFalse(stringBetter6.equals((Object)stringBetter1));
      assertFalse(stringBetter6.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter8));
      assertFalse(stringBetter6.equals((Object)stringBetter0));
      assertFalse(stringBetter6.equals((Object)stringBetter7));
      assertFalse(stringBetter6.equals((Object)stringBetter4));
      assertFalse(stringBetter8.equals((Object)stringBetter7));
      assertFalse(stringBetter8.equals((Object)stringBetter4));
      assertFalse(stringBetter8.equals((Object)stringBetter2));
      assertFalse(stringBetter8.equals((Object)stringBetter0));
      assertFalse(stringBetter8.equals((Object)stringBetter5));
      assertFalse(stringBetter8.equals((Object)stringBetter1));
      assertFalse(stringBetter8.equals((Object)stringBetter6));
      assertFalse(stringBetter8.equals((Object)stringBetter3));
      assertFalse(stringBetter9.equals((Object)stringBetter1));
      assertFalse(stringBetter9.equals((Object)stringBetter2));
      assertFalse(stringBetter9.equals((Object)stringBetter8));
      assertFalse(stringBetter9.equals((Object)stringBetter0));
      assertFalse(stringBetter9.equals((Object)stringBetter4));
      assertFalse(stringBetter9.equals((Object)stringBetter6));
      assertFalse(stringBetter9.equals((Object)stringBetter7));
      assertFalse(stringBetter9.equals((Object)stringBetter3));
      assertFalse(stringBetter9.equals((Object)stringBetter5));
      
      StringBetter stringBetter10 = stringBetter8.showCursor();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter1.toString());
      assertEquals("", stringBetter1.getStr());
      assertEquals("\u001B[38m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[38m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[37m\u001B[38m\u001B[0m\u001B[0m", stringBetter5.getStr());
      assertEquals("\u001B[37m\u001B[38m\u001B[0m\u001B[0m", stringBetter5.toString());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m", stringBetter6.getStr());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m", stringBetter6.toString());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m\u001B[?25h", stringBetter8.toString());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m\u001B[?25h", stringBetter8.getStr());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m\u001B[?25h\u001B[?25h", stringBetter10.toString());
      assertEquals("\u001B[5m\u001B[37m\u001B[38m\u001B[0m\u001B[0m\u001B[0m\u001B[?25h\u001B[?25h", stringBetter10.getStr());
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter5);
      assertNotSame(stringBetter1, stringBetter10);
      assertNotSame(stringBetter1, stringBetter8);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter9);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter6);
      assertNotSame(stringBetter1, stringBetter7);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter2, stringBetter5);
      assertNotSame(stringBetter2, stringBetter10);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter7);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter8);
      assertNotSame(stringBetter2, stringBetter9);
      assertNotSame(stringBetter2, stringBetter6);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter5, stringBetter10);
      assertNotSame(stringBetter5, stringBetter3);
      assertNotSame(stringBetter5, stringBetter1);
      assertNotSame(stringBetter5, stringBetter6);
      assertNotSame(stringBetter5, stringBetter8);
      assertNotSame(stringBetter5, stringBetter4);
      assertNotSame(stringBetter5, stringBetter7);
      assertNotSame(stringBetter5, stringBetter9);
      assertNotSame(stringBetter5, stringBetter0);
      assertNotSame(stringBetter5, stringBetter2);
      assertNotSame(stringBetter6, stringBetter10);
      assertNotSame(stringBetter6, stringBetter5);
      assertNotSame(stringBetter6, stringBetter3);
      assertNotSame(stringBetter6, stringBetter9);
      assertNotSame(stringBetter6, stringBetter1);
      assertNotSame(stringBetter6, stringBetter2);
      assertNotSame(stringBetter6, stringBetter8);
      assertNotSame(stringBetter6, stringBetter0);
      assertNotSame(stringBetter6, stringBetter7);
      assertNotSame(stringBetter6, stringBetter4);
      assertNotSame(stringBetter8, stringBetter7);
      assertNotSame(stringBetter8, stringBetter4);
      assertNotSame(stringBetter8, stringBetter2);
      assertNotSame(stringBetter8, stringBetter0);
      assertNotSame(stringBetter8, stringBetter5);
      assertNotSame(stringBetter8, stringBetter10);
      assertNotSame(stringBetter8, stringBetter9);
      assertNotSame(stringBetter8, stringBetter1);
      assertNotSame(stringBetter8, stringBetter6);
      assertNotSame(stringBetter8, stringBetter3);
      assertNotSame(stringBetter10, stringBetter7);
      assertNotSame(stringBetter10, stringBetter3);
      assertNotSame(stringBetter10, stringBetter9);
      assertNotSame(stringBetter10, stringBetter2);
      assertNotSame(stringBetter10, stringBetter4);
      assertNotSame(stringBetter10, stringBetter8);
      assertNotSame(stringBetter10, stringBetter1);
      assertNotSame(stringBetter10, stringBetter6);
      assertNotSame(stringBetter10, stringBetter0);
      assertNotSame(stringBetter10, stringBetter5);
      assertNotNull(stringBetter10);
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter8));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter1.equals((Object)stringBetter9));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter7));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter5));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter7));
      assertFalse(stringBetter2.equals((Object)stringBetter4));
      assertFalse(stringBetter2.equals((Object)stringBetter8));
      assertFalse(stringBetter2.equals((Object)stringBetter9));
      assertFalse(stringBetter2.equals((Object)stringBetter6));
      assertFalse(stringBetter2.equals((Object)stringBetter3));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter5.equals((Object)stringBetter3));
      assertFalse(stringBetter5.equals((Object)stringBetter1));
      assertFalse(stringBetter5.equals((Object)stringBetter6));
      assertFalse(stringBetter5.equals((Object)stringBetter8));
      assertFalse(stringBetter5.equals((Object)stringBetter4));
      assertFalse(stringBetter5.equals((Object)stringBetter7));
      assertFalse(stringBetter5.equals((Object)stringBetter9));
      assertFalse(stringBetter5.equals((Object)stringBetter0));
      assertFalse(stringBetter5.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter5));
      assertFalse(stringBetter6.equals((Object)stringBetter3));
      assertFalse(stringBetter6.equals((Object)stringBetter9));
      assertFalse(stringBetter6.equals((Object)stringBetter1));
      assertFalse(stringBetter6.equals((Object)stringBetter2));
      assertFalse(stringBetter6.equals((Object)stringBetter8));
      assertFalse(stringBetter6.equals((Object)stringBetter0));
      assertFalse(stringBetter6.equals((Object)stringBetter7));
      assertFalse(stringBetter6.equals((Object)stringBetter4));
      assertFalse(stringBetter8.equals((Object)stringBetter7));
      assertFalse(stringBetter8.equals((Object)stringBetter4));
      assertFalse(stringBetter8.equals((Object)stringBetter2));
      assertFalse(stringBetter8.equals((Object)stringBetter0));
      assertFalse(stringBetter8.equals((Object)stringBetter5));
      assertFalse(stringBetter8.equals((Object)stringBetter9));
      assertFalse(stringBetter8.equals((Object)stringBetter1));
      assertFalse(stringBetter8.equals((Object)stringBetter6));
      assertFalse(stringBetter8.equals((Object)stringBetter3));
      assertFalse(stringBetter10.equals((Object)stringBetter7));
      assertFalse(stringBetter10.equals((Object)stringBetter3));
      assertFalse(stringBetter10.equals((Object)stringBetter9));
      assertFalse(stringBetter10.equals((Object)stringBetter2));
      assertFalse(stringBetter10.equals((Object)stringBetter4));
      assertFalse(stringBetter10.equals((Object)stringBetter8));
      assertFalse(stringBetter10.equals((Object)stringBetter1));
      assertFalse(stringBetter10.equals((Object)stringBetter6));
      assertFalse(stringBetter10.equals((Object)stringBetter0));
      assertFalse(stringBetter10.equals((Object)stringBetter5));
      
      StringBetter stringBetter11 = stringBetter0.repeat(3419);
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter11.toString());
      assertEquals("", stringBetter11.getStr());
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter11);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter11, stringBetter10);
      assertNotSame(stringBetter11, stringBetter3);
      assertNotSame(stringBetter11, stringBetter7);
      assertNotSame(stringBetter11, stringBetter4);
      assertNotSame(stringBetter11, stringBetter1);
      assertNotSame(stringBetter11, stringBetter2);
      assertNotSame(stringBetter11, stringBetter9);
      assertNotSame(stringBetter11, stringBetter6);
      assertNotSame(stringBetter11, stringBetter8);
      assertNotSame(stringBetter11, stringBetter0);
      assertNotSame(stringBetter11, stringBetter5);
      assertNotNull(stringBetter11);
      assertFalse(stringBetter0.equals((Object)stringBetter10));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter11.equals((Object)stringBetter10));
      assertFalse(stringBetter11.equals((Object)stringBetter3));
      assertFalse(stringBetter11.equals((Object)stringBetter7));
      assertFalse(stringBetter11.equals((Object)stringBetter4));
      assertFalse(stringBetter11.equals((Object)stringBetter1));
      assertFalse(stringBetter11.equals((Object)stringBetter2));
      assertFalse(stringBetter11.equals((Object)stringBetter9));
      assertFalse(stringBetter11.equals((Object)stringBetter6));
      assertFalse(stringBetter11.equals((Object)stringBetter8));
      assertFalse(stringBetter11.equals((Object)stringBetter0));
      assertFalse(stringBetter11.equals((Object)stringBetter5));
      
      StringBetter stringBetter12 = stringBetter11.black();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter11.toString());
      assertEquals("", stringBetter11.getStr());
      assertEquals("\u001B[30m\u001B[0m", stringBetter12.getStr());
      assertEquals("\u001B[30m\u001B[0m", stringBetter12.toString());
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter11);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter12);
      assertNotSame(stringBetter11, stringBetter10);
      assertNotSame(stringBetter11, stringBetter3);
      assertNotSame(stringBetter11, stringBetter7);
      assertNotSame(stringBetter11, stringBetter4);
      assertNotSame(stringBetter11, stringBetter2);
      assertNotSame(stringBetter11, stringBetter1);
      assertNotSame(stringBetter11, stringBetter6);
      assertNotSame(stringBetter11, stringBetter9);
      assertNotSame(stringBetter11, stringBetter8);
      assertNotSame(stringBetter11, stringBetter12);
      assertNotSame(stringBetter11, stringBetter0);
      assertNotSame(stringBetter11, stringBetter5);
      assertNotSame(stringBetter12, stringBetter8);
      assertNotSame(stringBetter12, stringBetter2);
      assertNotSame(stringBetter12, stringBetter6);
      assertNotSame(stringBetter12, stringBetter9);
      assertNotSame(stringBetter12, stringBetter11);
      assertNotSame(stringBetter12, stringBetter4);
      assertNotSame(stringBetter12, stringBetter0);
      assertNotSame(stringBetter12, stringBetter5);
      assertNotSame(stringBetter12, stringBetter10);
      assertNotSame(stringBetter12, stringBetter7);
      assertNotSame(stringBetter12, stringBetter3);
      assertNotSame(stringBetter12, stringBetter1);
      assertNotNull(stringBetter12);
      assertFalse(stringBetter0.equals((Object)stringBetter10));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter11));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter11.equals((Object)stringBetter10));
      assertFalse(stringBetter11.equals((Object)stringBetter3));
      assertFalse(stringBetter11.equals((Object)stringBetter7));
      assertFalse(stringBetter11.equals((Object)stringBetter4));
      assertFalse(stringBetter11.equals((Object)stringBetter1));
      assertFalse(stringBetter11.equals((Object)stringBetter2));
      assertFalse(stringBetter11.equals((Object)stringBetter9));
      assertFalse(stringBetter11.equals((Object)stringBetter6));
      assertFalse(stringBetter11.equals((Object)stringBetter8));
      assertFalse(stringBetter11.equals((Object)stringBetter0));
      assertFalse(stringBetter11.equals((Object)stringBetter5));
      assertFalse(stringBetter12.equals((Object)stringBetter8));
      assertFalse(stringBetter12.equals((Object)stringBetter2));
      assertFalse(stringBetter12.equals((Object)stringBetter6));
      assertFalse(stringBetter12.equals((Object)stringBetter9));
      assertFalse(stringBetter12.equals((Object)stringBetter11));
      assertFalse(stringBetter12.equals((Object)stringBetter4));
      assertFalse(stringBetter12.equals((Object)stringBetter0));
      assertFalse(stringBetter12.equals((Object)stringBetter5));
      assertFalse(stringBetter12.equals((Object)stringBetter10));
      assertFalse(stringBetter12.equals((Object)stringBetter7));
      assertFalse(stringBetter12.equals((Object)stringBetter3));
      assertFalse(stringBetter12.equals((Object)stringBetter1));
      
      StringBetter stringBetter13 = stringBetter12.append("");
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter11.toString());
      assertEquals("", stringBetter11.getStr());
      assertEquals("\u001B[30m\u001B[0m", stringBetter12.getStr());
      assertEquals("\u001B[30m\u001B[0m", stringBetter12.toString());
      assertEquals("\u001B[30m\u001B[0m", stringBetter13.toString());
      assertEquals("\u001B[30m\u001B[0m", stringBetter13.getStr());
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter13);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter11);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter12);
      assertNotSame(stringBetter11, stringBetter10);
      assertNotSame(stringBetter11, stringBetter3);
      assertNotSame(stringBetter11, stringBetter13);
      assertNotSame(stringBetter11, stringBetter7);
      assertNotSame(stringBetter11, stringBetter1);
      assertNotSame(stringBetter11, stringBetter8);
      assertNotSame(stringBetter11, stringBetter4);
      assertNotSame(stringBetter11, stringBetter2);
      assertNotSame(stringBetter11, stringBetter6);
      assertNotSame(stringBetter11, stringBetter9);
      assertNotSame(stringBetter11, stringBetter12);
      assertNotSame(stringBetter11, stringBetter0);
      assertNotSame(stringBetter11, stringBetter5);
      assertNotSame(stringBetter12, stringBetter2);
      assertNotSame(stringBetter12, stringBetter9);
      assertSame(stringBetter12, stringBetter13);
      assertNotSame(stringBetter12, stringBetter11);
      assertNotSame(stringBetter12, stringBetter0);
      assertNotSame(stringBetter12, stringBetter7);
      assertNotSame(stringBetter12, stringBetter1);
      assertNotSame(stringBetter12, stringBetter8);
      assertNotSame(stringBetter12, stringBetter6);
      assertNotSame(stringBetter12, stringBetter4);
      assertNotSame(stringBetter12, stringBetter5);
      assertNotSame(stringBetter12, stringBetter10);
      assertNotSame(stringBetter12, stringBetter3);
      assertNotSame(stringBetter13, stringBetter2);
      assertNotSame(stringBetter13, stringBetter11);
      assertNotSame(stringBetter13, stringBetter10);
      assertNotSame(stringBetter13, stringBetter6);
      assertNotSame(stringBetter13, stringBetter0);
      assertNotSame(stringBetter13, stringBetter9);
      assertNotSame(stringBetter13, stringBetter3);
      assertSame(stringBetter13, stringBetter12);
      assertNotSame(stringBetter13, stringBetter5);
      assertNotSame(stringBetter13, stringBetter7);
      assertNotSame(stringBetter13, stringBetter4);
      assertNotSame(stringBetter13, stringBetter8);
      assertNotSame(stringBetter13, stringBetter1);
      assertNotNull(stringBetter13);
      assertFalse(stringBetter0.equals((Object)stringBetter10));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter11));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter12));
      assertFalse(stringBetter11.equals((Object)stringBetter10));
      assertFalse(stringBetter11.equals((Object)stringBetter3));
      assertFalse(stringBetter11.equals((Object)stringBetter7));
      assertFalse(stringBetter11.equals((Object)stringBetter4));
      assertFalse(stringBetter11.equals((Object)stringBetter2));
      assertFalse(stringBetter11.equals((Object)stringBetter1));
      assertFalse(stringBetter11.equals((Object)stringBetter6));
      assertFalse(stringBetter11.equals((Object)stringBetter9));
      assertFalse(stringBetter11.equals((Object)stringBetter8));
      assertFalse(stringBetter11.equals((Object)stringBetter12));
      assertFalse(stringBetter11.equals((Object)stringBetter0));
      assertFalse(stringBetter11.equals((Object)stringBetter5));
      assertFalse(stringBetter12.equals((Object)stringBetter8));
      assertFalse(stringBetter12.equals((Object)stringBetter2));
      assertFalse(stringBetter12.equals((Object)stringBetter6));
      assertFalse(stringBetter12.equals((Object)stringBetter9));
      assertFalse(stringBetter12.equals((Object)stringBetter11));
      assertFalse(stringBetter12.equals((Object)stringBetter4));
      assertFalse(stringBetter12.equals((Object)stringBetter0));
      assertFalse(stringBetter12.equals((Object)stringBetter5));
      assertFalse(stringBetter12.equals((Object)stringBetter10));
      assertFalse(stringBetter12.equals((Object)stringBetter7));
      assertFalse(stringBetter12.equals((Object)stringBetter3));
      assertFalse(stringBetter12.equals((Object)stringBetter1));
      assertFalse(stringBetter13.equals((Object)stringBetter5));
      assertFalse(stringBetter13.equals((Object)stringBetter2));
      assertFalse(stringBetter13.equals((Object)stringBetter11));
      assertFalse(stringBetter13.equals((Object)stringBetter7));
      assertFalse(stringBetter13.equals((Object)stringBetter4));
      assertFalse(stringBetter13.equals((Object)stringBetter10));
      assertFalse(stringBetter13.equals((Object)stringBetter8));
      assertFalse(stringBetter13.equals((Object)stringBetter6));
      assertFalse(stringBetter13.equals((Object)stringBetter0));
      assertFalse(stringBetter13.equals((Object)stringBetter9));
      assertFalse(stringBetter13.equals((Object)stringBetter3));
      assertFalse(stringBetter13.equals((Object)stringBetter1));
      
      StringBetter stringBetter14 = stringBetter11.blue();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter11.toString());
      assertEquals("", stringBetter11.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter14.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter14.toString());
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter13);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter14);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter11);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter12);
      assertNotSame(stringBetter11, stringBetter10);
      assertNotSame(stringBetter11, stringBetter3);
      assertNotSame(stringBetter11, stringBetter13);
      assertNotSame(stringBetter11, stringBetter7);
      assertNotSame(stringBetter11, stringBetter1);
      assertNotSame(stringBetter11, stringBetter8);
      assertNotSame(stringBetter11, stringBetter4);
      assertNotSame(stringBetter11, stringBetter2);
      assertNotSame(stringBetter11, stringBetter14);
      assertNotSame(stringBetter11, stringBetter6);
      assertNotSame(stringBetter11, stringBetter9);
      assertNotSame(stringBetter11, stringBetter12);
      assertNotSame(stringBetter11, stringBetter0);
      assertNotSame(stringBetter11, stringBetter5);
      assertNotSame(stringBetter14, stringBetter8);
      assertNotSame(stringBetter14, stringBetter6);
      assertNotSame(stringBetter14, stringBetter0);
      assertNotSame(stringBetter14, stringBetter5);
      assertNotSame(stringBetter14, stringBetter11);
      assertNotSame(stringBetter14, stringBetter12);
      assertNotSame(stringBetter14, stringBetter4);
      assertNotSame(stringBetter14, stringBetter2);
      assertNotSame(stringBetter14, stringBetter13);
      assertNotSame(stringBetter14, stringBetter10);
      assertNotSame(stringBetter14, stringBetter7);
      assertNotSame(stringBetter14, stringBetter3);
      assertNotSame(stringBetter14, stringBetter1);
      assertNotSame(stringBetter14, stringBetter9);
      assertNotNull(stringBetter14);
      assertFalse(stringBetter0.equals((Object)stringBetter10));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter13));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter11));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter12));
      assertFalse(stringBetter11.equals((Object)stringBetter10));
      assertFalse(stringBetter11.equals((Object)stringBetter3));
      assertFalse(stringBetter11.equals((Object)stringBetter13));
      assertFalse(stringBetter11.equals((Object)stringBetter7));
      assertFalse(stringBetter11.equals((Object)stringBetter1));
      assertFalse(stringBetter11.equals((Object)stringBetter8));
      assertFalse(stringBetter11.equals((Object)stringBetter4));
      assertFalse(stringBetter11.equals((Object)stringBetter2));
      assertFalse(stringBetter11.equals((Object)stringBetter6));
      assertFalse(stringBetter11.equals((Object)stringBetter9));
      assertFalse(stringBetter11.equals((Object)stringBetter12));
      assertFalse(stringBetter11.equals((Object)stringBetter0));
      assertFalse(stringBetter11.equals((Object)stringBetter5));
      assertFalse(stringBetter14.equals((Object)stringBetter8));
      assertFalse(stringBetter14.equals((Object)stringBetter6));
      assertFalse(stringBetter14.equals((Object)stringBetter0));
      assertFalse(stringBetter14.equals((Object)stringBetter5));
      assertFalse(stringBetter14.equals((Object)stringBetter11));
      assertFalse(stringBetter14.equals((Object)stringBetter12));
      assertFalse(stringBetter14.equals((Object)stringBetter4));
      assertFalse(stringBetter14.equals((Object)stringBetter2));
      assertFalse(stringBetter14.equals((Object)stringBetter13));
      assertFalse(stringBetter14.equals((Object)stringBetter10));
      assertFalse(stringBetter14.equals((Object)stringBetter7));
      assertFalse(stringBetter14.equals((Object)stringBetter3));
      assertFalse(stringBetter14.equals((Object)stringBetter1));
      assertFalse(stringBetter14.equals((Object)stringBetter9));
      
      StringBetter stringBetter15 = stringBetter14.blink();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter11.toString());
      assertEquals("", stringBetter11.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter14.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter14.toString());
      assertEquals("\u001B[5m\u001B[34m\u001B[0m\u001B[0m", stringBetter15.getStr());
      assertEquals("\u001B[5m\u001B[34m\u001B[0m\u001B[0m", stringBetter15.toString());
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter13);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter15);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter14);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter11);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter12);
      assertNotSame(stringBetter11, stringBetter10);
      assertNotSame(stringBetter11, stringBetter3);
      assertNotSame(stringBetter11, stringBetter13);
      assertNotSame(stringBetter11, stringBetter7);
      assertNotSame(stringBetter11, stringBetter1);
      assertNotSame(stringBetter11, stringBetter8);
      assertNotSame(stringBetter11, stringBetter15);
      assertNotSame(stringBetter11, stringBetter4);
      assertNotSame(stringBetter11, stringBetter2);
      assertNotSame(stringBetter11, stringBetter14);
      assertNotSame(stringBetter11, stringBetter6);
      assertNotSame(stringBetter11, stringBetter9);
      assertNotSame(stringBetter11, stringBetter12);
      assertNotSame(stringBetter11, stringBetter0);
      assertNotSame(stringBetter11, stringBetter5);
      assertNotSame(stringBetter14, stringBetter15);
      assertNotSame(stringBetter14, stringBetter8);
      assertNotSame(stringBetter14, stringBetter6);
      assertNotSame(stringBetter14, stringBetter0);
      assertNotSame(stringBetter14, stringBetter5);
      assertNotSame(stringBetter14, stringBetter11);
      assertNotSame(stringBetter14, stringBetter12);
      assertNotSame(stringBetter14, stringBetter4);
      assertNotSame(stringBetter14, stringBetter2);
      assertNotSame(stringBetter14, stringBetter13);
      assertNotSame(stringBetter14, stringBetter10);
      assertNotSame(stringBetter14, stringBetter7);
      assertNotSame(stringBetter14, stringBetter3);
      assertNotSame(stringBetter14, stringBetter1);
      assertNotSame(stringBetter14, stringBetter9);
      assertNotSame(stringBetter15, stringBetter0);
      assertNotSame(stringBetter15, stringBetter14);
      assertNotSame(stringBetter15, stringBetter6);
      assertNotSame(stringBetter15, stringBetter9);
      assertNotSame(stringBetter15, stringBetter10);
      assertNotSame(stringBetter15, stringBetter13);
      assertNotSame(stringBetter15, stringBetter3);
      assertNotSame(stringBetter15, stringBetter5);
      assertNotSame(stringBetter15, stringBetter12);
      assertNotSame(stringBetter15, stringBetter11);
      assertNotSame(stringBetter15, stringBetter4);
      assertNotSame(stringBetter15, stringBetter8);
      assertNotSame(stringBetter15, stringBetter2);
      assertNotSame(stringBetter15, stringBetter1);
      assertNotSame(stringBetter15, stringBetter7);
      assertNotNull(stringBetter15);
      assertFalse(stringBetter0.equals((Object)stringBetter10));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter13));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter14));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter11));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter12));
      assertFalse(stringBetter11.equals((Object)stringBetter10));
      assertFalse(stringBetter11.equals((Object)stringBetter3));
      assertFalse(stringBetter11.equals((Object)stringBetter13));
      assertFalse(stringBetter11.equals((Object)stringBetter7));
      assertFalse(stringBetter11.equals((Object)stringBetter1));
      assertFalse(stringBetter11.equals((Object)stringBetter8));
      assertFalse(stringBetter11.equals((Object)stringBetter4));
      assertFalse(stringBetter11.equals((Object)stringBetter2));
      assertFalse(stringBetter11.equals((Object)stringBetter14));
      assertFalse(stringBetter11.equals((Object)stringBetter6));
      assertFalse(stringBetter11.equals((Object)stringBetter9));
      assertFalse(stringBetter11.equals((Object)stringBetter12));
      assertFalse(stringBetter11.equals((Object)stringBetter0));
      assertFalse(stringBetter11.equals((Object)stringBetter5));
      assertFalse(stringBetter14.equals((Object)stringBetter8));
      assertFalse(stringBetter14.equals((Object)stringBetter6));
      assertFalse(stringBetter14.equals((Object)stringBetter0));
      assertFalse(stringBetter14.equals((Object)stringBetter5));
      assertFalse(stringBetter14.equals((Object)stringBetter11));
      assertFalse(stringBetter14.equals((Object)stringBetter12));
      assertFalse(stringBetter14.equals((Object)stringBetter4));
      assertFalse(stringBetter14.equals((Object)stringBetter2));
      assertFalse(stringBetter14.equals((Object)stringBetter13));
      assertFalse(stringBetter14.equals((Object)stringBetter10));
      assertFalse(stringBetter14.equals((Object)stringBetter7));
      assertFalse(stringBetter14.equals((Object)stringBetter3));
      assertFalse(stringBetter14.equals((Object)stringBetter1));
      assertFalse(stringBetter14.equals((Object)stringBetter9));
      assertFalse(stringBetter15.equals((Object)stringBetter0));
      assertFalse(stringBetter15.equals((Object)stringBetter14));
      assertFalse(stringBetter15.equals((Object)stringBetter6));
      assertFalse(stringBetter15.equals((Object)stringBetter9));
      assertFalse(stringBetter15.equals((Object)stringBetter10));
      assertFalse(stringBetter15.equals((Object)stringBetter13));
      assertFalse(stringBetter15.equals((Object)stringBetter3));
      assertFalse(stringBetter15.equals((Object)stringBetter5));
      assertFalse(stringBetter15.equals((Object)stringBetter12));
      assertFalse(stringBetter15.equals((Object)stringBetter11));
      assertFalse(stringBetter15.equals((Object)stringBetter4));
      assertFalse(stringBetter15.equals((Object)stringBetter8));
      assertFalse(stringBetter15.equals((Object)stringBetter2));
      assertFalse(stringBetter15.equals((Object)stringBetter1));
      assertFalse(stringBetter15.equals((Object)stringBetter7));
      
      String string0 = stringBetter11.toString();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter11.toString());
      assertEquals("", stringBetter11.getStr());
      assertEquals("", string0);
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter13);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter15);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter14);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter11);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter12);
      assertNotSame(stringBetter11, stringBetter10);
      assertNotSame(stringBetter11, stringBetter3);
      assertNotSame(stringBetter11, stringBetter13);
      assertNotSame(stringBetter11, stringBetter7);
      assertNotSame(stringBetter11, stringBetter1);
      assertNotSame(stringBetter11, stringBetter8);
      assertNotSame(stringBetter11, stringBetter15);
      assertNotSame(stringBetter11, stringBetter4);
      assertNotSame(stringBetter11, stringBetter2);
      assertNotSame(stringBetter11, stringBetter14);
      assertNotSame(stringBetter11, stringBetter6);
      assertNotSame(stringBetter11, stringBetter9);
      assertNotSame(stringBetter11, stringBetter12);
      assertNotSame(stringBetter11, stringBetter0);
      assertNotSame(stringBetter11, stringBetter5);
      assertNotNull(string0);
      assertFalse(stringBetter0.equals((Object)stringBetter10));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter13));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter15));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter14));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter11));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter12));
      assertFalse(stringBetter11.equals((Object)stringBetter10));
      assertFalse(stringBetter11.equals((Object)stringBetter3));
      assertFalse(stringBetter11.equals((Object)stringBetter13));
      assertFalse(stringBetter11.equals((Object)stringBetter7));
      assertFalse(stringBetter11.equals((Object)stringBetter1));
      assertFalse(stringBetter11.equals((Object)stringBetter8));
      assertFalse(stringBetter11.equals((Object)stringBetter15));
      assertFalse(stringBetter11.equals((Object)stringBetter4));
      assertFalse(stringBetter11.equals((Object)stringBetter2));
      assertFalse(stringBetter11.equals((Object)stringBetter14));
      assertFalse(stringBetter11.equals((Object)stringBetter6));
      assertFalse(stringBetter11.equals((Object)stringBetter9));
      assertFalse(stringBetter11.equals((Object)stringBetter12));
      assertFalse(stringBetter11.equals((Object)stringBetter0));
      assertFalse(stringBetter11.equals((Object)stringBetter5));
      
      StringBetter stringBetter16 = stringBetter1.white();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[38m\u001B[0m", stringBetter16.toString());
      assertEquals("\u001B[38m\u001B[0m", stringBetter16.getStr());
      assertEquals("", stringBetter1.toString());
      assertEquals("", stringBetter1.getStr());
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter16);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter13);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter15);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter14);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter11);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter12);
      assertNotSame(stringBetter16, stringBetter5);
      assertNotSame(stringBetter16, stringBetter12);
      assertNotSame(stringBetter16, stringBetter13);
      assertNotSame(stringBetter16, stringBetter10);
      assertNotSame(stringBetter16, stringBetter8);
      assertNotSame(stringBetter16, stringBetter3);
      assertNotSame(stringBetter16, stringBetter6);
      assertNotSame(stringBetter16, stringBetter4);
      assertNotSame(stringBetter16, stringBetter11);
      assertNotSame(stringBetter16, stringBetter7);
      assertNotSame(stringBetter16, stringBetter2);
      assertNotSame(stringBetter16, stringBetter15);
      assertNotSame(stringBetter16, stringBetter0);
      assertNotSame(stringBetter16, stringBetter14);
      assertNotSame(stringBetter16, stringBetter1);
      assertNotSame(stringBetter16, stringBetter9);
      assertNotSame(stringBetter1, stringBetter13);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter5);
      assertNotSame(stringBetter1, stringBetter10);
      assertNotSame(stringBetter1, stringBetter16);
      assertNotSame(stringBetter1, stringBetter14);
      assertNotSame(stringBetter1, stringBetter8);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter11);
      assertNotSame(stringBetter1, stringBetter12);
      assertNotSame(stringBetter1, stringBetter7);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter1, stringBetter15);
      assertNotSame(stringBetter1, stringBetter6);
      assertNotSame(stringBetter1, stringBetter9);
      assertNotNull(stringBetter16);
      assertFalse(stringBetter0.equals((Object)stringBetter10));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter13));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter15));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter14));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter11));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter12));
      assertFalse(stringBetter16.equals((Object)stringBetter5));
      assertFalse(stringBetter16.equals((Object)stringBetter12));
      assertFalse(stringBetter16.equals((Object)stringBetter13));
      assertFalse(stringBetter16.equals((Object)stringBetter10));
      assertFalse(stringBetter16.equals((Object)stringBetter8));
      assertFalse(stringBetter16.equals((Object)stringBetter3));
      assertFalse(stringBetter16.equals((Object)stringBetter6));
      assertFalse(stringBetter16.equals((Object)stringBetter4));
      assertFalse(stringBetter16.equals((Object)stringBetter11));
      assertFalse(stringBetter16.equals((Object)stringBetter7));
      assertFalse(stringBetter16.equals((Object)stringBetter2));
      assertFalse(stringBetter16.equals((Object)stringBetter15));
      assertFalse(stringBetter16.equals((Object)stringBetter0));
      assertFalse(stringBetter16.equals((Object)stringBetter14));
      assertFalse(stringBetter16.equals((Object)stringBetter1));
      assertFalse(stringBetter16.equals((Object)stringBetter9));
      assertFalse(stringBetter1.equals((Object)stringBetter13));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter10));
      assertFalse(stringBetter1.equals((Object)stringBetter14));
      assertFalse(stringBetter1.equals((Object)stringBetter8));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter11));
      assertFalse(stringBetter1.equals((Object)stringBetter12));
      assertFalse(stringBetter1.equals((Object)stringBetter7));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
      assertFalse(stringBetter1.equals((Object)stringBetter15));
      assertFalse(stringBetter1.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter9));
      
      StringBetter stringBetter17 = stringBetter16.roxo();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[38m\u001B[0m", stringBetter16.toString());
      assertEquals("\u001B[38m\u001B[0m", stringBetter16.getStr());
      assertEquals("", stringBetter1.toString());
      assertEquals("", stringBetter1.getStr());
      assertEquals("\u001B[35m\u001B[38m\u001B[0m\u001B[0m", stringBetter17.getStr());
      assertEquals("\u001B[35m\u001B[38m\u001B[0m\u001B[0m", stringBetter17.toString());
      assertNotSame(stringBetter0, stringBetter10);
      assertNotSame(stringBetter0, stringBetter16);
      assertNotSame(stringBetter0, stringBetter7);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter13);
      assertNotSame(stringBetter0, stringBetter8);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter9);
      assertNotSame(stringBetter0, stringBetter17);
      assertNotSame(stringBetter0, stringBetter15);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter14);
      assertNotSame(stringBetter0, stringBetter6);
      assertNotSame(stringBetter0, stringBetter11);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter5);
      assertNotSame(stringBetter0, stringBetter12);
      assertNotSame(stringBetter16, stringBetter5);
      assertNotSame(stringBetter16, stringBetter12);
      assertNotSame(stringBetter16, stringBetter13);
      assertNotSame(stringBetter16, stringBetter10);
      assertNotSame(stringBetter16, stringBetter8);
      assertNotSame(stringBetter16, stringBetter3);
      assertNotSame(stringBetter16, stringBetter6);
      assertNotSame(stringBetter16, stringBetter4);
      assertNotSame(stringBetter16, stringBetter11);
      assertNotSame(stringBetter16, stringBetter7);
      assertNotSame(stringBetter16, stringBetter17);
      assertNotSame(stringBetter16, stringBetter2);
      assertNotSame(stringBetter16, stringBetter15);
      assertNotSame(stringBetter16, stringBetter0);
      assertNotSame(stringBetter16, stringBetter14);
      assertNotSame(stringBetter16, stringBetter1);
      assertNotSame(stringBetter16, stringBetter9);
      assertNotSame(stringBetter1, stringBetter13);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter5);
      assertNotSame(stringBetter1, stringBetter10);
      assertNotSame(stringBetter1, stringBetter16);
      assertNotSame(stringBetter1, stringBetter14);
      assertNotSame(stringBetter1, stringBetter8);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter11);
      assertNotSame(stringBetter1, stringBetter12);
      assertNotSame(stringBetter1, stringBetter7);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter1, stringBetter17);
      assertNotSame(stringBetter1, stringBetter15);
      assertNotSame(stringBetter1, stringBetter6);
      assertNotSame(stringBetter1, stringBetter9);
      assertNotSame(stringBetter17, stringBetter0);
      assertNotSame(stringBetter17, stringBetter15);
      assertNotSame(stringBetter17, stringBetter14);
      assertNotSame(stringBetter17, stringBetter11);
      assertNotSame(stringBetter17, stringBetter2);
      assertNotSame(stringBetter17, stringBetter1);
      assertNotSame(stringBetter17, stringBetter7);
      assertNotSame(stringBetter17, stringBetter8);
      assertNotSame(stringBetter17, stringBetter4);
      assertNotSame(stringBetter17, stringBetter13);
      assertNotSame(stringBetter17, stringBetter5);
      assertNotSame(stringBetter17, stringBetter12);
      assertNotSame(stringBetter17, stringBetter3);
      assertNotSame(stringBetter17, stringBetter10);
      assertNotSame(stringBetter17, stringBetter16);
      assertNotSame(stringBetter17, stringBetter6);
      assertNotSame(stringBetter17, stringBetter9);
      assertNotNull(stringBetter17);
      assertFalse(stringBetter0.equals((Object)stringBetter10));
      assertFalse(stringBetter0.equals((Object)stringBetter16));
      assertFalse(stringBetter0.equals((Object)stringBetter7));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter13));
      assertFalse(stringBetter0.equals((Object)stringBetter8));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter9));
      assertFalse(stringBetter0.equals((Object)stringBetter15));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter14));
      assertFalse(stringBetter0.equals((Object)stringBetter6));
      assertFalse(stringBetter0.equals((Object)stringBetter11));
      assertFalse(stringBetter0.equals((Object)stringBetter4));
      assertFalse(stringBetter0.equals((Object)stringBetter5));
      assertFalse(stringBetter0.equals((Object)stringBetter12));
      assertFalse(stringBetter16.equals((Object)stringBetter5));
      assertFalse(stringBetter16.equals((Object)stringBetter12));
      assertFalse(stringBetter16.equals((Object)stringBetter13));
      assertFalse(stringBetter16.equals((Object)stringBetter10));
      assertFalse(stringBetter16.equals((Object)stringBetter8));
      assertFalse(stringBetter16.equals((Object)stringBetter3));
      assertFalse(stringBetter16.equals((Object)stringBetter6));
      assertFalse(stringBetter16.equals((Object)stringBetter4));
      assertFalse(stringBetter16.equals((Object)stringBetter11));
      assertFalse(stringBetter16.equals((Object)stringBetter7));
      assertFalse(stringBetter16.equals((Object)stringBetter2));
      assertFalse(stringBetter16.equals((Object)stringBetter15));
      assertFalse(stringBetter16.equals((Object)stringBetter0));
      assertFalse(stringBetter16.equals((Object)stringBetter14));
      assertFalse(stringBetter16.equals((Object)stringBetter1));
      assertFalse(stringBetter16.equals((Object)stringBetter9));
      assertFalse(stringBetter1.equals((Object)stringBetter13));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter5));
      assertFalse(stringBetter1.equals((Object)stringBetter10));
      assertFalse(stringBetter1.equals((Object)stringBetter16));
      assertFalse(stringBetter1.equals((Object)stringBetter14));
      assertFalse(stringBetter1.equals((Object)stringBetter8));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter11));
      assertFalse(stringBetter1.equals((Object)stringBetter12));
      assertFalse(stringBetter1.equals((Object)stringBetter7));
      assertFalse(stringBetter1.equals((Object)stringBetter4));
      assertFalse(stringBetter1.equals((Object)stringBetter15));
      assertFalse(stringBetter1.equals((Object)stringBetter6));
      assertFalse(stringBetter1.equals((Object)stringBetter9));
      assertFalse(stringBetter17.equals((Object)stringBetter0));
      assertFalse(stringBetter17.equals((Object)stringBetter15));
      assertFalse(stringBetter17.equals((Object)stringBetter14));
      assertFalse(stringBetter17.equals((Object)stringBetter11));
      assertFalse(stringBetter17.equals((Object)stringBetter2));
      assertFalse(stringBetter17.equals((Object)stringBetter1));
      assertFalse(stringBetter17.equals((Object)stringBetter7));
      assertFalse(stringBetter17.equals((Object)stringBetter8));
      assertFalse(stringBetter17.equals((Object)stringBetter4));
      assertFalse(stringBetter17.equals((Object)stringBetter13));
      assertFalse(stringBetter17.equals((Object)stringBetter5));
      assertFalse(stringBetter17.equals((Object)stringBetter12));
      assertFalse(stringBetter17.equals((Object)stringBetter3));
      assertFalse(stringBetter17.equals((Object)stringBetter10));
      assertFalse(stringBetter17.equals((Object)stringBetter16));
      assertFalse(stringBetter17.equals((Object)stringBetter6));
      assertFalse(stringBetter17.equals((Object)stringBetter9));
      
      // Undeclared exception!
      stringBetter17.repeat(3419);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertNotNull(stringBetter0);
      
      String string0 = stringBetter0.getStr();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertNotNull(stringBetter0);
      
      String string0 = stringBetter0.toString();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = stringBetter0.toString();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", string1);
      assertNotNull(string1);
      
      StringBetter stringBetter1 = stringBetter0.blue();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[34m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[34m\u001B[0m", stringBetter1.toString());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotNull(stringBetter1);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      
      String string2 = stringBetter0.toString();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("", string2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotNull(string2);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("");
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.blink();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[5m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[5m\u001B[0m", stringBetter1.toString());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotNull(stringBetter1);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      
      StringBetter stringBetter2 = stringBetter0.black();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[30m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[30m\u001B[0m", stringBetter2.getStr());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotNull(stringBetter2);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.under();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertEquals("\u001B[4m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[4m\u001B[0m", stringBetter1.toString());
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotNull(stringBetter1);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      
      StringBetter stringBetter2 = stringBetter1.hideCursor();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertEquals("\u001B[4m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[4m\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[4m\u001B[0m\u001B[?25l", stringBetter2.toString());
      assertEquals("\u001B[4m\u001B[0m\u001B[?25l", stringBetter2.getStr());
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotNull(stringBetter2);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("|5!(fp+j T");
      StringBetter stringBetter1 = stringBetter0.roxo();
      assertEquals("\u001B[35m|5!(fp+j T\u001B[0m", stringBetter1.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.blue();
      StringBetter stringBetter2 = stringBetter1.showCursor();
      assertEquals("\u001B[34m\u001B[0m\u001B[?25h", stringBetter2.getStr());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.green();
      StringBetter stringBetter2 = stringBetter1.black();
      assertEquals("\u001B[30m\u001B[32m\u001B[0m\u001B[0m", stringBetter2.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.cyan();
      StringBetter stringBetter2 = stringBetter1.orange();
      StringBetter stringBetter3 = stringBetter2.append("");
      stringBetter3.cyan();
      StringBetter stringBetter4 = stringBetter2.white();
      StringBetter stringBetter5 = stringBetter4.grey();
      StringBetter stringBetter6 = stringBetter0.bold();
      assertEquals("\u001B[1m\u001B[0m", stringBetter6.toString());
      
      stringBetter5.repeat(3484);
      assertEquals("\u001B[37m\u001B[38m\u001B[33m\u001B[36m\u001B[0m\u001B[0m\u001B[0m\u001B[0m", stringBetter5.getStr());
      
      StringBetter stringBetter7 = stringBetter0.red();
      StringBetter stringBetter8 = stringBetter2.showCursor();
      assertEquals("\u001B[33m\u001B[36m\u001B[0m\u001B[0m\u001B[?25h", stringBetter8.getStr());
      
      StringBetter stringBetter9 = stringBetter7.hideCursor();
      assertEquals("\u001B[31m\u001B[0m\u001B[?25l", stringBetter9.getStr());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("E");
      StringBetter stringBetter1 = stringBetter0.cyan();
      stringBetter1.cyan();
      StringBetter stringBetter2 = stringBetter1.black();
      StringBetter stringBetter3 = stringBetter0.green();
      StringBetter stringBetter4 = new StringBetter("E");
      StringBetter stringBetter5 = stringBetter4.blink();
      assertEquals("\u001B[5mE\u001B[0m", stringBetter5.getStr());
      
      String string0 = stringBetter2.toString();
      assertEquals("\u001B[30m\u001B[36mE\u001B[0m\u001B[0m", string0);
      
      stringBetter0.cyan();
      StringBetter stringBetter6 = stringBetter3.blue();
      StringBetter stringBetter7 = stringBetter6.roxo();
      assertEquals("\u001B[35m\u001B[34m\u001B[32mE\u001B[0m\u001B[0m\u001B[0m", stringBetter7.getStr());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.bold();
      String string0 = stringBetter1.getStr();
      assertEquals("\u001B[1m\u001B[0m", string0);
  }
}
