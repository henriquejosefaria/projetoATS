/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 10 16:01:30 GMT 2019
 */

package main.java.view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import main.java.view.Table;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Table_ESTest extends Table_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Table<String> table0 = new Table<String>(linkedList0, linkedList1, linkedList1);
      linkedList1.add("+--+\n|  |\n+--+\n");
      linkedList1.add("ES@q)<#]<I2fq");
      // Undeclared exception!
      try { 
        table0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<List<LinkedList<String>>> linkedList2 = new LinkedList<List<LinkedList<String>>>();
      linkedList1.offer("+--+\n|  |\n+--+\n");
      Table<LinkedList<String>> table0 = new Table<LinkedList<String>>(linkedList2, linkedList0, linkedList1);
      String string0 = table0.toString();
      assertEquals("+--+-----------------+\n|  | +--+\n|  |\n+--+\n |\n+--+-----------------+\n", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Table<String> table0 = new Table<String>(linkedList0, linkedList1, linkedList1);
      linkedList1.add("HBGi{20)P");
      linkedList0.add((List<String>) linkedList1);
      linkedList0.add((List<String>) linkedList1);
      linkedList1.add("+-----------+-----------------------------+\n|           | HBGi{20)P                   |\n+-----------+-----------------------------+\n| HBGi{20)P | java.lang.String@0000000003 |\n+-----------+-----------------------------+\n");
      linkedList1.add("+-----------+-----------------------------+\n|           | HBGi{20)P                   |\n+-----------+-----------------------------+\n| HBGi{20)P | java.lang.String@0000000003 |\n+-----------+-----------------------------+\n");
      linkedList0.add((List<String>) linkedList1);
      table0.toString();
      // Undeclared exception!
      table0.toString();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = linkedList0.subList(0, 0);
      linkedList0.add("+--+\n|  |\n+--+\n");
      LinkedList<List<Object>> linkedList1 = new LinkedList<List<Object>>();
      Table<Object> table0 = new Table<Object>(linkedList1, list0, list0);
      // Undeclared exception!
      try { 
        table0.toString();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("+--+\n|  |\n+--+\n");
      Table<LinkedList<Object>> table0 = new Table<LinkedList<Object>>((List<List<LinkedList<Object>>>) null, linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        table0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.view.Table", e);
      }
  }
}
