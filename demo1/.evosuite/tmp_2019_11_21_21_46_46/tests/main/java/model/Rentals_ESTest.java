/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 21 22:46:26 GMT 2019
 */

package main.java.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDateTime;
import java.util.List;
import main.java.model.Car;
import main.java.model.Client;
import main.java.model.Owner;
import main.java.model.Rental;
import main.java.model.Rentals;
import main.java.utils.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Rentals_ESTest extends Rentals_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("l{gFWp,VJh-jC#:SUU", "main.java.model.Client", "", (-84), "main.java.model.Client");
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      List<Rental> list0 = rentals0.getRentalListOwner(owner0, (LocalDateTime) null, localDateTime0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "ELECTRIC", "main.java.model.Client", "mt&6", "main.java.model.Client", (-84));
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      List<Rental> list0 = rentals0.getRentalListClient(client0, localDateTime0, (LocalDateTime) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner(",(e~mT*LHI5\t/!u`", "main.java.model.Rentals", ",(e~mT*LHI5\t/!u`", 1703, (String) null);
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(1628.573544112872);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 0.0, 1174.792405720365, 1703, 1572, point0, "main.java.model.Rentals");
      Client client0 = new Client(point0, (String) null, "3$hxdnulVTHoSY(o", "3$hxdnulVTHoSY(o", ",(e~mT*LHI5\t/!u`", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      LocalDateTime localDateTime0 = rental0.getDate();
      double double1 = rentals0.getTotalBilledCar(car0, localDateTime0, (LocalDateTime) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "main.java.model.Client", "main.java.model.Client", "s&", "main.java.model.Client", 0);
      Owner owner0 = new Owner("main.java.model.Client", "main.java.model.Client", "", 0, "s&");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Car car0 = new Car("", owner0, car_CarType0, (-551.9716398), 0.0, 0, 142, point0, "main.java.model.Rental");
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListOwner(owner0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("Tempo Total: ", "Tempo Total: ", "Tempo Total: ", 3, "Tempo Total: ");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(1.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Tempo Total: ", owner0, car_CarType0, 3, 0.1, 0.1, 3, point0, "Tempo Total: ");
      Client client0 = new Client(point0, "Tempo Total: ", "Tempo Total: ", "Tempo Total: ", "Tempo Total: ", 1);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListClient(client0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("Tempo Total: ", "Tempo Total: ", "Tempo Total: ", 3, "Tempo Total: ");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(1.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Tempo Total: ", owner0, car_CarType0, 3, 0.1, 0.1, 3, point0, "Tempo Total: ");
      Client client0 = new Client(point0, "Tempo Total: ", "Tempo Total: ", "Tempo Total: ", "Tempo Total: ", 1);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListClient("Tempo Total: ");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("Tempo Total: ", "Tempo Total: ", "Tempo Total: ", 3, "Tempo Total: ");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(1.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Tempo Total: ", owner0, car_CarType0, 3, 0.1, 0.1, 3, point0, "Tempo Total: ");
      Client client0 = new Client(point0, "Tempo Total: ", "Tempo Total: ", "Tempo Total: ", "Tempo Total: ", 1);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      // Undeclared exception!
      try { 
        rentals0.getTotalBilledCar(car0, (LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getTotalBilledCar((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("&)J<%3Nc24 Xi_", "Gu7p8JKoY", "", 0, "Gu7p8JKoY");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = Double.valueOf(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("&)J<%3Nc24 Xi_", owner0, car_CarType0, 0, 0.0, 0, 0, point0, "gvhv-=(HSp$qlQkDx");
      Client client0 = new Client(point0, "g<0][~U", "", "g<0][~U", "gvhv-=(HSp$qlQkDx", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      // Undeclared exception!
      try { 
        rentals0.getRentalListOwner(owner0, (LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getRentalListOwner((Owner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient((Client) null, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient((Client) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("", (String) null, "", 0, (String) null);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 127.09747457508828, 0, 0.0, (-1155), point0, "");
      Client client0 = new Client(point0, (String) null, "Tempo Total: ", "Tempo Total: ", "", (-1811812819));
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient("H1,F;r<r(m(?J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("yd&A&?(Eq", "yd&A&?(Eq", "&<#rt$", 3273, "S}rK B'&{%_ML>&$W");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("yd&A&?(Eq", owner0, car_CarType0, 0.1, 0.1, 3273, 3273, point0, "yd&A&?(Eq");
      Rental rental0 = new Rental(car0, (Client) null, point0);
      rentals0.addRental(rental0);
      Rentals rentals1 = new Rentals();
      Rental rental1 = new Rental(car0, (Client) null, point0);
      rentals1.addRental(rental1);
      // Undeclared exception!
      try { 
        rentals0.equals(rentals1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Rentals rentals1 = new Rentals();
      boolean boolean0 = rentals0.equals(rentals1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      boolean boolean0 = rentals0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      boolean boolean0 = rentals0.equals(rentals0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      boolean boolean0 = rentals0.equals("Tempo Total: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(1.2);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "Tempo Total: ", "Tempo Total: ", "Tempo Total: ", "Tempo Total: ", 1);
      List<Rental> list0 = rentals0.getRentalListClient(client0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("main.java.utils.Point", "main.java.utils.Point", "main.java.utils.Point", 0, "main.java.utils.Point");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("main.java.utils.Point", owner0, car_CarType0, 0, 0, 0, 0, point0, "main.java.utils.Point");
      double double1 = rentals0.getTotalBilledCar(car0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      List<Rental> list0 = rentals0.getRentalListClient("main.java.model.Rentals");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      rentals0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("main.java.utils.Point", "main.java.utils.Point", "main.java.utils.Point", 0, "main.java.utils.Point");
      List<Rental> list0 = rentals0.getRentalListOwner(owner0);
      assertEquals(0, list0.size());
  }
}
