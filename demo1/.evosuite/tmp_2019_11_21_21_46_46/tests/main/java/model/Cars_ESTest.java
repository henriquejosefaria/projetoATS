/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 21 22:37:31 GMT 2019
 */

package main.java.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import main.java.model.Car;
import main.java.model.Cars;
import main.java.model.Owner;
import main.java.utils.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cars_ESTest extends Cars_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-721.10592));
      Point point0 = new Point(double0, double0);
      Point point1 = point0.myclone();
      try { 
        cars0.getCar(point0, point1, (-2095.8818002), car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cars cars0 = new Cars();
      Double double0 = new Double(0.5);
      Point point0 = new Point(double0, double0);
      Point point1 = point0.myclone();
      Car.CarType car_CarType0 = Car.CarType.ANY;
      try { 
        cars0.getCar("MaisBarato", point1, point0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cars cars0 = new Cars();
      Owner owner0 = new Owner("_)H`rCP3", "MaisBarato", "_)H`rCP3", (-964), "main.java.exceptions.CarExistsException");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double((-964));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("MaisBarato", owner0, car_CarType0, (-964), 0.1, 0.1, (-964), point0, "");
      cars0.addCar(car0);
      List<Car> list0 = cars0.listOfCarType(car_CarType0);
      assertFalse(list0.contains(car0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cars cars0 = new Cars();
      Owner owner0 = new Owner("main.java.model.Car", "m.\"sM%#", "`Ic'7&Sq*iRA", 2835, (String) null);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-721.10592));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-2136.1918), 2835, (-2136.1918), 2, point0, "m.\"sM%#");
      cars0.addCar(car0);
      Car car1 = cars0.getCar(point0, point0, 0.0, car_CarType0);
      assertSame(car1, car0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cars cars0 = new Cars();
      Owner owner0 = new Owner("main.java.model.Car", "m.\"sM%#", "`Ic'7&Sq*iRA", 2835, (String) null);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-721.10592));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-2136.1918), 2835, (-2136.1918), 2, point0, "m.\"sM%#");
      cars0.addCar(car0);
      Car car1 = cars0.getCar(point0, (-636), car_CarType0);
      assertSame(car1, car0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Owner owner0 = new Owner("Vhs?5HQ'$", "Vhs?5HQ'$", "m,LX^x4kdl[}U9J", (-2074), "m,LX^x4kdl[}U9J");
      Car car0 = new Car("Vhs?5HQ'$", owner0, car_CarType0, 2581.83655, (-2074), (-2097.074779623673), (-4048), (Point) null, "\u001B[?25h");
      cars0.addCar(car0);
      // Undeclared exception!
      try { 
        cars0.getCar((Point) null, 2581.83655, car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cars cars0 = new Cars();
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      // Undeclared exception!
      try { 
        cars0.getCar((String) null, point0, point0, car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Cars cars0 = new Cars();
      // Undeclared exception!
      try { 
        cars0.addCar((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cars cars0 = new Cars();
      Cars cars1 = new Cars();
      boolean boolean0 = cars1.equals(cars0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cars cars0 = new Cars();
      boolean boolean0 = cars0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cars cars0 = new Cars();
      boolean boolean0 = cars0.equals(cars0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cars cars0 = new Cars();
      Object object0 = new Object();
      boolean boolean0 = cars0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cars cars0 = new Cars();
      Double double0 = new Double((-2553.9687));
      Point point0 = new Point(double0, double0);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      try { 
        cars0.getCar("MaisPerto", (Point) null, point0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-964));
      Point point0 = new Point(double0, double0);
      try { 
        cars0.getCar("MabsPerto", point0, point0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cars cars0 = new Cars();
      try { 
        cars0.searchCar("<]-64?lt[u%|QK]gY");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cars cars0 = new Cars();
      Owner owner0 = new Owner("vMaisBaBrato", "vMaisBaBrato", "vMaisBaBrato", (-964), "vMaisBaBrato");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-964));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("vMaisBaBrato", owner0, car_CarType0, (-964), (-964), (-964), (-964), point0, "vMaisBaBrato");
      cars0.addCar(car0);
      Car car1 = cars0.searchCar("vMaisBaBrato");
      assertSame(car1, car0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Cars cars0 = new Cars();
      Double double0 = new Double((-2829.12));
      Owner owner0 = new Owner("l#!-ZTB't0n6u.f_r", "RhV'1EPTGbfuAx`", "main.java.model.Cars", (-4736), "RhV'1EPTGbfuAx`");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("l#!-ZTB't0n6u.f_r", owner0, car_CarType0, 700.5, 333.829, (-2829.12), (-1719145501), point0, "main.java.model.Cars");
      cars0.addCar(car0);
      try { 
        cars0.addCar(car0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Owner owner0 = new Owner("", "", "", 5, "OYyb*lran)d");
      Car car0 = new Car("", owner0, car_CarType0, (-721.10592), (-2069.584419098071), 5, (-3737), (Point) null, "OYyb*lran)d");
      cars0.addCar(car0);
      Double double0 = new Double((-721.10592));
      Point point0 = new Point(double0, double0);
      // Undeclared exception!
      try { 
        cars0.getCar(point0, point0, (-721.10592), car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      List<Car> list0 = cars0.listOfCarType(car_CarType0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cars cars0 = new Cars();
      cars0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cars cars0 = new Cars();
      Cars cars1 = cars0.myclone();
      assertNotSame(cars1, cars0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      try { 
        cars0.getCar((Point) null, 2581.83655, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Cars", e);
      }
  }
}
