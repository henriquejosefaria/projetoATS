/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 10 18:31:33 GMT 2019
 */

package main.java.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import main.java.model.Car;
import main.java.model.CarModel;
import main.java.model.Client;
import main.java.model.Owner;
import main.java.model.Rental;
import main.java.utils.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Car_ESTest extends Car_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 2919, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2919, "");
      Double double0 = new Double(2919);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 0.0, 3538.8324, 2919, point0);
      car0.rate(2919);
      Client client0 = new Client(point0, "(sds", "", "(sds", "(sds", 4736);
      Car car1 = car0.myclone();
      Rental rental0 = new Rental(car1, client0, point0);
      rental0.rate(0, 0);
      boolean boolean0 = car0.equals(car1);
      assertEquals(0, owner0.getRates());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.0, "nI");
      Double double0 = new Double((-1235.592056813));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("nI", (Owner) null, carModel0, 2678.25807, (-2074.968970573), 0, point0);
      Car car1 = car0.myclone();
      boolean boolean0 = car1.equals(car0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 2919, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-15.829658238083603), "");
      Double double0 = new Double((-15.829658238083603));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 0.0, 3538.8324, 2919, point0);
      Car car1 = car0.myclone();
      Double double1 = new Double((-146.39469667931));
      Point point1 = new Point(double1, double1);
      car1.setPosition(point1, (-1951.0));
      boolean boolean0 = car0.equals(car1);
      assertFalse(car1.equals((Object)car0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Owner owner0 = new Owner("\n", "", "z*~ U\"#`-6pvm5Akk,Y", 2978, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.1, "");
      Double double0 = new Double(0L);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("z*~ U\"#`-6pvm5Akk,Y", owner0, carModel0, 2978, 0.1, 2978, point0);
      Car car1 = new Car("}=c=GP)+", owner0, carModel0, 2978, 0.1, 4125, point0);
      boolean boolean0 = car1.equals(car0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Owner owner0 = new Owner("%.2f", "%.2f", "%.2f", 2919, "%.2f");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-18.44077101181202), "%.2f");
      Double double0 = new Double((-18.44077101181202));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("%.2f", owner0, carModel0, (-18.44077101181202), (-18.44077101181202), 2919, point0);
      Car car1 = new Car("%.2f", owner0, carModel0, (-18.44077101181202), 2919, 2919, point0);
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
      assertFalse(car1.equals((Object)car0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.0, "nI");
      Double double0 = new Double((-1235.592056813));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("nI", (Owner) null, carModel0, 2678.25807, (-2074.968970573), 0, point0);
      Car car1 = new Car("nI", (Owner) null, carModel0, 606.66487761869, (-1615.0), 0, point0);
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 446, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 446, "");
      Double double0 = new Double(446);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 446, 446, 446, point0);
      Client client0 = new Client(point0, "", "", "", "", 446);
      Rental rental0 = new Rental(car0, client0, point0);
      String string0 = rental0.toFinalString();
      assertEquals("Tempo Total: 0.00 Horas\nCusto Total: 0.00\n\n\u001B[4m\u001B[0m", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Owner owner0 = new Owner("Tempo a p\u00E9      ", "Tempo a p\u00E9      ", "^7l>!XzjE$?ae=Fo;", (-419), "^7l>!XzjE$?ae=Fo;");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-419), "");
      Double double0 = new Double((-419));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Tempo a p\u00E9      ", owner0, carModel0, (-419), (-419), 100, point0);
      car0.rate((-1438), 0);
      assertEquals(0, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 609.1473958547891, "O/3YGm!J%p");
      Double double0 = new Double(609.1473958547891);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("O/3YGm!J%p", (Owner) null, carModel0, 609.1473958547891, 609.1473958547891, 0, point0);
      boolean boolean0 = car0.hasRange(point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Owner owner0 = new Owner("&J<S4S]r/c}[dG", ",pBxigV8", ",pBxigV8", 0, (String) null);
      Double double0 = new Double(0);
      Double double1 = new Double(1.2);
      Point point0 = new Point(double0, double1);
      Car car0 = new Car("&J<S4S]r/c}[dG", owner0, (CarModel) null, 0, 0, 0, point0);
      Point point1 = new Point(double1, double1);
      boolean boolean0 = car0.hasRange(point1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "-.tyZYrIX;i%j}+:Cs", "-.tyZYrIX;i%j}+:Cs", 0, "%.2f");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0, "-.tyZYrIX;i%j}+:Cs");
      Double double0 = new Double(293.32078948);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Q(;N4e{\"", owner0, carModel0, 0, 0, 0, point0);
      car0.rate((-1));
      car0.rate(0);
      Car car1 = car0.myclone();
      assertFalse(car1.equals((Object)car0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 2919, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-15.829658238083603), "");
      Double double0 = new Double((-15.829658238083603));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 0.0, 3538.8324, 2919, point0);
      boolean boolean0 = car0.isAvailable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 2919, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2919, "");
      Double double0 = new Double(2919);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 0.0, 3538.8324, 2919, point0);
      car0.swapState();
      boolean boolean0 = car0.isAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Owner owner0 = new Owner("", "", "/iB=dHc_F`", 0, (String) null);
      CarModel carModel0 = new CarModel((CarModel.CarType) null, 0, (String) null);
      Car car0 = new Car("", owner0, carModel0, 68.95900783, (-180.324669), 0, (Point) null);
      car0.getType();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Owner owner0 = new Owner("main.java.model.Car", "main.java.model.Car", (String) null, 699, "fVN>9l3ybF");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 699, "q");
      Double double0 = new Double(4.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("main.java.model.Car", owner0, carModel0, 699, 2279.063266, 0, point0);
      CarModel.CarType carModel_CarType1 = car0.getType();
      assertSame(carModel_CarType1, carModel_CarType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "-.tyZYrIX;i%j}+:Cs", "-.tyZYrIX;i%j}+:Cs", 0, "%.2f");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0, "-.tyZYrIX;i%j}+:Cs");
      Double double0 = new Double(293.32078948);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Q(;N4e{\"", owner0, carModel0, 0, 0, 0, point0);
      double double1 = car0.getRange();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Owner owner0 = new Owner("} 9)Sr%r-VIg", "} 9)Sr%r-VIg", "ZTO;v<,u,.YR>uAzm ", 377, "ZTO;v<,u,.YR>uAzm ");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-1128.7317), "} 9)Sr%r-VIg");
      Double double0 = new Double((-2676.13854265257));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("} 9)Sr%r-VIg", owner0, carModel0, 377, (-1128.7317), 3335, point0);
      double double1 = car0.getRange();
      assertEquals(3335.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Owner owner0 = new Owner("main.java.model.Car", "main.java.model.Car", "main.java.model.Car", (-3174), "main.java.model.Car");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.0, "|");
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("main.java.model.Car", owner0, carModel0, (-3174), 0.0, (-3174), point0);
      double double1 = car0.getRange();
      assertEquals((-3174.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Owner owner0 = new Owner("x`:N(", "r", "x`:N(", (-2560), "x`:N(");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-2560), "r");
      Car car0 = new Car("x`:N(", owner0, carModel0, 1368.86945, (-2760.5987037654654), (-2560), (Point) null);
      Point point0 = car0.getPosition();
      assertNull(point0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, "J0Zb]ldHK>b+YK", 0, "J0Zb]ldHK>b+YK");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0, "Tempo a p\u00E9      ");
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, carModel0, 0.0, 0, 0, point0);
      Point point1 = car0.getPosition();
      assertEquals(0.0, point1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Owner owner0 = new Owner("8x;9K\";,{~4?qQ", "8x;9K\";,{~4?qQ", "", (-934), "8x;9K\";,{~4?qQ");
      Double double0 = new Double(0.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("8x;9K\";,{~4?qQ", owner0, (CarModel) null, (-934), (-934), 0, point0);
      Point point1 = car0.getPosition();
      assertSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Owner owner0 = new Owner("HYBRID", "", "", (-2075), "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-2075), (String) null);
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(";vj:KZ!{v}kz", owner0, carModel0, 0.0, (-2075), (-2075), point0);
      Point point1 = car0.getPosition();
      assertSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "Yh36Hc", (String) null, 1014, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1014, "");
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, carModel0, 1014, 1014, 1014, point0);
      String string0 = car0.getOwnerID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Owner owner0 = new Owner("Z-V]vD@4/", "main.java.model.User", "main.java.model.User", 1094, "0c$");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2949.70130565, "%.2f");
      Double double0 = new Double(1094);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Z-V]vD@4/", owner0, carModel0, 1094, 1094, 1094, point0);
      String string0 = car0.getOwnerID();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Owner owner0 = new Owner("", "sn6RsTN^y*Xnl5n", "y|", (-1470), "sn6RsTN^y*Xnl5n");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-1470), "sn6RsTN^y*Xnl5n");
      Double double0 = new Double((-1470));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("^ch1}i+=+]gfM_ZoPo", owner0, carModel0, (-1470), 1.0, 0, point0);
      String string0 = car0.getOwnerID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, (String) null, 0, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.2, "");
      Double double0 = new Double(1225.39291);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, carModel0, 0, 0, 0, point0);
      String string0 = car0.getNumberPlate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Owner owner0 = new Owner("=", "=", "=", 2930, "=");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2930, "=");
      Double double0 = new Double(2930);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("=", owner0, carModel0, 2930, 2930, 2930, point0);
      String string0 = car0.getNumberPlate();
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 2919, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2919, "");
      Double double0 = new Double(2919);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 2919, 2919, 2919, point0);
      String string0 = car0.getNumberPlate();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Owner owner0 = new Owner("]p/Ym/B=?]Y", "]p/Ym/B=?]Y", "", (-1), "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.0, "");
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("eRG&6XSV~X;}sbx%h~", owner0, carModel0, 0.0, (-1.0), 0, point0);
      double double1 = car0.getBasePrice();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Owner owner0 = new Owner("", "", "/iB=dHc_F`", 0, (String) null);
      CarModel carModel0 = new CarModel((CarModel.CarType) null, 0, (String) null);
      Car car0 = new Car("", owner0, carModel0, 68.95900783, (-180.324669), 0, (Point) null);
      double double0 = car0.getBasePrice();
      assertEquals(68.95900783, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Owner owner0 = new Owner("%.2f", "main.java.model.Rental", "\n", (-1403), "main.java.model.Car");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.5, "%.2f");
      Double double0 = new Double((-3104.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("\n", owner0, carModel0, (-3104.0), 0.4, (-1403), point0);
      double double1 = car0.getBasePrice();
      assertEquals((-3104.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Owner owner0 = new Owner("", "", "/iB=dHc_F`", 0, (String) null);
      CarModel carModel0 = new CarModel((CarModel.CarType) null, 0, (String) null);
      Car car0 = new Car("", owner0, carModel0, 68.95900783, (-180.324669), 0, (Point) null);
      double double0 = car0.getAvgSpeed();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Owner owner0 = new Owner("urZsB/u@{E8J:`DGH", "urZsB/u@{E8J:`DGH", "urZsB/u@{E8J:`DGH", 417, "b");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 417, "b");
      Double double0 = new Double(3);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("urZsB/u@{E8J:`DGH", owner0, carModel0, 417, 0.0, 3, point0);
      double double1 = car0.getAvgSpeed();
      assertEquals(417.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Owner owner0 = new Owner("2#a^", "2#a^", "", (-1), "tl_<@00D");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-1), "");
      Double double0 = Double.valueOf(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("2#a^", owner0, carModel0, (-1), (-1), 1442, point0);
      double double1 = car0.getAvgSpeed();
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-2727), "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-2727), ")\"E%k{<?'");
      Car car0 = new Car("", owner0, carModel0, (-2727), (-2727), (-2727), (Point) null);
      // Undeclared exception!
      try { 
        car0.setPosition((Point) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 1892.9178482340049, "");
      Double double0 = new Double(5841.294291);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, carModel0, (-3108.91770343043), 749.121950766, 3, point0);
      // Undeclared exception!
      try { 
        car0.rate(3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.0, "G@N]_}&kN'G=");
      Double double0 = new Double(2758.3);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("G@N]_}&kN'G=", (Owner) null, carModel0, 2758.3, 0.0, 320, point0);
      Client client0 = new Client(point0, "\n", "", "main.java.model.CarModel$CarType", "gvf+d4^*P8O!ws.6[6<", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        car0.pendingRental(rental0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Owner owner0 = new Owner("", "HNn-BV]6b}sq};ku[L%", "", (-1401), "");
      Car car0 = new Car("\"_w#]jd=KUPtbli8g#", owner0, (CarModel) null, 3554.11609, (-1831.618580262245), 2600, (Point) null);
      // Undeclared exception!
      try { 
        car0.myclone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-151.65), "Rsl|8G<k(0(&");
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Rsl|8G<k(0(&", (Owner) null, carModel0, (-151.65), 0.0, 0, point0);
      // Undeclared exception!
      try { 
        car0.getOwnerID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Owner owner0 = new Owner("", "\n", "", 0, "");
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, (CarModel) null, 0, 2.0, 0, point0);
      // Undeclared exception!
      try { 
        car0.getAvgSpeed();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 2919, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2919, "");
      Double double0 = new Double(2919);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 2919, 2919, 2919, point0);
      car0.rate(2919);
      Car car1 = car0.myclone();
      Client client0 = new Client(point0, ")", "O carro necessita de ser abastecido\n", ")", ")", 2919);
      Rental rental0 = new Rental(car0, client0, point0);
      car0.approvePendingRental(rental0);
      Rental rental1 = new Rental(car1, client0, point0);
      car1.approvePendingRental(rental1);
      // Undeclared exception!
      try { 
        car0.equals(car1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Owner owner0 = new Owner("", "", "|_3$", 3976, "@r?j");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0.3, "");
      Car car0 = new Car("|_3$", owner0, carModel0, 1.2, 442.6057037502252, 3976, (Point) null);
      Car car1 = car0.myclone();
      Car car2 = car1.myclone();
      // Undeclared exception!
      try { 
        car1.equals(car2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 239.966, "DQAM");
      Double double0 = new Double((-1677.40828060892));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("DQAM", (Owner) null, carModel0, 239.966, (-661.5), 1886, point0);
      Rental rental0 = new Rental(car0, (Client) null, point0);
      // Undeclared exception!
      try { 
        car0.approvePendingRental(rental0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Owner owner0 = new Owner("SiPh,^kF6", "SiPh,^kF6", (String) null, 804, "SiPh,^kF6");
      Double double0 = new Double(804);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("SiPh,^kF6", owner0, (CarModel) null, 0L, 0L, 0, point0);
      // Undeclared exception!
      try { 
        car0.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Owner owner0 = new Owner("=", "=", "=", 2930, "=");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2930, "=");
      Double double0 = new Double(2930);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("=", owner0, carModel0, 2930, 2930, 2930, point0);
      car0.rate(2930);
      Car car1 = car0.myclone();
      Client client0 = new Client(point0, "=", "=", "=", "=", 2930);
      Rental rental0 = new Rental(car1, client0, point0);
      assertTrue(car0.equals((Object)car1));
      
      car1.approvePendingRental(rental0);
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Owner owner0 = new Owner("I", "J", "J", 2980, "J");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2980, "I");
      Double double0 = new Double(0L);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("J", owner0, carModel0, 2980, 0L, 2980, point0);
      Car car1 = new Car("I", owner0, carModel0, 2980, 0L, 2980, point0);
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Owner owner0 = new Owner("'", "'", "'", 2919, "'");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2919, "'");
      Double double0 = new Double(2919);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("'", owner0, carModel0, 2919, 2919, 2919, point0);
      Client client0 = new Client(point0, "'", "'", "'", "'", 2919);
      Rental rental0 = new Rental(car0, client0, point0);
      car0.rate(2919);
      Car car1 = car0.myclone();
      rental0.rate(0, 0);
      boolean boolean0 = car0.equals(car1);
      assertEquals(0, owner0.getRates());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Owner owner0 = new Owner("=", "=", "=", 2930, "=");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2930, "=");
      Double double0 = new Double(2930);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("=", owner0, carModel0, 2930, 2930, 2930, point0);
      car0.rate(2930);
      Car car1 = car0.myclone();
      boolean boolean0 = car0.equals(car1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Owner owner0 = new Owner("J", "J", "J", (-4208), "J");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-15.829658238083603), "J");
      Double double0 = new Double((-15.829658238083603));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("J", owner0, carModel0, (-4208), (-15.829658238083603), (-4208), point0);
      Car car1 = car0.myclone();
      Double double1 = new Double((-4208));
      Point point1 = new Point(double0, double1);
      car1.setPosition(point1, (-15.829658238083603));
      boolean boolean0 = car1.equals(car0);
      assertFalse(car1.equals((Object)car0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 2919, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2919, "");
      Double double0 = new Double(2919);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 2919, 2919, 2919, point0);
      Car car1 = car0.myclone();
      car1.swapState();
      boolean boolean0 = car1.equals(car0);
      assertFalse(car1.equals((Object)car0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Owner owner0 = new Owner("z*~ U\"#`-6pvm5Akk,Y", "z*~ U\"#`-6pvm5Akk,Y", "z*~ U\"#`-6pvm5Akk,Y", 2984, "z*~ U\"#`-6pvm5Akk,Y");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 0L, "z*~ U\"#`-6pvm5Akk,Y");
      Double double0 = new Double(0L);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("z*~ U\"#`-6pvm5Akk,Y", owner0, carModel0, 2984, 2984, 2984, point0);
      Car car1 = new Car("z*~ U\"#`-6pvm5Akk,Y", owner0, carModel0, 2984, 2984, (-2311), point0);
      boolean boolean0 = car1.equals(car0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Owner owner0 = new Owner("R", "R", "R", 2902, "R");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.HYBRID;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2902, "R");
      Double double0 = new Double(2902);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("R", owner0, carModel0, 2902, 3538.832375, 2902, point0);
      Car car1 = new Car("R", owner0, carModel0, 2902, 2902, 2902, point0);
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
      assertFalse(car1.equals((Object)car0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 624.2878159128, "zp~Vo9D+0Ca<s0 m@U#");
      Double double0 = new Double((-503L));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("zp~Vo9D+0Ca<s0 m@U#", (Owner) null, carModel0, (-503L), (-503L), (-4), point0);
      Car car1 = new Car("zp~Vo9D+0Ca<s0 m@U#", (Owner) null, carModel0, 624.2878159128, (-4), (-4), point0);
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-2313.917), "oK:`X(v`");
      Double double0 = new Double((-4780));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("oK:`X(v`", (Owner) null, carModel0, (-2313.917), (-2313.917), (-4780), point0);
      CarModel carModel1 = new CarModel(carModel_CarType0, (-4780), "oK:`X(v`");
      Car car1 = new Car("oK:`X(v`", (Owner) null, carModel1, (-4780), (-4780), (-4780), point0);
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Owner owner0 = new Owner("SiPh,^kF6", "SiPh,^kF6", (String) null, 804, "SiPh,^kF6");
      Double double0 = new Double(804);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("SiPh,^kF6", owner0, (CarModel) null, 0L, 0L, 0, point0);
      boolean boolean0 = car0.equals("SiPh,^kF6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Owner owner0 = new Owner("EJy", "EJy", "EJy", 2919, "EJy");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2919, "EJy");
      Double double0 = new Double(2919);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("EJy", owner0, carModel0, 2919, 2919, 2919, point0);
      boolean boolean0 = car0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 2919, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2919, "");
      Double double0 = new Double(2919);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 2919, 2919, 2919, point0);
      boolean boolean0 = car0.equals(car0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Owner owner0 = new Owner("=", "=", "=", 2930, "=");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2930, "=");
      Double double0 = new Double(2930);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("=", owner0, carModel0, 2930, 2930, 2930, point0);
      Car car1 = car0.myclone();
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
      assertFalse(car1.equals((Object)car0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-371.4696477), "main6javalmodel.Car");
      Double double0 = new Double((-371.4696477));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("main6javalmodel.Car", (Owner) null, carModel0, (-371.4696477), (-371.4696477), 0, point0);
      Double double1 = new Double(0);
      Point point1 = new Point(double1, double0);
      car0.setPosition(point1, 0);
      String string0 = car0.warnings();
      assertEquals("O carro necessita de ser abastecido\n", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Owner owner0 = new Owner("", "", "/iB=dHc_F`", 0, (String) null);
      CarModel carModel0 = new CarModel((CarModel.CarType) null, 0, (String) null);
      Car car0 = new Car("", owner0, carModel0, 68.95900783, (-180.324669), 0, (Point) null);
      String string0 = car0.warnings();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Owner owner0 = new Owner("=", "=", "=", 2930, "=");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ANY;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2930, "=");
      Double double0 = new Double(2930);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("=", owner0, carModel0, 2930, 2930, 2930, point0);
      boolean boolean0 = car0.hasRange(point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, (-371.4696477), "main6javalmodel.Car");
      Double double0 = new Double((-371.4696477));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("main6javalmodel.Car", (Owner) null, carModel0, (-371.4696477), (-371.4696477), 0, point0);
      Double double1 = new Double(0);
      Point point1 = new Point(double1, double0);
      car0.setPosition(point1, 0);
      boolean boolean0 = car0.hasRange(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Owner owner0 = new Owner("", "", "/iB=dHc_F`", 0, (String) null);
      CarModel carModel0 = new CarModel((CarModel.CarType) null, 0, (String) null);
      Car car0 = new Car("", owner0, carModel0, 68.95900783, (-180.324669), 0, (Point) null);
      // Undeclared exception!
      try { 
        car0.hasRange((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 2919, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2919, "");
      Double double0 = new Double(2919);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 2919, 2919, 2919, point0);
      car0.swapState();
      car0.swapState();
      assertEquals(CarModel.CarType.ELECTRIC, car0.getType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 2919, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.GAS;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2919, "");
      Double double0 = new Double(2919);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 2919, 2919, 2919, point0);
      car0.hashCode();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Owner owner0 = new Owner("", "", "/iB=dHc_F`", 0, (String) null);
      CarModel carModel0 = new CarModel((CarModel.CarType) null, 0, (String) null);
      Car car0 = new Car("", owner0, carModel0, 68.95900783, (-180.324669), 0, (Point) null);
      car0.pendingRental((Rental) null);
      assertNull(car0.getType());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Owner owner0 = new Owner("", "", "/iB=dHc_F`", 0, (String) null);
      CarModel carModel0 = new CarModel((CarModel.CarType) null, 0, (String) null);
      Car car0 = new Car("", owner0, carModel0, 68.95900783, (-180.324669), 0, (Point) null);
      car0.setBasePrice(68.95900783);
      assertNull(car0.getType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 2919, "");
      CarModel.CarType carModel_CarType0 = CarModel.CarType.ELECTRIC;
      CarModel carModel0 = new CarModel(carModel_CarType0, 2919, "");
      Double double0 = new Double(2919);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, carModel0, 2919, 2919, 2919, point0);
      String string0 = car0.toString();
      assertEquals("\n2919.00\n2919.00\ntrue\n100", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Owner owner0 = new Owner("", "", "/iB=dHc_F`", 0, (String) null);
      CarModel carModel0 = new CarModel((CarModel.CarType) null, 0, (String) null);
      Car car0 = new Car("", owner0, carModel0, 68.95900783, (-180.324669), 0, (Point) null);
      car0.refil();
      assertNull(car0.getType());
  }
}
