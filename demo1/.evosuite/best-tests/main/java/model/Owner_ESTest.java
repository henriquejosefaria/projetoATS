/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 21 22:35:16 GMT 2019
 */

package main.java.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import javax.management.AttributeList;
import main.java.model.Car;
import main.java.model.Client;
import main.java.model.Owner;
import main.java.model.Rental;
import main.java.utils.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Owner_ESTest extends Owner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 1, "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 1, 0.2, (-2891.2902706835002), 1, point0, "v_#AMHZNi-");
      Client client0 = new Client(point0, "", "", "", "", 1);
      Rental rental0 = new Rental(car0, client0, point0);
      owner0.rate(rental0, 1);
      assertEquals(1, client0.getRates());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Owner owner0 = new Owner(".S3Z", ".S3Z", (String) null, 0, "");
      owner0.rate(0);
      Owner owner1 = owner0.myclone();
      assertTrue(owner1.equals((Object)owner0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 0, "");
      owner0.rate((-2101));
      Owner owner1 = owner0.myclone();
      assertTrue(owner1.equals((Object)owner0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Owner owner0 = new Owner("", "", "Gasolina", 0, "[");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(2214.061629349081);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 2214.061629349081, 0.0, (-428.5457931324), 0, point0, "1%]hVem`ux%");
      Client client0 = new Client(point0, "", "[", "", "Gasolina", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      owner0.addPendingRental(rental0);
      AttributeList attributeList0 = owner0.getPending();
      assertFalse(attributeList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Owner owner0 = new Owner("", "\n", "", (-760), "");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double((-760));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("#\",SMK", owner0, car_CarType0, (-1.0), 4187.74024375717, (-760), 1, point0, "rwP]h9KeHi{U`");
      owner0.addCar(car0);
      List<Car> list0 = owner0.getCars();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Owner owner0 = new Owner("(U`\"%{>\"0[(NIh)Lp", "(U`\"%{>\"0[(NIh)Lp", "(U`\"%{>\"0[(NIh)Lp", 1, "(U`\"%{>\"0[(NIh)Lp");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("(U`\"%{>\"0[(NIh)Lp", owner0, car_CarType0, (-1968.63602872747), (-1968.63602872747), (-2185.37), 1, point0, "&");
      Rental rental0 = new Rental(car0, (Client) null, point0);
      car0.pendingRental(rental0);
      Rental rental1 = new Rental(car0, (Client) null, point0);
      // Undeclared exception!
      try { 
        owner0.refuse(rental1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, (String) null, 2, "");
      Owner owner1 = owner0.myclone();
      // Undeclared exception!
      try { 
        owner1.getPending();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.ArrayList cannot be cast to javax.management.AttributeList
         //
         verifyException("main.java.model.Owner", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Owner owner0 = new Owner("X?fr", "X?fr", "X?fr", 2045, "X?fr");
      Owner owner1 = owner0.myclone();
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(2045);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("X?fr", owner1, car_CarType0, 2045, 2045, 2045, 2045, point0, "U");
      Client client0 = new Client(point0, "\u001B[1m", "main.java.model.Owner", "ELECTRIC", "\u001B[38m", 2045);
      Rental rental0 = new Rental(car0, client0, point0);
      owner0.addPendingRental(rental0);
      Car car1 = new Car("X?fr", owner0, car_CarType0, 2045, 2045, 2045, 2045, point0, "X?fr");
      Rental rental1 = new Rental(car1, client0, point0);
      owner1.addPendingRental(rental1);
      // Undeclared exception!
      try { 
        owner0.equals(owner1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Owner owner0 = new Owner("X?fr", "X?fr", "X?fr", 2045, "X?fr");
      Owner owner1 = owner0.myclone();
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(2045);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("X?fr", owner0, car_CarType0, 2045, 2045, 2045, 2045, point0, "X?fr");
      Rental rental0 = new Rental(car0, (Client) null, point0);
      car0.pendingRental(rental0);
      Client client0 = new Client(point0, "X?fr", "X?fr", "X?fr", "X?fr", 2045);
      Rental rental1 = new Rental(car0, client0, point0);
      owner1.addPendingRental(rental1);
      // Undeclared exception!
      try { 
        owner0.equals(owner1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Owner owner0 = new Owner("C`Zc<?E[[T5.6c", "C`Zc<?E[[T5.6c", "C`Zc<?E[[T5.6c", 214, "Viagem:         ");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(214);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("C`Zc<?E[[T5.6c", owner0, car_CarType0, 3154.492912, 3154.492912, 3154.492912, 214, point0, "C`Zc<?E[[T5.6c");
      owner0.addPendingRental((Rental) null);
      car0.pendingRental((Rental) null);
      // Undeclared exception!
      try { 
        owner0.accept((Rental) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Owner", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, (String) null, 2, "");
      List<Car> list0 = owner0.getCars();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, (String) null, 2, "");
      Owner owner1 = owner0.myclone();
      assertTrue(owner1.equals((Object)owner0));
      
      owner1.accept((Rental) null);
      boolean boolean0 = owner0.equals(owner1);
      assertFalse(owner1.equals((Object)owner0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, (String) null, 2, "");
      Owner owner1 = owner0.myclone();
      assertTrue(owner1.equals((Object)owner0));
      
      owner0.addPendingRental((Rental) null);
      boolean boolean0 = owner0.equals(owner1);
      assertFalse(owner1.equals((Object)owner0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Owner owner0 = new Owner("GAS", "GAS", "GAS", (-1511), "GAS");
      Owner owner1 = new Owner("GAS", "GAS", "GAS", (-1511), "GAS");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-1511));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("GAS", owner1, car_CarType0, (-1511), (-1511), (-1511), (-1511), point0, "GAS");
      owner1.addCar(car0);
      boolean boolean0 = owner1.equals(owner0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, (String) null, 0, "");
      boolean boolean0 = owner0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Owner owner0 = new Owner("r", "r", "r", 2045, "r");
      boolean boolean0 = owner0.equals(owner0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, (String) null, 2, "");
      boolean boolean0 = owner0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, (String) null, 2, "");
      // Undeclared exception!
      try { 
        owner0.rate((Rental) null, (-1888));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Owner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, (String) null, 2, "");
      owner0.refuse((Rental) null);
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Owner owner0 = new Owner("(U`\"%{>\"0[(NIh)Lp", "(U`\"%{>\"0[(NIh)Lp", "(U`\"%{>\"0[(NIh)Lp", 124, "(U`\"%{>\"0[(NIh)Lp");
      owner0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, (String) null, 2, "");
      Owner owner1 = owner0.myclone();
      boolean boolean0 = owner0.equals(owner1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, (String) null, 2, "");
      AttributeList attributeList0 = owner0.getPending();
      assertTrue(attributeList0.isEmpty());
  }
}
