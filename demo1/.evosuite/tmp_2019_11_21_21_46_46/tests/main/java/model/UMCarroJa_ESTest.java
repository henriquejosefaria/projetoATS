/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 21 22:47:45 GMT 2019
 */

package main.java.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.List;
import java.util.Map;
import main.java.model.Car;
import main.java.model.Client;
import main.java.model.Owner;
import main.java.model.Rental;
import main.java.model.UMCarroJa;
import main.java.model.User;
import main.java.utils.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UMCarroJa_ESTest extends UMCarroJa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", (-2147483645), "");
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      List<Rental> list0 = uMCarroJa0.getRentalListOwner(owner0, (LocalDateTime) null, localDateTime0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", (-2147483645), "");
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(1976);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0.0, (-2147483645), (-2147483645), 1976, point0, "mjIqQE|");
      double double1 = uMCarroJa0.getTotalBilledCar(car0, localDateTime0, (LocalDateTime) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      try { 
        uMCarroJa0.addCar("Can't write to file!!\n", "w7&[Ig[P?|^v", car_CarType0, 320.9351893, 0.4, 1012.4742, 0, (Point) null, "Can't write to file!!\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", (-1), "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-1), (-1), (-1), (-1), point0, "");
      owner0.addCar(car0);
      uMCarroJa0.swapState(owner0, 0);
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "Ee", 100, "Ee");
      uMCarroJa0.addUser(owner0);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(1.1367421310250823);
      Point point0 = new Point(double0, double0);
      uMCarroJa0.addCar(owner0, "Ee", car_CarType0, 100, 0.0, 0.0, 100, point0, "R_X%*4\"FbhM>F7;");
      assertEquals(1.1367421310250823, point0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("Ce", "Ce", "Ce", 0, "[=^K^>Un{uH");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Ce", owner0, car_CarType0, 0, 0, 537.0048606, (-1), point0, "Ce");
      Client client0 = new Client(point0, "Ce", "", "", "Ce", 80982221);
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.rent(rental0);
      List<Rental> list0 = uMCarroJa0.getRentalListOwner(owner0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "Ee", 100, "Ee");
      uMCarroJa0.addUser(owner0);
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClientsTravel();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "Ee", 100, "Ee");
      uMCarroJa0.addUser(owner0);
      List<Map.Entry<String, Integer>> list0 = (List<Map.Entry<String, Integer>>)uMCarroJa0.getBestClientsTimes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "Ee", 100, "Ee");
      uMCarroJa0.addUser(owner0);
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClients();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.swapState((Owner) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner((String) null, (String) null, (String) null, (-24), ")lzh]l[W*$r");
      // Undeclared exception!
      try { 
        uMCarroJa0.swapState(owner0, 1401);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1401, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("@gmail.com", "@gmail.com", "5w\"hPc.hK'|Z3", 1, (String) null);
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice(owner0, 170, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 170, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("&p", "&p", "", (-1), "");
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice(owner0, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.save((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("7~^kv}a!1!@pi{aOF?");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.save("7~^kv}a!1!@pi{aOF?");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.save("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(2532.8416);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, "", (String) null, "main.java.model.User", 0);
      try { 
        uMCarroJa0.rental(point0, (String) null, client0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-1517.0));
      Point point0 = new Point(double0, double0);
      Car.CarType car_CarType0 = Car.CarType.GAS;
      // Undeclared exception!
      try { 
        uMCarroJa0.rental((Client) null, point0, "", car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-625.90885265));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "C", "qA$j=", "", "", 1);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      try { 
        uMCarroJa0.rental(client0, point0, (-1.0), car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = Double.valueOf(0.1);
      Owner owner0 = new Owner("", "", "Ee", 100, "Ee");
      uMCarroJa0.addUser(owner0);
      Point point0 = new Point(double0, double0);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      // Undeclared exception!
      try { 
        uMCarroJa0.rental("", point0, (String) null, car_CarType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // main.java.model.Owner cannot be cast to main.java.model.Client
         //
         verifyException("main.java.model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.refil((Owner) null, (-1128));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("qm\"", "main.java.exceptions.UnknownCarTypeException", "qm\"", (-1), "qm\"");
      // Undeclared exception!
      try { 
        uMCarroJa0.refil(owner0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        UMCarroJa.read((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("]CN(0-]Ehy)l");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "jd5nhsKVp@w");
      try { 
        UMCarroJa.read("]CN(0-]Ehy)l");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 6A64356E
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, "", "", "", 0);
      // Undeclared exception!
      try { 
        uMCarroJa0.rate(client0, (Rental) null, 320, 993);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getTotalBilledCar((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(2377L, 0, zoneOffset0);
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListOwner((Owner) null, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListOwner((Owner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListClient((Client) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.addUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("Can't read the specified file!!\n", "N", "", (-1832), (String) null);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-1832));
      Point point0 = new Point(double0, double0);
      try { 
        uMCarroJa0.addCar(owner0, "naCqmCk+Z58*;", car_CarType0, (-1048.6489), 593.4496501542, 0.0, (-1832), point0, "Can't read the specified file!!\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", (-3832), "");
      // Undeclared exception!
      try { 
        uMCarroJa0.refil(owner0, 1147);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1147, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      uMCarroJa0.save("Custo Total: ");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "Ee", 100, "Ee");
      List<Rental> list0 = uMCarroJa0.getRentalListOwner(owner0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner((String) null, "", "", (-1315), "");
      // Undeclared exception!
      try { 
        uMCarroJa0.swapState(owner0, (-1315));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      List<Map.Entry<String, Integer>> list0 = (List<Map.Entry<String, Integer>>)uMCarroJa0.getBestClientsTimes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-118.5436));
      Point point0 = new Point(double0, double0);
      Car.CarType car_CarType0 = Car.CarType.GAS;
      // Undeclared exception!
      try { 
        uMCarroJa0.rental((Client) null, point0, (-701.0), car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.rate("MaisBarato", 1871);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      try { 
        UMCarroJa.read("]CN(0-]Ehy)l");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "Ee", 100, "Ee");
      uMCarroJa0.addUser(owner0);
      try { 
        uMCarroJa0.logIn("", "Can't write to file!!\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Client client0 = new Client((Point) null, (String) null, (String) null, (String) null, (String) null, (-641));
      Car.CarType car_CarType0 = Car.CarType.ANY;
      try { 
        uMCarroJa0.rental((Point) null, (double) (-641), car_CarType0, client0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, ">U/[yZtL({v4<mNVop", ">U/[yZtL({v4<mNVop", "GAS", "GAS", (-4466));
      List<Rental> list0 = uMCarroJa0.getRentalListClient(client0, (LocalDateTime) null, (LocalDateTime) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-331.6579887951));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "QaeG", "QaeG", "QaeG", "", (-1301));
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      try { 
        uMCarroJa0.rental(client0, point0, " -> ", car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice((Owner) null, 353, 0.6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Owner owner0 = new Owner("U<%y`?{8Y^x>4P7&", "Can't write to file!!\n", "", 10, "Can't write to file!!\n");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Car car0 = new Car("Can't write to file!!\n", owner0, car_CarType0, 2134.825206777972, (-3109.3888591), 0.0, 2609, point0, "Can't write to file!!\n");
      Client client0 = new Client(point0, "OGdb>{NIM", "5AgXXNhW<DE-k", "OGdb>{NIM", "", 10);
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.refuse(owner0, rental0);
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-331.6579887951));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "QaeG", "QaeG", "QaeG", "", (-1301));
      Owner owner0 = new Owner("", "QaeG", "OX{W[*", (-1301), "{WPUvAA#0;");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Car car0 = new Car("QaeG", owner0, car_CarType0, (-1.0), (-1543.336613107124), (-1301), 865, point0, "HxvH=I0`W22$-1+/`");
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.rate(client0, rental0, (-1301), 1675);
      assertEquals(1675, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = Double.valueOf(0.1);
      Point point0 = new Point(double0, double0);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      try { 
        uMCarroJa0.rental("", point0, (String) null, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(375.498571858);
      Point point0 = new Point(double0, double0);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      // Undeclared exception!
      try { 
        uMCarroJa0.addCar((Owner) null, "", car_CarType0, 0.0, 0.0, 0.0, 12, point0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("Ce", "Ce", "Ce", 0, "[=^K^>Un{uH");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Ce", owner0, car_CarType0, 0, 0, 537.0048606, (-1), point0, "Ce");
      Client client0 = new Client(point0, "Ce", "", "", "Ce", 80982221);
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.rent(rental0);
      List<Rental> list0 = uMCarroJa0.getRentalListClient(client0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClients();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("Ce", "Ce", "Ce", 0, "[=^K^>Un{uH");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Ce", owner0, car_CarType0, 0, 0, 537.0048606, (-1), point0, "Ce");
      Client client0 = new Client(point0, "Ce", "", "", "Ce", 80982221);
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.rate(owner0, rental0, (-1));
      assertEquals((-1), client0.getRates());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("Ce", "Ce", "Ce", 0, "[=^K^>Un{uH");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Ce", owner0, car_CarType0, 0, 0, 537.0048606, (-1), point0, "Ce");
      double double1 = uMCarroJa0.getTotalBilledCar(car0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(375.498571858);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "%!^", "", "n;NUvS35", 2);
      List<Rental> list0 = uMCarroJa0.getRentalListClient(client0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClientsTravel();
      assertTrue(list0.isEmpty());
  }
}
